package networkaccess
type MalwareCategory int

const (
    ADWARE_MALWARECATEGORY MalwareCategory = iota
    BACKDOOR_MALWARECATEGORY
    BEHAVIOR_MALWARECATEGORY
    BOT_MALWARECATEGORY
    BROWSERMODIFIER_MALWARECATEGORY
    CONSTRUCTOR_MALWARECATEGORY
    CRYPTOJACKING_MALWARECATEGORY
    DDOS_MALWARECATEGORY
    DROPPER_MALWARECATEGORY
    DROPPERMALWARE_MALWARECATEGORY
    EXPLOIT_MALWARECATEGORY
    FILELESSMALWARE_MALWARECATEGORY
    HACKTOOL_MALWARECATEGORY
    HYBRIDMALWARE_MALWARECATEGORY
    JOKE_MALWARECATEGORY
    KEYLOGGER_MALWARECATEGORY
    MISLEADING_MALWARECATEGORY
    MONITORINGTOOL_MALWARECATEGORY
    POLYMORPHICMALWARE_MALWARECATEGORY
    PASSWORDSTEALER_MALWARECATEGORY
    PROGRAM_MALWARECATEGORY
    RANSOMWARE_MALWARECATEGORY
    REMOTEACCESS_MALWARECATEGORY
    ROGUE_MALWARECATEGORY
    ROOTKIT_MALWARECATEGORY
    SETTINGSMODIFIER_MALWARECATEGORY
    SOFTWAREBUNDLER_MALWARECATEGORY
    SPAMMER_MALWARECATEGORY
    SPOOFER_MALWARECATEGORY
    SPYWARE_MALWARECATEGORY
    TOOL_MALWARECATEGORY
    TROJAN_MALWARECATEGORY
    TROJANCLICKER_MALWARECATEGORY
    TROJANDOWNLOADER_MALWARECATEGORY
    TROJANNOTIFIER_MALWARECATEGORY
    TROJANPROXY_MALWARECATEGORY
    TROJANSPY_MALWARECATEGORY
    VIRUS_MALWARECATEGORY
    WIPERMALWARE_MALWARECATEGORY
    WORM_MALWARECATEGORY
    UNKNOWNFUTUREVALUE_MALWARECATEGORY
)

func (i MalwareCategory) String() string {
    return []string{"adware", "backdoor", "behavior", "bot", "browserModifier", "constructor", "cryptojacking", "ddos", "dropper", "dropperMalware", "exploit", "filelessMalware", "hackTool", "hybridMalware", "joke", "keylogger", "misleading", "monitoringTool", "polymorphicMalware", "passwordStealer", "program", "ransomware", "remoteAccess", "rogue", "rootkit", "settingsModifier", "softwareBundler", "spammer", "spoofer", "spyware", "tool", "trojan", "trojanClicker", "trojanDownloader", "trojanNotifier", "trojanProxy", "trojanSpy", "virus", "wiperMalware", "worm", "unknownFutureValue"}[i]
}
func ParseMalwareCategory(v string) (any, error) {
    result := ADWARE_MALWARECATEGORY
    switch v {
        case "adware":
            result = ADWARE_MALWARECATEGORY
        case "backdoor":
            result = BACKDOOR_MALWARECATEGORY
        case "behavior":
            result = BEHAVIOR_MALWARECATEGORY
        case "bot":
            result = BOT_MALWARECATEGORY
        case "browserModifier":
            result = BROWSERMODIFIER_MALWARECATEGORY
        case "constructor":
            result = CONSTRUCTOR_MALWARECATEGORY
        case "cryptojacking":
            result = CRYPTOJACKING_MALWARECATEGORY
        case "ddos":
            result = DDOS_MALWARECATEGORY
        case "dropper":
            result = DROPPER_MALWARECATEGORY
        case "dropperMalware":
            result = DROPPERMALWARE_MALWARECATEGORY
        case "exploit":
            result = EXPLOIT_MALWARECATEGORY
        case "filelessMalware":
            result = FILELESSMALWARE_MALWARECATEGORY
        case "hackTool":
            result = HACKTOOL_MALWARECATEGORY
        case "hybridMalware":
            result = HYBRIDMALWARE_MALWARECATEGORY
        case "joke":
            result = JOKE_MALWARECATEGORY
        case "keylogger":
            result = KEYLOGGER_MALWARECATEGORY
        case "misleading":
            result = MISLEADING_MALWARECATEGORY
        case "monitoringTool":
            result = MONITORINGTOOL_MALWARECATEGORY
        case "polymorphicMalware":
            result = POLYMORPHICMALWARE_MALWARECATEGORY
        case "passwordStealer":
            result = PASSWORDSTEALER_MALWARECATEGORY
        case "program":
            result = PROGRAM_MALWARECATEGORY
        case "ransomware":
            result = RANSOMWARE_MALWARECATEGORY
        case "remoteAccess":
            result = REMOTEACCESS_MALWARECATEGORY
        case "rogue":
            result = ROGUE_MALWARECATEGORY
        case "rootkit":
            result = ROOTKIT_MALWARECATEGORY
        case "settingsModifier":
            result = SETTINGSMODIFIER_MALWARECATEGORY
        case "softwareBundler":
            result = SOFTWAREBUNDLER_MALWARECATEGORY
        case "spammer":
            result = SPAMMER_MALWARECATEGORY
        case "spoofer":
            result = SPOOFER_MALWARECATEGORY
        case "spyware":
            result = SPYWARE_MALWARECATEGORY
        case "tool":
            result = TOOL_MALWARECATEGORY
        case "trojan":
            result = TROJAN_MALWARECATEGORY
        case "trojanClicker":
            result = TROJANCLICKER_MALWARECATEGORY
        case "trojanDownloader":
            result = TROJANDOWNLOADER_MALWARECATEGORY
        case "trojanNotifier":
            result = TROJANNOTIFIER_MALWARECATEGORY
        case "trojanProxy":
            result = TROJANPROXY_MALWARECATEGORY
        case "trojanSpy":
            result = TROJANSPY_MALWARECATEGORY
        case "virus":
            result = VIRUS_MALWARECATEGORY
        case "wiperMalware":
            result = WIPERMALWARE_MALWARECATEGORY
        case "worm":
            result = WORM_MALWARECATEGORY
        case "unknownFutureValue":
            result = UNKNOWNFUTUREVALUE_MALWARECATEGORY
        default:
            return nil, nil
    }
    return &result, nil
}
func SerializeMalwareCategory(values []MalwareCategory) []string {
    result := make([]string, len(values))
    for i, v := range values {
        result[i] = v.String()
    }
    return result
}
func (i MalwareCategory) isMultiValue() bool {
    return false
}
