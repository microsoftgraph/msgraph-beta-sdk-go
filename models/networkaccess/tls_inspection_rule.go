// Code generated by Microsoft Kiota - DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package networkaccess

import (
    i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91 "github.com/microsoft/kiota-abstractions-go/serialization"
)

type TlsInspectionRule struct {
    PolicyRule
}
// NewTlsInspectionRule instantiates a new TlsInspectionRule and sets the default values.
func NewTlsInspectionRule()(*TlsInspectionRule) {
    m := &TlsInspectionRule{
        PolicyRule: *NewPolicyRule(),
    }
    odataTypeValue := "#microsoft.graph.networkaccess.tlsInspectionRule"
    m.SetOdataType(&odataTypeValue)
    return m
}
// CreateTlsInspectionRuleFromDiscriminatorValue creates a new instance of the appropriate class based on discriminator value
// returns a Parsable when successful
func CreateTlsInspectionRuleFromDiscriminatorValue(parseNode i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode)(i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.Parsable, error) {
    return NewTlsInspectionRule(), nil
}
// GetDescription gets the description property value. Optional description explaining the purpose of the rule.
// returns a *string when successful
func (m *TlsInspectionRule) GetDescription()(*string) {
    val, err := m.GetBackingStore().Get("description")
    if err != nil {
        panic(err)
    }
    if val != nil {
        return val.(*string)
    }
    return nil
}
// GetFieldDeserializers the deserialization information for the current model
// returns a map[string]func(i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode)(error) when successful
func (m *TlsInspectionRule) GetFieldDeserializers()(map[string]func(i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode)(error)) {
    res := m.PolicyRule.GetFieldDeserializers()
    res["description"] = func (n i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode) error {
        val, err := n.GetStringValue()
        if err != nil {
            return err
        }
        if val != nil {
            m.SetDescription(val)
        }
        return nil
    }
    res["matchingConditions"] = func (n i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode) error {
        val, err := n.GetObjectValue(CreateTlsInspectionMatchingConditionsFromDiscriminatorValue)
        if err != nil {
            return err
        }
        if val != nil {
            m.SetMatchingConditions(val.(TlsInspectionMatchingConditionsable))
        }
        return nil
    }
    res["priority"] = func (n i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode) error {
        val, err := n.GetInt64Value()
        if err != nil {
            return err
        }
        if val != nil {
            m.SetPriority(val)
        }
        return nil
    }
    res["settings"] = func (n i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode) error {
        val, err := n.GetObjectValue(CreateTlsInspectionRuleSettingsFromDiscriminatorValue)
        if err != nil {
            return err
        }
        if val != nil {
            m.SetSettings(val.(TlsInspectionRuleSettingsable))
        }
        return nil
    }
    return res
}
// GetMatchingConditions gets the matchingConditions property value. The matchingConditions property
// returns a TlsInspectionMatchingConditionsable when successful
func (m *TlsInspectionRule) GetMatchingConditions()(TlsInspectionMatchingConditionsable) {
    val, err := m.GetBackingStore().Get("matchingConditions")
    if err != nil {
        panic(err)
    }
    if val != nil {
        return val.(TlsInspectionMatchingConditionsable)
    }
    return nil
}
// GetPriority gets the priority property value. The priority of the rule. Rules are evaluated in ascending order of priority. Lower numbers indicate higher priority. Supports $filter (eq, ne, not, ge, le, in) and $orderby.
// returns a *int64 when successful
func (m *TlsInspectionRule) GetPriority()(*int64) {
    val, err := m.GetBackingStore().Get("priority")
    if err != nil {
        panic(err)
    }
    if val != nil {
        return val.(*int64)
    }
    return nil
}
// GetSettings gets the settings property value. The settings property
// returns a TlsInspectionRuleSettingsable when successful
func (m *TlsInspectionRule) GetSettings()(TlsInspectionRuleSettingsable) {
    val, err := m.GetBackingStore().Get("settings")
    if err != nil {
        panic(err)
    }
    if val != nil {
        return val.(TlsInspectionRuleSettingsable)
    }
    return nil
}
// Serialize serializes information the current object
func (m *TlsInspectionRule) Serialize(writer i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.SerializationWriter)(error) {
    err := m.PolicyRule.Serialize(writer)
    if err != nil {
        return err
    }
    {
        err = writer.WriteStringValue("description", m.GetDescription())
        if err != nil {
            return err
        }
    }
    {
        err = writer.WriteObjectValue("matchingConditions", m.GetMatchingConditions())
        if err != nil {
            return err
        }
    }
    {
        err = writer.WriteInt64Value("priority", m.GetPriority())
        if err != nil {
            return err
        }
    }
    {
        err = writer.WriteObjectValue("settings", m.GetSettings())
        if err != nil {
            return err
        }
    }
    return nil
}
// SetDescription sets the description property value. Optional description explaining the purpose of the rule.
func (m *TlsInspectionRule) SetDescription(value *string)() {
    err := m.GetBackingStore().Set("description", value)
    if err != nil {
        panic(err)
    }
}
// SetMatchingConditions sets the matchingConditions property value. The matchingConditions property
func (m *TlsInspectionRule) SetMatchingConditions(value TlsInspectionMatchingConditionsable)() {
    err := m.GetBackingStore().Set("matchingConditions", value)
    if err != nil {
        panic(err)
    }
}
// SetPriority sets the priority property value. The priority of the rule. Rules are evaluated in ascending order of priority. Lower numbers indicate higher priority. Supports $filter (eq, ne, not, ge, le, in) and $orderby.
func (m *TlsInspectionRule) SetPriority(value *int64)() {
    err := m.GetBackingStore().Set("priority", value)
    if err != nil {
        panic(err)
    }
}
// SetSettings sets the settings property value. The settings property
func (m *TlsInspectionRule) SetSettings(value TlsInspectionRuleSettingsable)() {
    err := m.GetBackingStore().Set("settings", value)
    if err != nil {
        panic(err)
    }
}
type TlsInspectionRuleable interface {
    i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.Parsable
    PolicyRuleable
    GetDescription()(*string)
    GetMatchingConditions()(TlsInspectionMatchingConditionsable)
    GetPriority()(*int64)
    GetSettings()(TlsInspectionRuleSettingsable)
    SetDescription(value *string)()
    SetMatchingConditions(value TlsInspectionMatchingConditionsable)()
    SetPriority(value *int64)()
    SetSettings(value TlsInspectionRuleSettingsable)()
}
