// Code generated by Microsoft Kiota - DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package networkaccess

import (
    i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91 "github.com/microsoft/kiota-abstractions-go/serialization"
    ie233ee762e29b4ba6970aa2a2efce4b7fde11697ca9ea81099d0f8269309c1be "github.com/microsoftgraph/msgraph-beta-sdk-go/models"
)

type ExternalCertificateAuthorityCertificate struct {
    ie233ee762e29b4ba6970aa2a2efce4b7fde11697ca9ea81099d0f8269309c1be.Entity
}
// NewExternalCertificateAuthorityCertificate instantiates a new ExternalCertificateAuthorityCertificate and sets the default values.
func NewExternalCertificateAuthorityCertificate()(*ExternalCertificateAuthorityCertificate) {
    m := &ExternalCertificateAuthorityCertificate{
        Entity: *ie233ee762e29b4ba6970aa2a2efce4b7fde11697ca9ea81099d0f8269309c1be.NewEntity(),
    }
    return m
}
// CreateExternalCertificateAuthorityCertificateFromDiscriminatorValue creates a new instance of the appropriate class based on discriminator value
// returns a Parsable when successful
func CreateExternalCertificateAuthorityCertificateFromDiscriminatorValue(parseNode i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode)(i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.Parsable, error) {
    return NewExternalCertificateAuthorityCertificate(), nil
}
// GetCertificate gets the certificate property value. The signed X.509 certificate in PEM format.
// returns a *string when successful
func (m *ExternalCertificateAuthorityCertificate) GetCertificate()(*string) {
    val, err := m.GetBackingStore().Get("certificate")
    if err != nil {
        panic(err)
    }
    if val != nil {
        return val.(*string)
    }
    return nil
}
// GetCertificateSigningRequest gets the certificateSigningRequest property value. The Certificate Signing Request (CSR) generated when creating the CA. This CSR should be signed using the customer's PKI infrastructure. Read-only.
// returns a *string when successful
func (m *ExternalCertificateAuthorityCertificate) GetCertificateSigningRequest()(*string) {
    val, err := m.GetBackingStore().Get("certificateSigningRequest")
    if err != nil {
        panic(err)
    }
    if val != nil {
        return val.(*string)
    }
    return nil
}
// GetChain gets the chain property value. The certificate chain in PEM format, containing all intermediate certificates up to the root CA.
// returns a *string when successful
func (m *ExternalCertificateAuthorityCertificate) GetChain()(*string) {
    val, err := m.GetBackingStore().Get("chain")
    if err != nil {
        panic(err)
    }
    if val != nil {
        return val.(*string)
    }
    return nil
}
// GetCommonName gets the commonName property value. The common name (CN) field of the certificate. Supports $filter (eq, ne, startsWith)
// returns a *string when successful
func (m *ExternalCertificateAuthorityCertificate) GetCommonName()(*string) {
    val, err := m.GetBackingStore().Get("commonName")
    if err != nil {
        panic(err)
    }
    if val != nil {
        return val.(*string)
    }
    return nil
}
// GetFieldDeserializers the deserialization information for the current model
// returns a map[string]func(i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode)(error) when successful
func (m *ExternalCertificateAuthorityCertificate) GetFieldDeserializers()(map[string]func(i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode)(error)) {
    res := m.Entity.GetFieldDeserializers()
    res["certificate"] = func (n i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode) error {
        val, err := n.GetStringValue()
        if err != nil {
            return err
        }
        if val != nil {
            m.SetCertificate(val)
        }
        return nil
    }
    res["certificateSigningRequest"] = func (n i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode) error {
        val, err := n.GetStringValue()
        if err != nil {
            return err
        }
        if val != nil {
            m.SetCertificateSigningRequest(val)
        }
        return nil
    }
    res["chain"] = func (n i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode) error {
        val, err := n.GetStringValue()
        if err != nil {
            return err
        }
        if val != nil {
            m.SetChain(val)
        }
        return nil
    }
    res["commonName"] = func (n i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode) error {
        val, err := n.GetStringValue()
        if err != nil {
            return err
        }
        if val != nil {
            m.SetCommonName(val)
        }
        return nil
    }
    res["name"] = func (n i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode) error {
        val, err := n.GetStringValue()
        if err != nil {
            return err
        }
        if val != nil {
            m.SetName(val)
        }
        return nil
    }
    res["organizationName"] = func (n i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode) error {
        val, err := n.GetStringValue()
        if err != nil {
            return err
        }
        if val != nil {
            m.SetOrganizationName(val)
        }
        return nil
    }
    res["status"] = func (n i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode) error {
        val, err := n.GetEnumValue(ParseTlsCertificateStatus)
        if err != nil {
            return err
        }
        if val != nil {
            m.SetStatus(val.(*TlsCertificateStatus))
        }
        return nil
    }
    res["validity"] = func (n i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode) error {
        val, err := n.GetObjectValue(CreateValidityDateFromDiscriminatorValue)
        if err != nil {
            return err
        }
        if val != nil {
            m.SetValidity(val.(ValidityDateable))
        }
        return nil
    }
    return res
}
// GetName gets the name property value. The display name of the CA. Supports $filter (eq, ne, startsWith)
// returns a *string when successful
func (m *ExternalCertificateAuthorityCertificate) GetName()(*string) {
    val, err := m.GetBackingStore().Get("name")
    if err != nil {
        panic(err)
    }
    if val != nil {
        return val.(*string)
    }
    return nil
}
// GetOrganizationName gets the organizationName property value. The organization name (OU) field of the certificate. Supports $filter (eq, ne, startsWith)
// returns a *string when successful
func (m *ExternalCertificateAuthorityCertificate) GetOrganizationName()(*string) {
    val, err := m.GetBackingStore().Get("organizationName")
    if err != nil {
        panic(err)
    }
    if val != nil {
        return val.(*string)
    }
    return nil
}
// GetStatus gets the status property value. The status property
// returns a *TlsCertificateStatus when successful
func (m *ExternalCertificateAuthorityCertificate) GetStatus()(*TlsCertificateStatus) {
    val, err := m.GetBackingStore().Get("status")
    if err != nil {
        panic(err)
    }
    if val != nil {
        return val.(*TlsCertificateStatus)
    }
    return nil
}
// GetValidity gets the validity property value. The validity property
// returns a ValidityDateable when successful
func (m *ExternalCertificateAuthorityCertificate) GetValidity()(ValidityDateable) {
    val, err := m.GetBackingStore().Get("validity")
    if err != nil {
        panic(err)
    }
    if val != nil {
        return val.(ValidityDateable)
    }
    return nil
}
// Serialize serializes information the current object
func (m *ExternalCertificateAuthorityCertificate) Serialize(writer i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.SerializationWriter)(error) {
    err := m.Entity.Serialize(writer)
    if err != nil {
        return err
    }
    {
        err = writer.WriteStringValue("certificate", m.GetCertificate())
        if err != nil {
            return err
        }
    }
    {
        err = writer.WriteStringValue("certificateSigningRequest", m.GetCertificateSigningRequest())
        if err != nil {
            return err
        }
    }
    {
        err = writer.WriteStringValue("chain", m.GetChain())
        if err != nil {
            return err
        }
    }
    {
        err = writer.WriteStringValue("commonName", m.GetCommonName())
        if err != nil {
            return err
        }
    }
    {
        err = writer.WriteStringValue("name", m.GetName())
        if err != nil {
            return err
        }
    }
    {
        err = writer.WriteStringValue("organizationName", m.GetOrganizationName())
        if err != nil {
            return err
        }
    }
    if m.GetStatus() != nil {
        cast := (*m.GetStatus()).String()
        err = writer.WriteStringValue("status", &cast)
        if err != nil {
            return err
        }
    }
    {
        err = writer.WriteObjectValue("validity", m.GetValidity())
        if err != nil {
            return err
        }
    }
    return nil
}
// SetCertificate sets the certificate property value. The signed X.509 certificate in PEM format.
func (m *ExternalCertificateAuthorityCertificate) SetCertificate(value *string)() {
    err := m.GetBackingStore().Set("certificate", value)
    if err != nil {
        panic(err)
    }
}
// SetCertificateSigningRequest sets the certificateSigningRequest property value. The Certificate Signing Request (CSR) generated when creating the CA. This CSR should be signed using the customer's PKI infrastructure. Read-only.
func (m *ExternalCertificateAuthorityCertificate) SetCertificateSigningRequest(value *string)() {
    err := m.GetBackingStore().Set("certificateSigningRequest", value)
    if err != nil {
        panic(err)
    }
}
// SetChain sets the chain property value. The certificate chain in PEM format, containing all intermediate certificates up to the root CA.
func (m *ExternalCertificateAuthorityCertificate) SetChain(value *string)() {
    err := m.GetBackingStore().Set("chain", value)
    if err != nil {
        panic(err)
    }
}
// SetCommonName sets the commonName property value. The common name (CN) field of the certificate. Supports $filter (eq, ne, startsWith)
func (m *ExternalCertificateAuthorityCertificate) SetCommonName(value *string)() {
    err := m.GetBackingStore().Set("commonName", value)
    if err != nil {
        panic(err)
    }
}
// SetName sets the name property value. The display name of the CA. Supports $filter (eq, ne, startsWith)
func (m *ExternalCertificateAuthorityCertificate) SetName(value *string)() {
    err := m.GetBackingStore().Set("name", value)
    if err != nil {
        panic(err)
    }
}
// SetOrganizationName sets the organizationName property value. The organization name (OU) field of the certificate. Supports $filter (eq, ne, startsWith)
func (m *ExternalCertificateAuthorityCertificate) SetOrganizationName(value *string)() {
    err := m.GetBackingStore().Set("organizationName", value)
    if err != nil {
        panic(err)
    }
}
// SetStatus sets the status property value. The status property
func (m *ExternalCertificateAuthorityCertificate) SetStatus(value *TlsCertificateStatus)() {
    err := m.GetBackingStore().Set("status", value)
    if err != nil {
        panic(err)
    }
}
// SetValidity sets the validity property value. The validity property
func (m *ExternalCertificateAuthorityCertificate) SetValidity(value ValidityDateable)() {
    err := m.GetBackingStore().Set("validity", value)
    if err != nil {
        panic(err)
    }
}
type ExternalCertificateAuthorityCertificateable interface {
    ie233ee762e29b4ba6970aa2a2efce4b7fde11697ca9ea81099d0f8269309c1be.Entityable
    i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.Parsable
    GetCertificate()(*string)
    GetCertificateSigningRequest()(*string)
    GetChain()(*string)
    GetCommonName()(*string)
    GetName()(*string)
    GetOrganizationName()(*string)
    GetStatus()(*TlsCertificateStatus)
    GetValidity()(ValidityDateable)
    SetCertificate(value *string)()
    SetCertificateSigningRequest(value *string)()
    SetChain(value *string)()
    SetCommonName(value *string)()
    SetName(value *string)()
    SetOrganizationName(value *string)()
    SetStatus(value *TlsCertificateStatus)()
    SetValidity(value ValidityDateable)()
}
