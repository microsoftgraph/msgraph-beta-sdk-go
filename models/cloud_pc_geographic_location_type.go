// Code generated by Microsoft Kiota - DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package models
type CloudPcGeographicLocationType int

const (
    DEFAULT_CLOUDPCGEOGRAPHICLOCATIONTYPE CloudPcGeographicLocationType = iota
    ASIA_CLOUDPCGEOGRAPHICLOCATIONTYPE
    AUSTRALASIA_CLOUDPCGEOGRAPHICLOCATIONTYPE
    CANADA_CLOUDPCGEOGRAPHICLOCATIONTYPE
    EUROPE_CLOUDPCGEOGRAPHICLOCATIONTYPE
    INDIA_CLOUDPCGEOGRAPHICLOCATIONTYPE
    AFRICA_CLOUDPCGEOGRAPHICLOCATIONTYPE
    USCENTRAL_CLOUDPCGEOGRAPHICLOCATIONTYPE
    USEAST_CLOUDPCGEOGRAPHICLOCATIONTYPE
    USWEST_CLOUDPCGEOGRAPHICLOCATIONTYPE
    SOUTHAMERICA_CLOUDPCGEOGRAPHICLOCATIONTYPE
    MIDDLEEAST_CLOUDPCGEOGRAPHICLOCATIONTYPE
    CENTRALAMERICA_CLOUDPCGEOGRAPHICLOCATIONTYPE
    USGOVERNMENT_CLOUDPCGEOGRAPHICLOCATIONTYPE
    UNKNOWNFUTUREVALUE_CLOUDPCGEOGRAPHICLOCATIONTYPE
)

func (i CloudPcGeographicLocationType) String() string {
    return []string{"default", "asia", "australasia", "canada", "europe", "india", "africa", "usCentral", "usEast", "usWest", "southAmerica", "middleEast", "centralAmerica", "usGovernment", "unknownFutureValue"}[i]
}
func ParseCloudPcGeographicLocationType(v string) (any, error) {
    result := DEFAULT_CLOUDPCGEOGRAPHICLOCATIONTYPE
    switch v {
        case "default":
            result = DEFAULT_CLOUDPCGEOGRAPHICLOCATIONTYPE
        case "asia":
            result = ASIA_CLOUDPCGEOGRAPHICLOCATIONTYPE
        case "australasia":
            result = AUSTRALASIA_CLOUDPCGEOGRAPHICLOCATIONTYPE
        case "canada":
            result = CANADA_CLOUDPCGEOGRAPHICLOCATIONTYPE
        case "europe":
            result = EUROPE_CLOUDPCGEOGRAPHICLOCATIONTYPE
        case "india":
            result = INDIA_CLOUDPCGEOGRAPHICLOCATIONTYPE
        case "africa":
            result = AFRICA_CLOUDPCGEOGRAPHICLOCATIONTYPE
        case "usCentral":
            result = USCENTRAL_CLOUDPCGEOGRAPHICLOCATIONTYPE
        case "usEast":
            result = USEAST_CLOUDPCGEOGRAPHICLOCATIONTYPE
        case "usWest":
            result = USWEST_CLOUDPCGEOGRAPHICLOCATIONTYPE
        case "southAmerica":
            result = SOUTHAMERICA_CLOUDPCGEOGRAPHICLOCATIONTYPE
        case "middleEast":
            result = MIDDLEEAST_CLOUDPCGEOGRAPHICLOCATIONTYPE
        case "centralAmerica":
            result = CENTRALAMERICA_CLOUDPCGEOGRAPHICLOCATIONTYPE
        case "usGovernment":
            result = USGOVERNMENT_CLOUDPCGEOGRAPHICLOCATIONTYPE
        case "unknownFutureValue":
            result = UNKNOWNFUTUREVALUE_CLOUDPCGEOGRAPHICLOCATIONTYPE
        default:
            return nil, nil
    }
    return &result, nil
}
func SerializeCloudPcGeographicLocationType(values []CloudPcGeographicLocationType) []string {
    result := make([]string, len(values))
    for i, v := range values {
        result[i] = v.String()
    }
    return result
}
func (i CloudPcGeographicLocationType) isMultiValue() bool {
    return false
}
