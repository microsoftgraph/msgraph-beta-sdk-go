// Code generated by Microsoft Kiota - DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package models

import (
    i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91 "github.com/microsoft/kiota-abstractions-go/serialization"
    ie8677ce2c7e1b4c22e9c3827ecd078d41185424dd9eeb92b7d971ed2d49a392e "github.com/microsoft/kiota-abstractions-go/store"
)

// WindowsQualityUpdateApprovalSetting entity to record approval settings for windows quality update policies
type WindowsQualityUpdateApprovalSetting struct {
    // Stores model information.
    backingStore ie8677ce2c7e1b4c22e9c3827ecd078d41185424dd9eeb92b7d971ed2d49a392e.BackingStore
}
// NewWindowsQualityUpdateApprovalSetting instantiates a new WindowsQualityUpdateApprovalSetting and sets the default values.
func NewWindowsQualityUpdateApprovalSetting()(*WindowsQualityUpdateApprovalSetting) {
    m := &WindowsQualityUpdateApprovalSetting{
    }
    m.backingStore = ie8677ce2c7e1b4c22e9c3827ecd078d41185424dd9eeb92b7d971ed2d49a392e.BackingStoreFactoryInstance();
    m.SetAdditionalData(make(map[string]any))
    return m
}
// CreateWindowsQualityUpdateApprovalSettingFromDiscriminatorValue creates a new instance of the appropriate class based on discriminator value
// returns a Parsable when successful
func CreateWindowsQualityUpdateApprovalSettingFromDiscriminatorValue(parseNode i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode)(i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.Parsable, error) {
    return NewWindowsQualityUpdateApprovalSetting(), nil
}
// GetAdditionalData gets the AdditionalData property value. Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
// returns a map[string]any when successful
func (m *WindowsQualityUpdateApprovalSetting) GetAdditionalData()(map[string]any) {
    val , err :=  m.backingStore.Get("additionalData")
    if err != nil {
        panic(err)
    }
    if val == nil {
        var value = make(map[string]any);
        m.SetAdditionalData(value);
    }
    return val.(map[string]any)
}
// GetApprovalMethodType gets the approvalMethodType property value. Enum type to describe the approval type for different type of quality updates.
// returns a *WindowsQualityUpdatePolicyApprovalMethodType when successful
func (m *WindowsQualityUpdateApprovalSetting) GetApprovalMethodType()(*WindowsQualityUpdatePolicyApprovalMethodType) {
    val, err := m.GetBackingStore().Get("approvalMethodType")
    if err != nil {
        panic(err)
    }
    if val != nil {
        return val.(*WindowsQualityUpdatePolicyApprovalMethodType)
    }
    return nil
}
// GetBackingStore gets the BackingStore property value. Stores model information.
// returns a BackingStore when successful
func (m *WindowsQualityUpdateApprovalSetting) GetBackingStore()(ie8677ce2c7e1b4c22e9c3827ecd078d41185424dd9eeb92b7d971ed2d49a392e.BackingStore) {
    return m.backingStore
}
// GetDeferredDeploymentInDay gets the deferredDeploymentInDay property value. The deferral days for auto approval type, not applicable for manual approve
// returns a *int32 when successful
func (m *WindowsQualityUpdateApprovalSetting) GetDeferredDeploymentInDay()(*int32) {
    val, err := m.GetBackingStore().Get("deferredDeploymentInDay")
    if err != nil {
        panic(err)
    }
    if val != nil {
        return val.(*int32)
    }
    return nil
}
// GetFieldDeserializers the deserialization information for the current model
// returns a map[string]func(i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode)(error) when successful
func (m *WindowsQualityUpdateApprovalSetting) GetFieldDeserializers()(map[string]func(i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode)(error)) {
    res := make(map[string]func(i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode)(error))
    res["approvalMethodType"] = func (n i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode) error {
        val, err := n.GetEnumValue(ParseWindowsQualityUpdatePolicyApprovalMethodType)
        if err != nil {
            return err
        }
        if val != nil {
            m.SetApprovalMethodType(val.(*WindowsQualityUpdatePolicyApprovalMethodType))
        }
        return nil
    }
    res["deferredDeploymentInDay"] = func (n i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode) error {
        val, err := n.GetInt32Value()
        if err != nil {
            return err
        }
        if val != nil {
            m.SetDeferredDeploymentInDay(val)
        }
        return nil
    }
    res["@odata.type"] = func (n i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode) error {
        val, err := n.GetStringValue()
        if err != nil {
            return err
        }
        if val != nil {
            m.SetOdataType(val)
        }
        return nil
    }
    res["windowsQualityUpdateCadence"] = func (n i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode) error {
        val, err := n.GetEnumValue(ParseWindowsQualityUpdateCadence)
        if err != nil {
            return err
        }
        if val != nil {
            m.SetWindowsQualityUpdateCadence(val.(*WindowsQualityUpdateCadence))
        }
        return nil
    }
    res["windowsQualityUpdateCategory"] = func (n i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode) error {
        val, err := n.GetEnumValue(ParseWindowsQualityUpdateCategory)
        if err != nil {
            return err
        }
        if val != nil {
            m.SetWindowsQualityUpdateCategory(val.(*WindowsQualityUpdateCategory))
        }
        return nil
    }
    return res
}
// GetOdataType gets the @odata.type property value. The OdataType property
// returns a *string when successful
func (m *WindowsQualityUpdateApprovalSetting) GetOdataType()(*string) {
    val, err := m.GetBackingStore().Get("odataType")
    if err != nil {
        panic(err)
    }
    if val != nil {
        return val.(*string)
    }
    return nil
}
// GetWindowsQualityUpdateCadence gets the windowsQualityUpdateCadence property value. The publishing cadence of the quality update. Possible values are: monthly, outOfBand. This property cannot be modified and is automatically populated when the catalog is created.
// returns a *WindowsQualityUpdateCadence when successful
func (m *WindowsQualityUpdateApprovalSetting) GetWindowsQualityUpdateCadence()(*WindowsQualityUpdateCadence) {
    val, err := m.GetBackingStore().Get("windowsQualityUpdateCadence")
    if err != nil {
        panic(err)
    }
    if val != nil {
        return val.(*WindowsQualityUpdateCadence)
    }
    return nil
}
// GetWindowsQualityUpdateCategory gets the windowsQualityUpdateCategory property value. Windows quality update category
// returns a *WindowsQualityUpdateCategory when successful
func (m *WindowsQualityUpdateApprovalSetting) GetWindowsQualityUpdateCategory()(*WindowsQualityUpdateCategory) {
    val, err := m.GetBackingStore().Get("windowsQualityUpdateCategory")
    if err != nil {
        panic(err)
    }
    if val != nil {
        return val.(*WindowsQualityUpdateCategory)
    }
    return nil
}
// Serialize serializes information the current object
func (m *WindowsQualityUpdateApprovalSetting) Serialize(writer i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.SerializationWriter)(error) {
    if m.GetApprovalMethodType() != nil {
        cast := (*m.GetApprovalMethodType()).String()
        err := writer.WriteStringValue("approvalMethodType", &cast)
        if err != nil {
            return err
        }
    }
    {
        err := writer.WriteInt32Value("deferredDeploymentInDay", m.GetDeferredDeploymentInDay())
        if err != nil {
            return err
        }
    }
    {
        err := writer.WriteStringValue("@odata.type", m.GetOdataType())
        if err != nil {
            return err
        }
    }
    if m.GetWindowsQualityUpdateCadence() != nil {
        cast := (*m.GetWindowsQualityUpdateCadence()).String()
        err := writer.WriteStringValue("windowsQualityUpdateCadence", &cast)
        if err != nil {
            return err
        }
    }
    if m.GetWindowsQualityUpdateCategory() != nil {
        cast := (*m.GetWindowsQualityUpdateCategory()).String()
        err := writer.WriteStringValue("windowsQualityUpdateCategory", &cast)
        if err != nil {
            return err
        }
    }
    {
        err := writer.WriteAdditionalData(m.GetAdditionalData())
        if err != nil {
            return err
        }
    }
    return nil
}
// SetAdditionalData sets the AdditionalData property value. Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
func (m *WindowsQualityUpdateApprovalSetting) SetAdditionalData(value map[string]any)() {
    err := m.GetBackingStore().Set("additionalData", value)
    if err != nil {
        panic(err)
    }
}
// SetApprovalMethodType sets the approvalMethodType property value. Enum type to describe the approval type for different type of quality updates.
func (m *WindowsQualityUpdateApprovalSetting) SetApprovalMethodType(value *WindowsQualityUpdatePolicyApprovalMethodType)() {
    err := m.GetBackingStore().Set("approvalMethodType", value)
    if err != nil {
        panic(err)
    }
}
// SetBackingStore sets the BackingStore property value. Stores model information.
func (m *WindowsQualityUpdateApprovalSetting) SetBackingStore(value ie8677ce2c7e1b4c22e9c3827ecd078d41185424dd9eeb92b7d971ed2d49a392e.BackingStore)() {
    m.backingStore = value
}
// SetDeferredDeploymentInDay sets the deferredDeploymentInDay property value. The deferral days for auto approval type, not applicable for manual approve
func (m *WindowsQualityUpdateApprovalSetting) SetDeferredDeploymentInDay(value *int32)() {
    err := m.GetBackingStore().Set("deferredDeploymentInDay", value)
    if err != nil {
        panic(err)
    }
}
// SetOdataType sets the @odata.type property value. The OdataType property
func (m *WindowsQualityUpdateApprovalSetting) SetOdataType(value *string)() {
    err := m.GetBackingStore().Set("odataType", value)
    if err != nil {
        panic(err)
    }
}
// SetWindowsQualityUpdateCadence sets the windowsQualityUpdateCadence property value. The publishing cadence of the quality update. Possible values are: monthly, outOfBand. This property cannot be modified and is automatically populated when the catalog is created.
func (m *WindowsQualityUpdateApprovalSetting) SetWindowsQualityUpdateCadence(value *WindowsQualityUpdateCadence)() {
    err := m.GetBackingStore().Set("windowsQualityUpdateCadence", value)
    if err != nil {
        panic(err)
    }
}
// SetWindowsQualityUpdateCategory sets the windowsQualityUpdateCategory property value. Windows quality update category
func (m *WindowsQualityUpdateApprovalSetting) SetWindowsQualityUpdateCategory(value *WindowsQualityUpdateCategory)() {
    err := m.GetBackingStore().Set("windowsQualityUpdateCategory", value)
    if err != nil {
        panic(err)
    }
}
type WindowsQualityUpdateApprovalSettingable interface {
    i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.AdditionalDataHolder
    ie8677ce2c7e1b4c22e9c3827ecd078d41185424dd9eeb92b7d971ed2d49a392e.BackedModel
    i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.Parsable
    GetApprovalMethodType()(*WindowsQualityUpdatePolicyApprovalMethodType)
    GetBackingStore()(ie8677ce2c7e1b4c22e9c3827ecd078d41185424dd9eeb92b7d971ed2d49a392e.BackingStore)
    GetDeferredDeploymentInDay()(*int32)
    GetOdataType()(*string)
    GetWindowsQualityUpdateCadence()(*WindowsQualityUpdateCadence)
    GetWindowsQualityUpdateCategory()(*WindowsQualityUpdateCategory)
    SetApprovalMethodType(value *WindowsQualityUpdatePolicyApprovalMethodType)()
    SetBackingStore(value ie8677ce2c7e1b4c22e9c3827ecd078d41185424dd9eeb92b7d971ed2d49a392e.BackingStore)()
    SetDeferredDeploymentInDay(value *int32)()
    SetOdataType(value *string)()
    SetWindowsQualityUpdateCadence(value *WindowsQualityUpdateCadence)()
    SetWindowsQualityUpdateCategory(value *WindowsQualityUpdateCategory)()
}
