// Code generated by Microsoft Kiota - DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package teamsadministration
type AccountType int

const (
    USER_ACCOUNTTYPE AccountType = iota
    RESOURCEACCOUNT_ACCOUNTTYPE
    GUEST_ACCOUNTTYPE
    SFBONPREMUSER_ACCOUNTTYPE
    UNKNOWN_ACCOUNTTYPE
    UNKNOWNFUTUREVALUE_ACCOUNTTYPE
    INELIGIBLEUSER_ACCOUNTTYPE
)

func (i AccountType) String() string {
    return []string{"user", "resourceAccount", "guest", "sfbOnPremUser", "unknown", "unknownFutureValue", "ineligibleUser"}[i]
}
func ParseAccountType(v string) (any, error) {
    result := USER_ACCOUNTTYPE
    switch v {
        case "user":
            result = USER_ACCOUNTTYPE
        case "resourceAccount":
            result = RESOURCEACCOUNT_ACCOUNTTYPE
        case "guest":
            result = GUEST_ACCOUNTTYPE
        case "sfbOnPremUser":
            result = SFBONPREMUSER_ACCOUNTTYPE
        case "unknown":
            result = UNKNOWN_ACCOUNTTYPE
        case "unknownFutureValue":
            result = UNKNOWNFUTUREVALUE_ACCOUNTTYPE
        case "ineligibleUser":
            result = INELIGIBLEUSER_ACCOUNTTYPE
        default:
            return nil, nil
    }
    return &result, nil
}
func SerializeAccountType(values []AccountType) []string {
    result := make([]string, len(values))
    for i, v := range values {
        result[i] = v.String()
    }
    return result
}
func (i AccountType) isMultiValue() bool {
    return false
}
