// Code generated by Microsoft Kiota - DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package teamsadministration

import (
    i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91 "github.com/microsoft/kiota-abstractions-go/serialization"
    ie233ee762e29b4ba6970aa2a2efce4b7fde11697ca9ea81099d0f8269309c1be "github.com/microsoftgraph/msgraph-beta-sdk-go/models"
)

type TeamsAdminRoot struct {
    ie233ee762e29b4ba6970aa2a2efce4b7fde11697ca9ea81099d0f8269309c1be.Entity
}
// NewTeamsAdminRoot instantiates a new TeamsAdminRoot and sets the default values.
func NewTeamsAdminRoot()(*TeamsAdminRoot) {
    m := &TeamsAdminRoot{
        Entity: *ie233ee762e29b4ba6970aa2a2efce4b7fde11697ca9ea81099d0f8269309c1be.NewEntity(),
    }
    return m
}
// CreateTeamsAdminRootFromDiscriminatorValue creates a new instance of the appropriate class based on discriminator value
// returns a Parsable when successful
func CreateTeamsAdminRootFromDiscriminatorValue(parseNode i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode)(i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.Parsable, error) {
    return NewTeamsAdminRoot(), nil
}
// GetFieldDeserializers the deserialization information for the current model
// returns a map[string]func(i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode)(error) when successful
func (m *TeamsAdminRoot) GetFieldDeserializers()(map[string]func(i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode)(error)) {
    res := m.Entity.GetFieldDeserializers()
    res["policy"] = func (n i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode) error {
        val, err := n.GetObjectValue(CreateTeamsPolicyAssignmentFromDiscriminatorValue)
        if err != nil {
            return err
        }
        if val != nil {
            m.SetPolicy(val.(TeamsPolicyAssignmentable))
        }
        return nil
    }
    res["userConfigurations"] = func (n i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode) error {
        val, err := n.GetCollectionOfObjectValues(CreateTeamsUserConfigurationFromDiscriminatorValue)
        if err != nil {
            return err
        }
        if val != nil {
            res := make([]TeamsUserConfigurationable, len(val))
            for i, v := range val {
                if v != nil {
                    res[i] = v.(TeamsUserConfigurationable)
                }
            }
            m.SetUserConfigurations(res)
        }
        return nil
    }
    return res
}
// GetPolicy gets the policy property value. Represents a navigation property to the Teams policy assignment object.
// returns a TeamsPolicyAssignmentable when successful
func (m *TeamsAdminRoot) GetPolicy()(TeamsPolicyAssignmentable) {
    val, err := m.GetBackingStore().Get("policy")
    if err != nil {
        panic(err)
    }
    if val != nil {
        return val.(TeamsPolicyAssignmentable)
    }
    return nil
}
// GetUserConfigurations gets the userConfigurations property value. Represents the configuration information of users who have accounts hosted on Microsoft Teams.
// returns a []TeamsUserConfigurationable when successful
func (m *TeamsAdminRoot) GetUserConfigurations()([]TeamsUserConfigurationable) {
    val, err := m.GetBackingStore().Get("userConfigurations")
    if err != nil {
        panic(err)
    }
    if val != nil {
        return val.([]TeamsUserConfigurationable)
    }
    return nil
}
// Serialize serializes information the current object
func (m *TeamsAdminRoot) Serialize(writer i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.SerializationWriter)(error) {
    err := m.Entity.Serialize(writer)
    if err != nil {
        return err
    }
    {
        err = writer.WriteObjectValue("policy", m.GetPolicy())
        if err != nil {
            return err
        }
    }
    if m.GetUserConfigurations() != nil {
        cast := make([]i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.Parsable, len(m.GetUserConfigurations()))
        for i, v := range m.GetUserConfigurations() {
            if v != nil {
                cast[i] = v.(i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.Parsable)
            }
        }
        err = writer.WriteCollectionOfObjectValues("userConfigurations", cast)
        if err != nil {
            return err
        }
    }
    return nil
}
// SetPolicy sets the policy property value. Represents a navigation property to the Teams policy assignment object.
func (m *TeamsAdminRoot) SetPolicy(value TeamsPolicyAssignmentable)() {
    err := m.GetBackingStore().Set("policy", value)
    if err != nil {
        panic(err)
    }
}
// SetUserConfigurations sets the userConfigurations property value. Represents the configuration information of users who have accounts hosted on Microsoft Teams.
func (m *TeamsAdminRoot) SetUserConfigurations(value []TeamsUserConfigurationable)() {
    err := m.GetBackingStore().Set("userConfigurations", value)
    if err != nil {
        panic(err)
    }
}
type TeamsAdminRootable interface {
    ie233ee762e29b4ba6970aa2a2efce4b7fde11697ca9ea81099d0f8269309c1be.Entityable
    i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.Parsable
    GetPolicy()(TeamsPolicyAssignmentable)
    GetUserConfigurations()([]TeamsUserConfigurationable)
    SetPolicy(value TeamsPolicyAssignmentable)()
    SetUserConfigurations(value []TeamsUserConfigurationable)()
}
