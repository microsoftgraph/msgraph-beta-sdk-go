// Code generated by Microsoft Kiota - DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package models

import (
    i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91 "github.com/microsoft/kiota-abstractions-go/serialization"
)

type Workspace struct {
    Place
}
// NewWorkspace instantiates a new Workspace and sets the default values.
func NewWorkspace()(*Workspace) {
    m := &Workspace{
        Place: *NewPlace(),
    }
    odataTypeValue := "#microsoft.graph.workspace"
    m.SetOdataType(&odataTypeValue)
    return m
}
// CreateWorkspaceFromDiscriminatorValue creates a new instance of the appropriate class based on discriminator value
// returns a Parsable when successful
func CreateWorkspaceFromDiscriminatorValue(parseNode i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode)(i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.Parsable, error) {
    return NewWorkspace(), nil
}
// GetBuilding gets the building property value. The name or identifier of the building where the workspace is located.
// returns a *string when successful
func (m *Workspace) GetBuilding()(*string) {
    val, err := m.GetBackingStore().Get("building")
    if err != nil {
        panic(err)
    }
    if val != nil {
        return val.(*string)
    }
    return nil
}
// GetCapacity gets the capacity property value. The maximum number of individual desks within a workspace.
// returns a *int32 when successful
func (m *Workspace) GetCapacity()(*int32) {
    val, err := m.GetBackingStore().Get("capacity")
    if err != nil {
        panic(err)
    }
    if val != nil {
        return val.(*int32)
    }
    return nil
}
// GetDisplayDeviceName gets the displayDeviceName property value. The name of the display device (for example, monitor or projector) that is available in the workspace.
// returns a *string when successful
func (m *Workspace) GetDisplayDeviceName()(*string) {
    val, err := m.GetBackingStore().Get("displayDeviceName")
    if err != nil {
        panic(err)
    }
    if val != nil {
        return val.(*string)
    }
    return nil
}
// GetEmailAddress gets the emailAddress property value. The email address that is associated with the workspace. This email address is used for booking.
// returns a *string when successful
func (m *Workspace) GetEmailAddress()(*string) {
    val, err := m.GetBackingStore().Get("emailAddress")
    if err != nil {
        panic(err)
    }
    if val != nil {
        return val.(*string)
    }
    return nil
}
// GetFieldDeserializers the deserialization information for the current model
// returns a map[string]func(i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode)(error) when successful
func (m *Workspace) GetFieldDeserializers()(map[string]func(i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode)(error)) {
    res := m.Place.GetFieldDeserializers()
    res["building"] = func (n i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode) error {
        val, err := n.GetStringValue()
        if err != nil {
            return err
        }
        if val != nil {
            m.SetBuilding(val)
        }
        return nil
    }
    res["capacity"] = func (n i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode) error {
        val, err := n.GetInt32Value()
        if err != nil {
            return err
        }
        if val != nil {
            m.SetCapacity(val)
        }
        return nil
    }
    res["displayDeviceName"] = func (n i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode) error {
        val, err := n.GetStringValue()
        if err != nil {
            return err
        }
        if val != nil {
            m.SetDisplayDeviceName(val)
        }
        return nil
    }
    res["emailAddress"] = func (n i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode) error {
        val, err := n.GetStringValue()
        if err != nil {
            return err
        }
        if val != nil {
            m.SetEmailAddress(val)
        }
        return nil
    }
    res["floorLabel"] = func (n i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode) error {
        val, err := n.GetStringValue()
        if err != nil {
            return err
        }
        if val != nil {
            m.SetFloorLabel(val)
        }
        return nil
    }
    res["floorNumber"] = func (n i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode) error {
        val, err := n.GetInt32Value()
        if err != nil {
            return err
        }
        if val != nil {
            m.SetFloorNumber(val)
        }
        return nil
    }
    res["mode"] = func (n i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode) error {
        val, err := n.GetObjectValue(CreatePlaceModeFromDiscriminatorValue)
        if err != nil {
            return err
        }
        if val != nil {
            m.SetMode(val.(PlaceModeable))
        }
        return nil
    }
    res["nickname"] = func (n i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode) error {
        val, err := n.GetStringValue()
        if err != nil {
            return err
        }
        if val != nil {
            m.SetNickname(val)
        }
        return nil
    }
    return res
}
// GetFloorLabel gets the floorLabel property value. A human-readable label for the floor; for example, Ground Floor.
// returns a *string when successful
func (m *Workspace) GetFloorLabel()(*string) {
    val, err := m.GetBackingStore().Get("floorLabel")
    if err != nil {
        panic(err)
    }
    if val != nil {
        return val.(*string)
    }
    return nil
}
// GetFloorNumber gets the floorNumber property value. The numeric floor level within the building. For example, 1 for first floor, 2 for second floor, and so on.
// returns a *int32 when successful
func (m *Workspace) GetFloorNumber()(*int32) {
    val, err := m.GetBackingStore().Get("floorNumber")
    if err != nil {
        panic(err)
    }
    if val != nil {
        return val.(*int32)
    }
    return nil
}
// GetMode gets the mode property value. The mode for a workspace. The supported modes are:reservablePlaceMode - Workspaces that can be booked in advance using desk pool reservation tools.dropInPlaceMode - First come, first served desks. When you plug into a peripheral on one of these desks in the workspace, the desk is booked for you, assuming that the peripheral has been associated with the desk in the Microsoft Teams Rooms Pro management portal.offlinePlaceMode - Workspaces that are taken down for maintenance or marked as not reservable.
// returns a PlaceModeable when successful
func (m *Workspace) GetMode()(PlaceModeable) {
    val, err := m.GetBackingStore().Get("mode")
    if err != nil {
        panic(err)
    }
    if val != nil {
        return val.(PlaceModeable)
    }
    return nil
}
// GetNickname gets the nickname property value. A short, friendly name for the workspace, often used for easier identification or display in the UI.
// returns a *string when successful
func (m *Workspace) GetNickname()(*string) {
    val, err := m.GetBackingStore().Get("nickname")
    if err != nil {
        panic(err)
    }
    if val != nil {
        return val.(*string)
    }
    return nil
}
// Serialize serializes information the current object
func (m *Workspace) Serialize(writer i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.SerializationWriter)(error) {
    err := m.Place.Serialize(writer)
    if err != nil {
        return err
    }
    {
        err = writer.WriteStringValue("building", m.GetBuilding())
        if err != nil {
            return err
        }
    }
    {
        err = writer.WriteInt32Value("capacity", m.GetCapacity())
        if err != nil {
            return err
        }
    }
    {
        err = writer.WriteStringValue("displayDeviceName", m.GetDisplayDeviceName())
        if err != nil {
            return err
        }
    }
    {
        err = writer.WriteStringValue("emailAddress", m.GetEmailAddress())
        if err != nil {
            return err
        }
    }
    {
        err = writer.WriteStringValue("floorLabel", m.GetFloorLabel())
        if err != nil {
            return err
        }
    }
    {
        err = writer.WriteInt32Value("floorNumber", m.GetFloorNumber())
        if err != nil {
            return err
        }
    }
    {
        err = writer.WriteObjectValue("mode", m.GetMode())
        if err != nil {
            return err
        }
    }
    {
        err = writer.WriteStringValue("nickname", m.GetNickname())
        if err != nil {
            return err
        }
    }
    return nil
}
// SetBuilding sets the building property value. The name or identifier of the building where the workspace is located.
func (m *Workspace) SetBuilding(value *string)() {
    err := m.GetBackingStore().Set("building", value)
    if err != nil {
        panic(err)
    }
}
// SetCapacity sets the capacity property value. The maximum number of individual desks within a workspace.
func (m *Workspace) SetCapacity(value *int32)() {
    err := m.GetBackingStore().Set("capacity", value)
    if err != nil {
        panic(err)
    }
}
// SetDisplayDeviceName sets the displayDeviceName property value. The name of the display device (for example, monitor or projector) that is available in the workspace.
func (m *Workspace) SetDisplayDeviceName(value *string)() {
    err := m.GetBackingStore().Set("displayDeviceName", value)
    if err != nil {
        panic(err)
    }
}
// SetEmailAddress sets the emailAddress property value. The email address that is associated with the workspace. This email address is used for booking.
func (m *Workspace) SetEmailAddress(value *string)() {
    err := m.GetBackingStore().Set("emailAddress", value)
    if err != nil {
        panic(err)
    }
}
// SetFloorLabel sets the floorLabel property value. A human-readable label for the floor; for example, Ground Floor.
func (m *Workspace) SetFloorLabel(value *string)() {
    err := m.GetBackingStore().Set("floorLabel", value)
    if err != nil {
        panic(err)
    }
}
// SetFloorNumber sets the floorNumber property value. The numeric floor level within the building. For example, 1 for first floor, 2 for second floor, and so on.
func (m *Workspace) SetFloorNumber(value *int32)() {
    err := m.GetBackingStore().Set("floorNumber", value)
    if err != nil {
        panic(err)
    }
}
// SetMode sets the mode property value. The mode for a workspace. The supported modes are:reservablePlaceMode - Workspaces that can be booked in advance using desk pool reservation tools.dropInPlaceMode - First come, first served desks. When you plug into a peripheral on one of these desks in the workspace, the desk is booked for you, assuming that the peripheral has been associated with the desk in the Microsoft Teams Rooms Pro management portal.offlinePlaceMode - Workspaces that are taken down for maintenance or marked as not reservable.
func (m *Workspace) SetMode(value PlaceModeable)() {
    err := m.GetBackingStore().Set("mode", value)
    if err != nil {
        panic(err)
    }
}
// SetNickname sets the nickname property value. A short, friendly name for the workspace, often used for easier identification or display in the UI.
func (m *Workspace) SetNickname(value *string)() {
    err := m.GetBackingStore().Set("nickname", value)
    if err != nil {
        panic(err)
    }
}
type Workspaceable interface {
    i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.Parsable
    Placeable
    GetBuilding()(*string)
    GetCapacity()(*int32)
    GetDisplayDeviceName()(*string)
    GetEmailAddress()(*string)
    GetFloorLabel()(*string)
    GetFloorNumber()(*int32)
    GetMode()(PlaceModeable)
    GetNickname()(*string)
    SetBuilding(value *string)()
    SetCapacity(value *int32)()
    SetDisplayDeviceName(value *string)()
    SetEmailAddress(value *string)()
    SetFloorLabel(value *string)()
    SetFloorNumber(value *int32)()
    SetMode(value PlaceModeable)()
    SetNickname(value *string)()
}
