// Code generated by Microsoft Kiota - DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package models

import (
    i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91 "github.com/microsoft/kiota-abstractions-go/serialization"
)

type CloudPcPolicyScheduledApplyActionDetail struct {
    Entity
}
// NewCloudPcPolicyScheduledApplyActionDetail instantiates a new CloudPcPolicyScheduledApplyActionDetail and sets the default values.
func NewCloudPcPolicyScheduledApplyActionDetail()(*CloudPcPolicyScheduledApplyActionDetail) {
    m := &CloudPcPolicyScheduledApplyActionDetail{
        Entity: *NewEntity(),
    }
    return m
}
// CreateCloudPcPolicyScheduledApplyActionDetailFromDiscriminatorValue creates a new instance of the appropriate class based on discriminator value
// returns a Parsable when successful
func CreateCloudPcPolicyScheduledApplyActionDetailFromDiscriminatorValue(parseNode i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode)(i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.Parsable, error) {
    return NewCloudPcPolicyScheduledApplyActionDetail(), nil
}
// GetCronScheduleExpression gets the cronScheduleExpression property value. An expression that specifies the cron schedule. (For example, '0 0 0 20  ' means schedules a job to run at midnight on the 20th of every month) Administrators can set a cron expression to define the scheduling rules for automatic regular application. When auto provision is disabled, cronScheduleExpression is set to null, stopping the automatic task scheduling. Read-Only.
// returns a *string when successful
func (m *CloudPcPolicyScheduledApplyActionDetail) GetCronScheduleExpression()(*string) {
    val, err := m.GetBackingStore().Get("cronScheduleExpression")
    if err != nil {
        panic(err)
    }
    if val != nil {
        return val.(*string)
    }
    return nil
}
// GetEndDateTime gets the endDateTime property value. Indicates IT Admins can set an end date to define the last scheduler run before this time. If not set, the scheduler runs continuously. There is no time zone information at this time; it needs to be coordinated with timezone, for example, '2025-02-01 00:00:00' with 'China Standard Time' means the scheduling rule takes effect before Feb 01 2025 00:00:00 GMT+0800 (China Standard Time).
// returns a *string when successful
func (m *CloudPcPolicyScheduledApplyActionDetail) GetEndDateTime()(*string) {
    val, err := m.GetBackingStore().Get("endDateTime")
    if err != nil {
        panic(err)
    }
    if val != nil {
        return val.(*string)
    }
    return nil
}
// GetFieldDeserializers the deserialization information for the current model
// returns a map[string]func(i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode)(error) when successful
func (m *CloudPcPolicyScheduledApplyActionDetail) GetFieldDeserializers()(map[string]func(i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode)(error)) {
    res := m.Entity.GetFieldDeserializers()
    res["cronScheduleExpression"] = func (n i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode) error {
        val, err := n.GetStringValue()
        if err != nil {
            return err
        }
        if val != nil {
            m.SetCronScheduleExpression(val)
        }
        return nil
    }
    res["endDateTime"] = func (n i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode) error {
        val, err := n.GetStringValue()
        if err != nil {
            return err
        }
        if val != nil {
            m.SetEndDateTime(val)
        }
        return nil
    }
    res["nextRunDateTime"] = func (n i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode) error {
        val, err := n.GetStringValue()
        if err != nil {
            return err
        }
        if val != nil {
            m.SetNextRunDateTime(val)
        }
        return nil
    }
    res["reservePercentage"] = func (n i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode) error {
        val, err := n.GetInt32Value()
        if err != nil {
            return err
        }
        if val != nil {
            m.SetReservePercentage(val)
        }
        return nil
    }
    res["startDateTime"] = func (n i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode) error {
        val, err := n.GetStringValue()
        if err != nil {
            return err
        }
        if val != nil {
            m.SetStartDateTime(val)
        }
        return nil
    }
    res["timezone"] = func (n i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode) error {
        val, err := n.GetEnumValue(ParseCloudPcPolicyTimezone)
        if err != nil {
            return err
        }
        if val != nil {
            m.SetTimezone(val.(*CloudPcPolicyTimezone))
        }
        return nil
    }
    return res
}
// GetNextRunDateTime gets the nextRunDateTime property value. Indicates IT Admins can see when the next automatic regular apply is executed. It needs to be coordinated with timezone, for example, '2025-01-01 00:00:00' with 'China Standard Time' means the next task executes at Jan 01 2025 00:00:00 GMT+0800 (China Standard Time). Read-Only.
// returns a *string when successful
func (m *CloudPcPolicyScheduledApplyActionDetail) GetNextRunDateTime()(*string) {
    val, err := m.GetBackingStore().Get("nextRunDateTime")
    if err != nil {
        panic(err)
    }
    if val != nil {
        return val.(*string)
    }
    return nil
}
// GetReservePercentage gets the reservePercentage property value. The percentage of Cloud PCs to keep available. Administrators can set this property to a value from 0 to 99. Cloud PCs are reprovisioned only when there are no active and connected Cloud PC users. Frontline shared only.
// returns a *int32 when successful
func (m *CloudPcPolicyScheduledApplyActionDetail) GetReservePercentage()(*int32) {
    val, err := m.GetBackingStore().Get("reservePercentage")
    if err != nil {
        panic(err)
    }
    if val != nil {
        return val.(*int32)
    }
    return nil
}
// GetStartDateTime gets the startDateTime property value. Indicates IT Admins can set a start date to define the first scheduler run after this time. If not set, the default is the current time. There is no time zone information at this time, it needs to be coordinated with timezone, for example, '2025-01-01 00:00:00' with 'China Standard Time' means the scheduling rule takes effect after Jan 01 2025 00:00:00 GMT+0800 (China Standard Time).
// returns a *string when successful
func (m *CloudPcPolicyScheduledApplyActionDetail) GetStartDateTime()(*string) {
    val, err := m.GetBackingStore().Get("startDateTime")
    if err != nil {
        panic(err)
    }
    if val != nil {
        return val.(*string)
    }
    return nil
}
// GetTimezone gets the timezone property value. The timezone property
// returns a *CloudPcPolicyTimezone when successful
func (m *CloudPcPolicyScheduledApplyActionDetail) GetTimezone()(*CloudPcPolicyTimezone) {
    val, err := m.GetBackingStore().Get("timezone")
    if err != nil {
        panic(err)
    }
    if val != nil {
        return val.(*CloudPcPolicyTimezone)
    }
    return nil
}
// Serialize serializes information the current object
func (m *CloudPcPolicyScheduledApplyActionDetail) Serialize(writer i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.SerializationWriter)(error) {
    err := m.Entity.Serialize(writer)
    if err != nil {
        return err
    }
    {
        err = writer.WriteStringValue("cronScheduleExpression", m.GetCronScheduleExpression())
        if err != nil {
            return err
        }
    }
    {
        err = writer.WriteStringValue("endDateTime", m.GetEndDateTime())
        if err != nil {
            return err
        }
    }
    {
        err = writer.WriteStringValue("nextRunDateTime", m.GetNextRunDateTime())
        if err != nil {
            return err
        }
    }
    {
        err = writer.WriteInt32Value("reservePercentage", m.GetReservePercentage())
        if err != nil {
            return err
        }
    }
    {
        err = writer.WriteStringValue("startDateTime", m.GetStartDateTime())
        if err != nil {
            return err
        }
    }
    if m.GetTimezone() != nil {
        cast := (*m.GetTimezone()).String()
        err = writer.WriteStringValue("timezone", &cast)
        if err != nil {
            return err
        }
    }
    return nil
}
// SetCronScheduleExpression sets the cronScheduleExpression property value. An expression that specifies the cron schedule. (For example, '0 0 0 20  ' means schedules a job to run at midnight on the 20th of every month) Administrators can set a cron expression to define the scheduling rules for automatic regular application. When auto provision is disabled, cronScheduleExpression is set to null, stopping the automatic task scheduling. Read-Only.
func (m *CloudPcPolicyScheduledApplyActionDetail) SetCronScheduleExpression(value *string)() {
    err := m.GetBackingStore().Set("cronScheduleExpression", value)
    if err != nil {
        panic(err)
    }
}
// SetEndDateTime sets the endDateTime property value. Indicates IT Admins can set an end date to define the last scheduler run before this time. If not set, the scheduler runs continuously. There is no time zone information at this time; it needs to be coordinated with timezone, for example, '2025-02-01 00:00:00' with 'China Standard Time' means the scheduling rule takes effect before Feb 01 2025 00:00:00 GMT+0800 (China Standard Time).
func (m *CloudPcPolicyScheduledApplyActionDetail) SetEndDateTime(value *string)() {
    err := m.GetBackingStore().Set("endDateTime", value)
    if err != nil {
        panic(err)
    }
}
// SetNextRunDateTime sets the nextRunDateTime property value. Indicates IT Admins can see when the next automatic regular apply is executed. It needs to be coordinated with timezone, for example, '2025-01-01 00:00:00' with 'China Standard Time' means the next task executes at Jan 01 2025 00:00:00 GMT+0800 (China Standard Time). Read-Only.
func (m *CloudPcPolicyScheduledApplyActionDetail) SetNextRunDateTime(value *string)() {
    err := m.GetBackingStore().Set("nextRunDateTime", value)
    if err != nil {
        panic(err)
    }
}
// SetReservePercentage sets the reservePercentage property value. The percentage of Cloud PCs to keep available. Administrators can set this property to a value from 0 to 99. Cloud PCs are reprovisioned only when there are no active and connected Cloud PC users. Frontline shared only.
func (m *CloudPcPolicyScheduledApplyActionDetail) SetReservePercentage(value *int32)() {
    err := m.GetBackingStore().Set("reservePercentage", value)
    if err != nil {
        panic(err)
    }
}
// SetStartDateTime sets the startDateTime property value. Indicates IT Admins can set a start date to define the first scheduler run after this time. If not set, the default is the current time. There is no time zone information at this time, it needs to be coordinated with timezone, for example, '2025-01-01 00:00:00' with 'China Standard Time' means the scheduling rule takes effect after Jan 01 2025 00:00:00 GMT+0800 (China Standard Time).
func (m *CloudPcPolicyScheduledApplyActionDetail) SetStartDateTime(value *string)() {
    err := m.GetBackingStore().Set("startDateTime", value)
    if err != nil {
        panic(err)
    }
}
// SetTimezone sets the timezone property value. The timezone property
func (m *CloudPcPolicyScheduledApplyActionDetail) SetTimezone(value *CloudPcPolicyTimezone)() {
    err := m.GetBackingStore().Set("timezone", value)
    if err != nil {
        panic(err)
    }
}
type CloudPcPolicyScheduledApplyActionDetailable interface {
    Entityable
    i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.Parsable
    GetCronScheduleExpression()(*string)
    GetEndDateTime()(*string)
    GetNextRunDateTime()(*string)
    GetReservePercentage()(*int32)
    GetStartDateTime()(*string)
    GetTimezone()(*CloudPcPolicyTimezone)
    SetCronScheduleExpression(value *string)()
    SetEndDateTime(value *string)()
    SetNextRunDateTime(value *string)()
    SetReservePercentage(value *int32)()
    SetStartDateTime(value *string)()
    SetTimezone(value *CloudPcPolicyTimezone)()
}
