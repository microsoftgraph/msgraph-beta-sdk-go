// Code generated by Microsoft Kiota - DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package models

import (
    i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91 "github.com/microsoft/kiota-abstractions-go/serialization"
)

type WorkbookCommentReply struct {
    Entity
}
// NewWorkbookCommentReply instantiates a new WorkbookCommentReply and sets the default values.
func NewWorkbookCommentReply()(*WorkbookCommentReply) {
    m := &WorkbookCommentReply{
        Entity: *NewEntity(),
    }
    return m
}
// CreateWorkbookCommentReplyFromDiscriminatorValue creates a new instance of the appropriate class based on discriminator value
// returns a Parsable when successful
func CreateWorkbookCommentReplyFromDiscriminatorValue(parseNode i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode)(i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.Parsable, error) {
    return NewWorkbookCommentReply(), nil
}
// GetContent gets the content property value. The content of the reply that is the displayed to end-users.
// returns a *string when successful
func (m *WorkbookCommentReply) GetContent()(*string) {
    val, err := m.GetBackingStore().Get("content")
    if err != nil {
        panic(err)
    }
    if val != nil {
        return val.(*string)
    }
    return nil
}
// GetContentType gets the contentType property value. The content type for the reply. Supported values are: plain, mention.
// returns a *string when successful
func (m *WorkbookCommentReply) GetContentType()(*string) {
    val, err := m.GetBackingStore().Get("contentType")
    if err != nil {
        panic(err)
    }
    if val != nil {
        return val.(*string)
    }
    return nil
}
// GetFieldDeserializers the deserialization information for the current model
// returns a map[string]func(i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode)(error) when successful
func (m *WorkbookCommentReply) GetFieldDeserializers()(map[string]func(i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode)(error)) {
    res := m.Entity.GetFieldDeserializers()
    res["content"] = func (n i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode) error {
        val, err := n.GetStringValue()
        if err != nil {
            return err
        }
        if val != nil {
            m.SetContent(val)
        }
        return nil
    }
    res["contentType"] = func (n i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode) error {
        val, err := n.GetStringValue()
        if err != nil {
            return err
        }
        if val != nil {
            m.SetContentType(val)
        }
        return nil
    }
    res["mentions"] = func (n i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode) error {
        val, err := n.GetCollectionOfObjectValues(CreateWorkbookCommentMentionFromDiscriminatorValue)
        if err != nil {
            return err
        }
        if val != nil {
            res := make([]WorkbookCommentMentionable, len(val))
            for i, v := range val {
                if v != nil {
                    res[i] = v.(WorkbookCommentMentionable)
                }
            }
            m.SetMentions(res)
        }
        return nil
    }
    res["richContent"] = func (n i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode) error {
        val, err := n.GetStringValue()
        if err != nil {
            return err
        }
        if val != nil {
            m.SetRichContent(val)
        }
        return nil
    }
    res["task"] = func (n i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode) error {
        val, err := n.GetObjectValue(CreateWorkbookDocumentTaskFromDiscriminatorValue)
        if err != nil {
            return err
        }
        if val != nil {
            m.SetTask(val.(WorkbookDocumentTaskable))
        }
        return nil
    }
    return res
}
// GetMentions gets the mentions property value. A collection that contains all the people mentioned within the reply. When contentType is plain, this property is an empty array. Read-only.
// returns a []WorkbookCommentMentionable when successful
func (m *WorkbookCommentReply) GetMentions()([]WorkbookCommentMentionable) {
    val, err := m.GetBackingStore().Get("mentions")
    if err != nil {
        panic(err)
    }
    if val != nil {
        return val.([]WorkbookCommentMentionable)
    }
    return nil
}
// GetRichContent gets the richContent property value. The rich content of the reply (for example, reply content with mentions, where the first mentioned entity has an ID attribute of 0 and the second has an ID attribute of 1). When contentType is plain, this property is empty. Read-only.
// returns a *string when successful
func (m *WorkbookCommentReply) GetRichContent()(*string) {
    val, err := m.GetBackingStore().Get("richContent")
    if err != nil {
        panic(err)
    }
    if val != nil {
        return val.(*string)
    }
    return nil
}
// GetTask gets the task property value. The task associated with the comment thread.
// returns a WorkbookDocumentTaskable when successful
func (m *WorkbookCommentReply) GetTask()(WorkbookDocumentTaskable) {
    val, err := m.GetBackingStore().Get("task")
    if err != nil {
        panic(err)
    }
    if val != nil {
        return val.(WorkbookDocumentTaskable)
    }
    return nil
}
// Serialize serializes information the current object
func (m *WorkbookCommentReply) Serialize(writer i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.SerializationWriter)(error) {
    err := m.Entity.Serialize(writer)
    if err != nil {
        return err
    }
    {
        err = writer.WriteStringValue("content", m.GetContent())
        if err != nil {
            return err
        }
    }
    {
        err = writer.WriteStringValue("contentType", m.GetContentType())
        if err != nil {
            return err
        }
    }
    if m.GetMentions() != nil {
        cast := make([]i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.Parsable, len(m.GetMentions()))
        for i, v := range m.GetMentions() {
            if v != nil {
                cast[i] = v.(i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.Parsable)
            }
        }
        err = writer.WriteCollectionOfObjectValues("mentions", cast)
        if err != nil {
            return err
        }
    }
    {
        err = writer.WriteStringValue("richContent", m.GetRichContent())
        if err != nil {
            return err
        }
    }
    {
        err = writer.WriteObjectValue("task", m.GetTask())
        if err != nil {
            return err
        }
    }
    return nil
}
// SetContent sets the content property value. The content of the reply that is the displayed to end-users.
func (m *WorkbookCommentReply) SetContent(value *string)() {
    err := m.GetBackingStore().Set("content", value)
    if err != nil {
        panic(err)
    }
}
// SetContentType sets the contentType property value. The content type for the reply. Supported values are: plain, mention.
func (m *WorkbookCommentReply) SetContentType(value *string)() {
    err := m.GetBackingStore().Set("contentType", value)
    if err != nil {
        panic(err)
    }
}
// SetMentions sets the mentions property value. A collection that contains all the people mentioned within the reply. When contentType is plain, this property is an empty array. Read-only.
func (m *WorkbookCommentReply) SetMentions(value []WorkbookCommentMentionable)() {
    err := m.GetBackingStore().Set("mentions", value)
    if err != nil {
        panic(err)
    }
}
// SetRichContent sets the richContent property value. The rich content of the reply (for example, reply content with mentions, where the first mentioned entity has an ID attribute of 0 and the second has an ID attribute of 1). When contentType is plain, this property is empty. Read-only.
func (m *WorkbookCommentReply) SetRichContent(value *string)() {
    err := m.GetBackingStore().Set("richContent", value)
    if err != nil {
        panic(err)
    }
}
// SetTask sets the task property value. The task associated with the comment thread.
func (m *WorkbookCommentReply) SetTask(value WorkbookDocumentTaskable)() {
    err := m.GetBackingStore().Set("task", value)
    if err != nil {
        panic(err)
    }
}
type WorkbookCommentReplyable interface {
    Entityable
    i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.Parsable
    GetContent()(*string)
    GetContentType()(*string)
    GetMentions()([]WorkbookCommentMentionable)
    GetRichContent()(*string)
    GetTask()(WorkbookDocumentTaskable)
    SetContent(value *string)()
    SetContentType(value *string)()
    SetMentions(value []WorkbookCommentMentionable)()
    SetRichContent(value *string)()
    SetTask(value WorkbookDocumentTaskable)()
}
