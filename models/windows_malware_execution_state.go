package models
import (
    "strings"
    "errors"
)
// Provides operations to manage the deviceManagement singleton.
type WindowsMalwareExecutionState int

const (
    UNKNOWN_WINDOWSMALWAREEXECUTIONSTATE WindowsMalwareExecutionState = iota
    BLOCKED_WINDOWSMALWAREEXECUTIONSTATE
    ALLOWED_WINDOWSMALWAREEXECUTIONSTATE
    RUNNING_WINDOWSMALWAREEXECUTIONSTATE
    NOTRUNNING_WINDOWSMALWAREEXECUTIONSTATE
)

func (i WindowsMalwareExecutionState) String() string {
    return []string{"UNKNOWN", "BLOCKED", "ALLOWED", "RUNNING", "NOTRUNNING"}[i]
}
func ParseWindowsMalwareExecutionState(v string) (interface{}, error) {
    result := UNKNOWN_WINDOWSMALWAREEXECUTIONSTATE
    switch strings.ToUpper(v) {
        case "UNKNOWN":
            result = UNKNOWN_WINDOWSMALWAREEXECUTIONSTATE
        case "BLOCKED":
            result = BLOCKED_WINDOWSMALWAREEXECUTIONSTATE
        case "ALLOWED":
            result = ALLOWED_WINDOWSMALWAREEXECUTIONSTATE
        case "RUNNING":
            result = RUNNING_WINDOWSMALWAREEXECUTIONSTATE
        case "NOTRUNNING":
            result = NOTRUNNING_WINDOWSMALWAREEXECUTIONSTATE
        default:
            return 0, errors.New("Unknown WindowsMalwareExecutionState value: " + v)
    }
    return &result, nil
}
func SerializeWindowsMalwareExecutionState(values []WindowsMalwareExecutionState) []string {
    result := make([]string, len(values))
    for i, v := range values {
        result[i] = v.String()
    }
    return result
}
