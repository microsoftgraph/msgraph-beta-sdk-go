// Code generated by Microsoft Kiota - DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package models

import (
    i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91 "github.com/microsoft/kiota-abstractions-go/serialization"
)

type Desk struct {
    Place
}
// NewDesk instantiates a new Desk and sets the default values.
func NewDesk()(*Desk) {
    m := &Desk{
        Place: *NewPlace(),
    }
    odataTypeValue := "#microsoft.graph.desk"
    m.SetOdataType(&odataTypeValue)
    return m
}
// CreateDeskFromDiscriminatorValue creates a new instance of the appropriate class based on discriminator value
// returns a Parsable when successful
func CreateDeskFromDiscriminatorValue(parseNode i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode)(i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.Parsable, error) {
    return NewDesk(), nil
}
// GetDisplayDeviceName gets the displayDeviceName property value. The name of the display device (for example, monitor or projector) that is available at the desk.
// returns a *string when successful
func (m *Desk) GetDisplayDeviceName()(*string) {
    val, err := m.GetBackingStore().Get("displayDeviceName")
    if err != nil {
        panic(err)
    }
    if val != nil {
        return val.(*string)
    }
    return nil
}
// GetFieldDeserializers the deserialization information for the current model
// returns a map[string]func(i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode)(error) when successful
func (m *Desk) GetFieldDeserializers()(map[string]func(i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode)(error)) {
    res := m.Place.GetFieldDeserializers()
    res["displayDeviceName"] = func (n i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode) error {
        val, err := n.GetStringValue()
        if err != nil {
            return err
        }
        if val != nil {
            m.SetDisplayDeviceName(val)
        }
        return nil
    }
    res["mailboxDetails"] = func (n i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode) error {
        val, err := n.GetObjectValue(CreateMailboxDetailsFromDiscriminatorValue)
        if err != nil {
            return err
        }
        if val != nil {
            m.SetMailboxDetails(val.(MailboxDetailsable))
        }
        return nil
    }
    res["mode"] = func (n i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode) error {
        val, err := n.GetObjectValue(CreatePlaceModeFromDiscriminatorValue)
        if err != nil {
            return err
        }
        if val != nil {
            m.SetMode(val.(PlaceModeable))
        }
        return nil
    }
    return res
}
// GetMailboxDetails gets the mailboxDetails property value. The mailbox object id and email address that are associated with the desk.
// returns a MailboxDetailsable when successful
func (m *Desk) GetMailboxDetails()(MailboxDetailsable) {
    val, err := m.GetBackingStore().Get("mailboxDetails")
    if err != nil {
        panic(err)
    }
    if val != nil {
        return val.(MailboxDetailsable)
    }
    return nil
}
// GetMode gets the mode property value. The mode of the desk. The supported modes are:assignedPlaceMode - Desks that are assigned to a user.reservablePlaceMode - Desks that can be booked in advance using desk reservation tools.dropInPlaceMode - First come, first served desks. When you plug into a peripheral on one of these desks, the desk is booked for you, assuming the peripheral is associated with the desk in the Microsoft Teams Rooms Pro management portal.offlinePlaceMode - Desk that is taken down for maintenance or marked as not reservable.
// returns a PlaceModeable when successful
func (m *Desk) GetMode()(PlaceModeable) {
    val, err := m.GetBackingStore().Get("mode")
    if err != nil {
        panic(err)
    }
    if val != nil {
        return val.(PlaceModeable)
    }
    return nil
}
// Serialize serializes information the current object
func (m *Desk) Serialize(writer i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.SerializationWriter)(error) {
    err := m.Place.Serialize(writer)
    if err != nil {
        return err
    }
    {
        err = writer.WriteStringValue("displayDeviceName", m.GetDisplayDeviceName())
        if err != nil {
            return err
        }
    }
    {
        err = writer.WriteObjectValue("mailboxDetails", m.GetMailboxDetails())
        if err != nil {
            return err
        }
    }
    {
        err = writer.WriteObjectValue("mode", m.GetMode())
        if err != nil {
            return err
        }
    }
    return nil
}
// SetDisplayDeviceName sets the displayDeviceName property value. The name of the display device (for example, monitor or projector) that is available at the desk.
func (m *Desk) SetDisplayDeviceName(value *string)() {
    err := m.GetBackingStore().Set("displayDeviceName", value)
    if err != nil {
        panic(err)
    }
}
// SetMailboxDetails sets the mailboxDetails property value. The mailbox object id and email address that are associated with the desk.
func (m *Desk) SetMailboxDetails(value MailboxDetailsable)() {
    err := m.GetBackingStore().Set("mailboxDetails", value)
    if err != nil {
        panic(err)
    }
}
// SetMode sets the mode property value. The mode of the desk. The supported modes are:assignedPlaceMode - Desks that are assigned to a user.reservablePlaceMode - Desks that can be booked in advance using desk reservation tools.dropInPlaceMode - First come, first served desks. When you plug into a peripheral on one of these desks, the desk is booked for you, assuming the peripheral is associated with the desk in the Microsoft Teams Rooms Pro management portal.offlinePlaceMode - Desk that is taken down for maintenance or marked as not reservable.
func (m *Desk) SetMode(value PlaceModeable)() {
    err := m.GetBackingStore().Set("mode", value)
    if err != nil {
        panic(err)
    }
}
type Deskable interface {
    i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.Parsable
    Placeable
    GetDisplayDeviceName()(*string)
    GetMailboxDetails()(MailboxDetailsable)
    GetMode()(PlaceModeable)
    SetDisplayDeviceName(value *string)()
    SetMailboxDetails(value MailboxDetailsable)()
    SetMode(value PlaceModeable)()
}
