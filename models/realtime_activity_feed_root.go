// Code generated by Microsoft Kiota - DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package models

import (
    i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91 "github.com/microsoft/kiota-abstractions-go/serialization"
)

type RealtimeActivityFeedRoot struct {
    Entity
}
// NewRealtimeActivityFeedRoot instantiates a new RealtimeActivityFeedRoot and sets the default values.
func NewRealtimeActivityFeedRoot()(*RealtimeActivityFeedRoot) {
    m := &RealtimeActivityFeedRoot{
        Entity: *NewEntity(),
    }
    return m
}
// CreateRealtimeActivityFeedRootFromDiscriminatorValue creates a new instance of the appropriate class based on discriminator value
// returns a Parsable when successful
func CreateRealtimeActivityFeedRootFromDiscriminatorValue(parseNode i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode)(i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.Parsable, error) {
    return NewRealtimeActivityFeedRoot(), nil
}
// GetFieldDeserializers the deserialization information for the current model
// returns a map[string]func(i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode)(error) when successful
func (m *RealtimeActivityFeedRoot) GetFieldDeserializers()(map[string]func(i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode)(error)) {
    res := m.Entity.GetFieldDeserializers()
    res["meetings"] = func (n i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode) error {
        val, err := n.GetCollectionOfObjectValues(CreateRealtimeActivityMeetingFromDiscriminatorValue)
        if err != nil {
            return err
        }
        if val != nil {
            res := make([]RealtimeActivityMeetingable, len(val))
            for i, v := range val {
                if v != nil {
                    res[i] = v.(RealtimeActivityMeetingable)
                }
            }
            m.SetMeetings(res)
        }
        return nil
    }
    res["multiActivitySubscriptions"] = func (n i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode) error {
        val, err := n.GetCollectionOfObjectValues(CreateMultiActivitySubscriptionFromDiscriminatorValue)
        if err != nil {
            return err
        }
        if val != nil {
            res := make([]MultiActivitySubscriptionable, len(val))
            for i, v := range val {
                if v != nil {
                    res[i] = v.(MultiActivitySubscriptionable)
                }
            }
            m.SetMultiActivitySubscriptions(res)
        }
        return nil
    }
    return res
}
// GetMeetings gets the meetings property value. The meetings property
// returns a []RealtimeActivityMeetingable when successful
func (m *RealtimeActivityFeedRoot) GetMeetings()([]RealtimeActivityMeetingable) {
    val, err := m.GetBackingStore().Get("meetings")
    if err != nil {
        panic(err)
    }
    if val != nil {
        return val.([]RealtimeActivityMeetingable)
    }
    return nil
}
// GetMultiActivitySubscriptions gets the multiActivitySubscriptions property value. The multiActivitySubscriptions property
// returns a []MultiActivitySubscriptionable when successful
func (m *RealtimeActivityFeedRoot) GetMultiActivitySubscriptions()([]MultiActivitySubscriptionable) {
    val, err := m.GetBackingStore().Get("multiActivitySubscriptions")
    if err != nil {
        panic(err)
    }
    if val != nil {
        return val.([]MultiActivitySubscriptionable)
    }
    return nil
}
// Serialize serializes information the current object
func (m *RealtimeActivityFeedRoot) Serialize(writer i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.SerializationWriter)(error) {
    err := m.Entity.Serialize(writer)
    if err != nil {
        return err
    }
    if m.GetMeetings() != nil {
        cast := make([]i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.Parsable, len(m.GetMeetings()))
        for i, v := range m.GetMeetings() {
            if v != nil {
                cast[i] = v.(i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.Parsable)
            }
        }
        err = writer.WriteCollectionOfObjectValues("meetings", cast)
        if err != nil {
            return err
        }
    }
    if m.GetMultiActivitySubscriptions() != nil {
        cast := make([]i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.Parsable, len(m.GetMultiActivitySubscriptions()))
        for i, v := range m.GetMultiActivitySubscriptions() {
            if v != nil {
                cast[i] = v.(i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.Parsable)
            }
        }
        err = writer.WriteCollectionOfObjectValues("multiActivitySubscriptions", cast)
        if err != nil {
            return err
        }
    }
    return nil
}
// SetMeetings sets the meetings property value. The meetings property
func (m *RealtimeActivityFeedRoot) SetMeetings(value []RealtimeActivityMeetingable)() {
    err := m.GetBackingStore().Set("meetings", value)
    if err != nil {
        panic(err)
    }
}
// SetMultiActivitySubscriptions sets the multiActivitySubscriptions property value. The multiActivitySubscriptions property
func (m *RealtimeActivityFeedRoot) SetMultiActivitySubscriptions(value []MultiActivitySubscriptionable)() {
    err := m.GetBackingStore().Set("multiActivitySubscriptions", value)
    if err != nil {
        panic(err)
    }
}
type RealtimeActivityFeedRootable interface {
    Entityable
    i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.Parsable
    GetMeetings()([]RealtimeActivityMeetingable)
    GetMultiActivitySubscriptions()([]MultiActivitySubscriptionable)
    SetMeetings(value []RealtimeActivityMeetingable)()
    SetMultiActivitySubscriptions(value []MultiActivitySubscriptionable)()
}
