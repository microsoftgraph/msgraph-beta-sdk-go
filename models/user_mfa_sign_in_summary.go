// Code generated by Microsoft Kiota - DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package models

import (
    i336074805fc853987abe6f7fe3ad97a6a6f3077a16391fec744f671a015fbd7e "time"
    i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91 "github.com/microsoft/kiota-abstractions-go/serialization"
)

type UserMfaSignInSummary struct {
    Entity
}
// NewUserMfaSignInSummary instantiates a new UserMfaSignInSummary and sets the default values.
func NewUserMfaSignInSummary()(*UserMfaSignInSummary) {
    m := &UserMfaSignInSummary{
        Entity: *NewEntity(),
    }
    return m
}
// CreateUserMfaSignInSummaryFromDiscriminatorValue creates a new instance of the appropriate class based on discriminator value
// returns a Parsable when successful
func CreateUserMfaSignInSummaryFromDiscriminatorValue(parseNode i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode)(i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.Parsable, error) {
    return NewUserMfaSignInSummary(), nil
}
// GetCreatedDateTime gets the createdDateTime property value. The date and time (UTC) for when the summary was aggregated for. The DateTimeOffset type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
// returns a *Time when successful
func (m *UserMfaSignInSummary) GetCreatedDateTime()(*i336074805fc853987abe6f7fe3ad97a6a6f3077a16391fec744f671a015fbd7e.Time) {
    val, err := m.GetBackingStore().Get("createdDateTime")
    if err != nil {
        panic(err)
    }
    if val != nil {
        return val.(*i336074805fc853987abe6f7fe3ad97a6a6f3077a16391fec744f671a015fbd7e.Time)
    }
    return nil
}
// GetFieldDeserializers the deserialization information for the current model
// returns a map[string]func(i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode)(error) when successful
func (m *UserMfaSignInSummary) GetFieldDeserializers()(map[string]func(i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode)(error)) {
    res := m.Entity.GetFieldDeserializers()
    res["createdDateTime"] = func (n i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode) error {
        val, err := n.GetTimeValue()
        if err != nil {
            return err
        }
        if val != nil {
            m.SetCreatedDateTime(val)
        }
        return nil
    }
    res["multiFactorSignIns"] = func (n i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode) error {
        val, err := n.GetInt64Value()
        if err != nil {
            return err
        }
        if val != nil {
            m.SetMultiFactorSignIns(val)
        }
        return nil
    }
    res["singleFactorSignIns"] = func (n i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode) error {
        val, err := n.GetInt64Value()
        if err != nil {
            return err
        }
        if val != nil {
            m.SetSingleFactorSignIns(val)
        }
        return nil
    }
    res["totalSignIns"] = func (n i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode) error {
        val, err := n.GetInt64Value()
        if err != nil {
            return err
        }
        if val != nil {
            m.SetTotalSignIns(val)
        }
        return nil
    }
    return res
}
// GetMultiFactorSignIns gets the multiFactorSignIns property value. The total number of MFA sign-ins for the given day.
// returns a *int64 when successful
func (m *UserMfaSignInSummary) GetMultiFactorSignIns()(*int64) {
    val, err := m.GetBackingStore().Get("multiFactorSignIns")
    if err != nil {
        panic(err)
    }
    if val != nil {
        return val.(*int64)
    }
    return nil
}
// GetSingleFactorSignIns gets the singleFactorSignIns property value. The total number of non-MFA sign ins for the given day.
// returns a *int64 when successful
func (m *UserMfaSignInSummary) GetSingleFactorSignIns()(*int64) {
    val, err := m.GetBackingStore().Get("singleFactorSignIns")
    if err != nil {
        panic(err)
    }
    if val != nil {
        return val.(*int64)
    }
    return nil
}
// GetTotalSignIns gets the totalSignIns property value. The total number of sign-ins for the given day.
// returns a *int64 when successful
func (m *UserMfaSignInSummary) GetTotalSignIns()(*int64) {
    val, err := m.GetBackingStore().Get("totalSignIns")
    if err != nil {
        panic(err)
    }
    if val != nil {
        return val.(*int64)
    }
    return nil
}
// Serialize serializes information the current object
func (m *UserMfaSignInSummary) Serialize(writer i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.SerializationWriter)(error) {
    err := m.Entity.Serialize(writer)
    if err != nil {
        return err
    }
    {
        err = writer.WriteTimeValue("createdDateTime", m.GetCreatedDateTime())
        if err != nil {
            return err
        }
    }
    {
        err = writer.WriteInt64Value("multiFactorSignIns", m.GetMultiFactorSignIns())
        if err != nil {
            return err
        }
    }
    {
        err = writer.WriteInt64Value("singleFactorSignIns", m.GetSingleFactorSignIns())
        if err != nil {
            return err
        }
    }
    {
        err = writer.WriteInt64Value("totalSignIns", m.GetTotalSignIns())
        if err != nil {
            return err
        }
    }
    return nil
}
// SetCreatedDateTime sets the createdDateTime property value. The date and time (UTC) for when the summary was aggregated for. The DateTimeOffset type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
func (m *UserMfaSignInSummary) SetCreatedDateTime(value *i336074805fc853987abe6f7fe3ad97a6a6f3077a16391fec744f671a015fbd7e.Time)() {
    err := m.GetBackingStore().Set("createdDateTime", value)
    if err != nil {
        panic(err)
    }
}
// SetMultiFactorSignIns sets the multiFactorSignIns property value. The total number of MFA sign-ins for the given day.
func (m *UserMfaSignInSummary) SetMultiFactorSignIns(value *int64)() {
    err := m.GetBackingStore().Set("multiFactorSignIns", value)
    if err != nil {
        panic(err)
    }
}
// SetSingleFactorSignIns sets the singleFactorSignIns property value. The total number of non-MFA sign ins for the given day.
func (m *UserMfaSignInSummary) SetSingleFactorSignIns(value *int64)() {
    err := m.GetBackingStore().Set("singleFactorSignIns", value)
    if err != nil {
        panic(err)
    }
}
// SetTotalSignIns sets the totalSignIns property value. The total number of sign-ins for the given day.
func (m *UserMfaSignInSummary) SetTotalSignIns(value *int64)() {
    err := m.GetBackingStore().Set("totalSignIns", value)
    if err != nil {
        panic(err)
    }
}
type UserMfaSignInSummaryable interface {
    Entityable
    i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.Parsable
    GetCreatedDateTime()(*i336074805fc853987abe6f7fe3ad97a6a6f3077a16391fec744f671a015fbd7e.Time)
    GetMultiFactorSignIns()(*int64)
    GetSingleFactorSignIns()(*int64)
    GetTotalSignIns()(*int64)
    SetCreatedDateTime(value *i336074805fc853987abe6f7fe3ad97a6a6f3077a16391fec744f671a015fbd7e.Time)()
    SetMultiFactorSignIns(value *int64)()
    SetSingleFactorSignIns(value *int64)()
    SetTotalSignIns(value *int64)()
}
