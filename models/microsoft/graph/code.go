package graph
import (
    "strings"
    "errors"
)
// Provides operations to call the validateComplianceScript method.
type Code int

const (
    NONE_CODE Code = iota
    JSONFILEINVALID_CODE
    JSONFILEMISSING_CODE
    JSONFILETOOLARGE_CODE
    RULESMISSING_CODE
    DUPLICATERULES_CODE
    TOOMANYRULESSPECIFIED_CODE
    OPERATORMISSING_CODE
    OPERATORNOTSUPPORTED_CODE
    DATATYPEMISSING_CODE
    DATATYPENOTSUPPORTED_CODE
    OPERATORDATATYPECOMBINATIONNOTSUPPORTED_CODE
    MOREINFOURIMISSING_CODE
    MOREINFOURIINVALID_CODE
    MOREINFOURITOOLARGE_CODE
    DESCRIPTIONMISSING_CODE
    DESCRIPTIONINVALID_CODE
    DESCRIPTIONTOOLARGE_CODE
    TITLEMISSING_CODE
    TITLEINVALID_CODE
    TITLETOOLARGE_CODE
    OPERANDMISSING_CODE
    OPERANDINVALID_CODE
    OPERANDTOOLARGE_CODE
    SETTINGNAMEMISSING_CODE
    SETTINGNAMEINVALID_CODE
    SETTINGNAMETOOLARGE_CODE
    ENGLISHLOCALEMISSING_CODE
    DUPLICATELOCALES_CODE
    UNRECOGNIZEDLOCALE_CODE
    UNKNOWN_CODE
    REMEDIATIONSTRINGSMISSING_CODE
)

func (i Code) String() string {
    return []string{"NONE", "JSONFILEINVALID", "JSONFILEMISSING", "JSONFILETOOLARGE", "RULESMISSING", "DUPLICATERULES", "TOOMANYRULESSPECIFIED", "OPERATORMISSING", "OPERATORNOTSUPPORTED", "DATATYPEMISSING", "DATATYPENOTSUPPORTED", "OPERATORDATATYPECOMBINATIONNOTSUPPORTED", "MOREINFOURIMISSING", "MOREINFOURIINVALID", "MOREINFOURITOOLARGE", "DESCRIPTIONMISSING", "DESCRIPTIONINVALID", "DESCRIPTIONTOOLARGE", "TITLEMISSING", "TITLEINVALID", "TITLETOOLARGE", "OPERANDMISSING", "OPERANDINVALID", "OPERANDTOOLARGE", "SETTINGNAMEMISSING", "SETTINGNAMEINVALID", "SETTINGNAMETOOLARGE", "ENGLISHLOCALEMISSING", "DUPLICATELOCALES", "UNRECOGNIZEDLOCALE", "UNKNOWN", "REMEDIATIONSTRINGSMISSING"}[i]
}
func ParseCode(v string) (interface{}, error) {
    result := NONE_CODE
    switch strings.ToUpper(v) {
        case "NONE":
            result = NONE_CODE
        case "JSONFILEINVALID":
            result = JSONFILEINVALID_CODE
        case "JSONFILEMISSING":
            result = JSONFILEMISSING_CODE
        case "JSONFILETOOLARGE":
            result = JSONFILETOOLARGE_CODE
        case "RULESMISSING":
            result = RULESMISSING_CODE
        case "DUPLICATERULES":
            result = DUPLICATERULES_CODE
        case "TOOMANYRULESSPECIFIED":
            result = TOOMANYRULESSPECIFIED_CODE
        case "OPERATORMISSING":
            result = OPERATORMISSING_CODE
        case "OPERATORNOTSUPPORTED":
            result = OPERATORNOTSUPPORTED_CODE
        case "DATATYPEMISSING":
            result = DATATYPEMISSING_CODE
        case "DATATYPENOTSUPPORTED":
            result = DATATYPENOTSUPPORTED_CODE
        case "OPERATORDATATYPECOMBINATIONNOTSUPPORTED":
            result = OPERATORDATATYPECOMBINATIONNOTSUPPORTED_CODE
        case "MOREINFOURIMISSING":
            result = MOREINFOURIMISSING_CODE
        case "MOREINFOURIINVALID":
            result = MOREINFOURIINVALID_CODE
        case "MOREINFOURITOOLARGE":
            result = MOREINFOURITOOLARGE_CODE
        case "DESCRIPTIONMISSING":
            result = DESCRIPTIONMISSING_CODE
        case "DESCRIPTIONINVALID":
            result = DESCRIPTIONINVALID_CODE
        case "DESCRIPTIONTOOLARGE":
            result = DESCRIPTIONTOOLARGE_CODE
        case "TITLEMISSING":
            result = TITLEMISSING_CODE
        case "TITLEINVALID":
            result = TITLEINVALID_CODE
        case "TITLETOOLARGE":
            result = TITLETOOLARGE_CODE
        case "OPERANDMISSING":
            result = OPERANDMISSING_CODE
        case "OPERANDINVALID":
            result = OPERANDINVALID_CODE
        case "OPERANDTOOLARGE":
            result = OPERANDTOOLARGE_CODE
        case "SETTINGNAMEMISSING":
            result = SETTINGNAMEMISSING_CODE
        case "SETTINGNAMEINVALID":
            result = SETTINGNAMEINVALID_CODE
        case "SETTINGNAMETOOLARGE":
            result = SETTINGNAMETOOLARGE_CODE
        case "ENGLISHLOCALEMISSING":
            result = ENGLISHLOCALEMISSING_CODE
        case "DUPLICATELOCALES":
            result = DUPLICATELOCALES_CODE
        case "UNRECOGNIZEDLOCALE":
            result = UNRECOGNIZEDLOCALE_CODE
        case "UNKNOWN":
            result = UNKNOWN_CODE
        case "REMEDIATIONSTRINGSMISSING":
            result = REMEDIATIONSTRINGSMISSING_CODE
        default:
            return 0, errors.New("Unknown Code value: " + v)
    }
    return &result, nil
}
func SerializeCode(values []Code) []string {
    result := make([]string, len(values))
    for i, v := range values {
        result[i] = v.String()
    }
    return result
}
