package graph
import (
    "strings"
    "errors"
)
// Provides operations to call the validateComplianceScript method.
type DeviceComplianceScriptRuleDataType int

const (
    NONE_DEVICECOMPLIANCESCRIPTRULEDATATYPE DeviceComplianceScriptRuleDataType = iota
    BOOLEAN_DEVICECOMPLIANCESCRIPTRULEDATATYPE
    INT64_DEVICECOMPLIANCESCRIPTRULEDATATYPE
    DOUBLE_DEVICECOMPLIANCESCRIPTRULEDATATYPE
    STRING_DEVICECOMPLIANCESCRIPTRULEDATATYPE
    DATETIME_DEVICECOMPLIANCESCRIPTRULEDATATYPE
    VERSION_DEVICECOMPLIANCESCRIPTRULEDATATYPE
    BASE64_DEVICECOMPLIANCESCRIPTRULEDATATYPE
    XML_DEVICECOMPLIANCESCRIPTRULEDATATYPE
    BOOLEANARRAY_DEVICECOMPLIANCESCRIPTRULEDATATYPE
    INT64ARRAY_DEVICECOMPLIANCESCRIPTRULEDATATYPE
    DOUBLEARRAY_DEVICECOMPLIANCESCRIPTRULEDATATYPE
    STRINGARRAY_DEVICECOMPLIANCESCRIPTRULEDATATYPE
    DATETIMEARRAY_DEVICECOMPLIANCESCRIPTRULEDATATYPE
    VERSIONARRAY_DEVICECOMPLIANCESCRIPTRULEDATATYPE
)

func (i DeviceComplianceScriptRuleDataType) String() string {
    return []string{"NONE", "BOOLEAN", "INT64", "DOUBLE", "STRING", "DATETIME", "VERSION", "BASE64", "XML", "BOOLEANARRAY", "INT64ARRAY", "DOUBLEARRAY", "STRINGARRAY", "DATETIMEARRAY", "VERSIONARRAY"}[i]
}
func ParseDeviceComplianceScriptRuleDataType(v string) (interface{}, error) {
    result := NONE_DEVICECOMPLIANCESCRIPTRULEDATATYPE
    switch strings.ToUpper(v) {
        case "NONE":
            result = NONE_DEVICECOMPLIANCESCRIPTRULEDATATYPE
        case "BOOLEAN":
            result = BOOLEAN_DEVICECOMPLIANCESCRIPTRULEDATATYPE
        case "INT64":
            result = INT64_DEVICECOMPLIANCESCRIPTRULEDATATYPE
        case "DOUBLE":
            result = DOUBLE_DEVICECOMPLIANCESCRIPTRULEDATATYPE
        case "STRING":
            result = STRING_DEVICECOMPLIANCESCRIPTRULEDATATYPE
        case "DATETIME":
            result = DATETIME_DEVICECOMPLIANCESCRIPTRULEDATATYPE
        case "VERSION":
            result = VERSION_DEVICECOMPLIANCESCRIPTRULEDATATYPE
        case "BASE64":
            result = BASE64_DEVICECOMPLIANCESCRIPTRULEDATATYPE
        case "XML":
            result = XML_DEVICECOMPLIANCESCRIPTRULEDATATYPE
        case "BOOLEANARRAY":
            result = BOOLEANARRAY_DEVICECOMPLIANCESCRIPTRULEDATATYPE
        case "INT64ARRAY":
            result = INT64ARRAY_DEVICECOMPLIANCESCRIPTRULEDATATYPE
        case "DOUBLEARRAY":
            result = DOUBLEARRAY_DEVICECOMPLIANCESCRIPTRULEDATATYPE
        case "STRINGARRAY":
            result = STRINGARRAY_DEVICECOMPLIANCESCRIPTRULEDATATYPE
        case "DATETIMEARRAY":
            result = DATETIMEARRAY_DEVICECOMPLIANCESCRIPTRULEDATATYPE
        case "VERSIONARRAY":
            result = VERSIONARRAY_DEVICECOMPLIANCESCRIPTRULEDATATYPE
        default:
            return 0, errors.New("Unknown DeviceComplianceScriptRuleDataType value: " + v)
    }
    return &result, nil
}
func SerializeDeviceComplianceScriptRuleDataType(values []DeviceComplianceScriptRuleDataType) []string {
    result := make([]string, len(values))
    for i, v := range values {
        result[i] = v.String()
    }
    return result
}
