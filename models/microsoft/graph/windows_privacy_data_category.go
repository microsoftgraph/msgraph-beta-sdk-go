package graph
import (
    "strings"
    "errors"
)
// Provides operations to call the windowsPrivacyAccessControls method.
type WindowsPrivacyDataCategory int

const (
    NOTCONFIGURED_WINDOWSPRIVACYDATACATEGORY WindowsPrivacyDataCategory = iota
    ACCOUNTINFO_WINDOWSPRIVACYDATACATEGORY
    APPSRUNINBACKGROUND_WINDOWSPRIVACYDATACATEGORY
    CALENDAR_WINDOWSPRIVACYDATACATEGORY
    CALLHISTORY_WINDOWSPRIVACYDATACATEGORY
    CAMERA_WINDOWSPRIVACYDATACATEGORY
    CONTACTS_WINDOWSPRIVACYDATACATEGORY
    DIAGNOSTICSINFO_WINDOWSPRIVACYDATACATEGORY
    EMAIL_WINDOWSPRIVACYDATACATEGORY
    LOCATION_WINDOWSPRIVACYDATACATEGORY
    MESSAGING_WINDOWSPRIVACYDATACATEGORY
    MICROPHONE_WINDOWSPRIVACYDATACATEGORY
    MOTION_WINDOWSPRIVACYDATACATEGORY
    NOTIFICATIONS_WINDOWSPRIVACYDATACATEGORY
    PHONE_WINDOWSPRIVACYDATACATEGORY
    RADIOS_WINDOWSPRIVACYDATACATEGORY
    TASKS_WINDOWSPRIVACYDATACATEGORY
    SYNCWITHDEVICES_WINDOWSPRIVACYDATACATEGORY
    TRUSTEDDEVICES_WINDOWSPRIVACYDATACATEGORY
)

func (i WindowsPrivacyDataCategory) String() string {
    return []string{"NOTCONFIGURED", "ACCOUNTINFO", "APPSRUNINBACKGROUND", "CALENDAR", "CALLHISTORY", "CAMERA", "CONTACTS", "DIAGNOSTICSINFO", "EMAIL", "LOCATION", "MESSAGING", "MICROPHONE", "MOTION", "NOTIFICATIONS", "PHONE", "RADIOS", "TASKS", "SYNCWITHDEVICES", "TRUSTEDDEVICES"}[i]
}
func ParseWindowsPrivacyDataCategory(v string) (interface{}, error) {
    result := NOTCONFIGURED_WINDOWSPRIVACYDATACATEGORY
    switch strings.ToUpper(v) {
        case "NOTCONFIGURED":
            result = NOTCONFIGURED_WINDOWSPRIVACYDATACATEGORY
        case "ACCOUNTINFO":
            result = ACCOUNTINFO_WINDOWSPRIVACYDATACATEGORY
        case "APPSRUNINBACKGROUND":
            result = APPSRUNINBACKGROUND_WINDOWSPRIVACYDATACATEGORY
        case "CALENDAR":
            result = CALENDAR_WINDOWSPRIVACYDATACATEGORY
        case "CALLHISTORY":
            result = CALLHISTORY_WINDOWSPRIVACYDATACATEGORY
        case "CAMERA":
            result = CAMERA_WINDOWSPRIVACYDATACATEGORY
        case "CONTACTS":
            result = CONTACTS_WINDOWSPRIVACYDATACATEGORY
        case "DIAGNOSTICSINFO":
            result = DIAGNOSTICSINFO_WINDOWSPRIVACYDATACATEGORY
        case "EMAIL":
            result = EMAIL_WINDOWSPRIVACYDATACATEGORY
        case "LOCATION":
            result = LOCATION_WINDOWSPRIVACYDATACATEGORY
        case "MESSAGING":
            result = MESSAGING_WINDOWSPRIVACYDATACATEGORY
        case "MICROPHONE":
            result = MICROPHONE_WINDOWSPRIVACYDATACATEGORY
        case "MOTION":
            result = MOTION_WINDOWSPRIVACYDATACATEGORY
        case "NOTIFICATIONS":
            result = NOTIFICATIONS_WINDOWSPRIVACYDATACATEGORY
        case "PHONE":
            result = PHONE_WINDOWSPRIVACYDATACATEGORY
        case "RADIOS":
            result = RADIOS_WINDOWSPRIVACYDATACATEGORY
        case "TASKS":
            result = TASKS_WINDOWSPRIVACYDATACATEGORY
        case "SYNCWITHDEVICES":
            result = SYNCWITHDEVICES_WINDOWSPRIVACYDATACATEGORY
        case "TRUSTEDDEVICES":
            result = TRUSTEDDEVICES_WINDOWSPRIVACYDATACATEGORY
        default:
            return 0, errors.New("Unknown WindowsPrivacyDataCategory value: " + v)
    }
    return &result, nil
}
func SerializeWindowsPrivacyDataCategory(values []WindowsPrivacyDataCategory) []string {
    result := make([]string, len(values))
    for i, v := range values {
        result[i] = v.String()
    }
    return result
}
