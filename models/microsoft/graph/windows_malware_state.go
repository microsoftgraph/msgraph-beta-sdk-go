package graph
import (
    "strings"
    "errors"
)
// Provides operations to manage the compliance singleton.
type WindowsMalwareState int

const (
    UNKNOWN_WINDOWSMALWARESTATE WindowsMalwareState = iota
    DETECTED_WINDOWSMALWARESTATE
    CLEANED_WINDOWSMALWARESTATE
    QUARANTINED_WINDOWSMALWARESTATE
    REMOVED_WINDOWSMALWARESTATE
    ALLOWED_WINDOWSMALWARESTATE
    BLOCKED_WINDOWSMALWARESTATE
    CLEANFAILED_WINDOWSMALWARESTATE
    QUARANTINEFAILED_WINDOWSMALWARESTATE
    REMOVEFAILED_WINDOWSMALWARESTATE
    ALLOWFAILED_WINDOWSMALWARESTATE
    ABANDONED_WINDOWSMALWARESTATE
    BLOCKFAILED_WINDOWSMALWARESTATE
)

func (i WindowsMalwareState) String() string {
    return []string{"UNKNOWN", "DETECTED", "CLEANED", "QUARANTINED", "REMOVED", "ALLOWED", "BLOCKED", "CLEANFAILED", "QUARANTINEFAILED", "REMOVEFAILED", "ALLOWFAILED", "ABANDONED", "BLOCKFAILED"}[i]
}
func ParseWindowsMalwareState(v string) (interface{}, error) {
    result := UNKNOWN_WINDOWSMALWARESTATE
    switch strings.ToUpper(v) {
        case "UNKNOWN":
            result = UNKNOWN_WINDOWSMALWARESTATE
        case "DETECTED":
            result = DETECTED_WINDOWSMALWARESTATE
        case "CLEANED":
            result = CLEANED_WINDOWSMALWARESTATE
        case "QUARANTINED":
            result = QUARANTINED_WINDOWSMALWARESTATE
        case "REMOVED":
            result = REMOVED_WINDOWSMALWARESTATE
        case "ALLOWED":
            result = ALLOWED_WINDOWSMALWARESTATE
        case "BLOCKED":
            result = BLOCKED_WINDOWSMALWARESTATE
        case "CLEANFAILED":
            result = CLEANFAILED_WINDOWSMALWARESTATE
        case "QUARANTINEFAILED":
            result = QUARANTINEFAILED_WINDOWSMALWARESTATE
        case "REMOVEFAILED":
            result = REMOVEFAILED_WINDOWSMALWARESTATE
        case "ALLOWFAILED":
            result = ALLOWFAILED_WINDOWSMALWARESTATE
        case "ABANDONED":
            result = ABANDONED_WINDOWSMALWARESTATE
        case "BLOCKFAILED":
            result = BLOCKFAILED_WINDOWSMALWARESTATE
        default:
            return 0, errors.New("Unknown WindowsMalwareState value: " + v)
    }
    return &result, nil
}
func SerializeWindowsMalwareState(values []WindowsMalwareState) []string {
    result := make([]string, len(values))
    for i, v := range values {
        result[i] = v.String()
    }
    return result
}
