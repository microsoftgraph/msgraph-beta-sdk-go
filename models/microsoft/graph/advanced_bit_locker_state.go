package graph
import (
    "strings"
    "errors"
)
// Provides operations to manage the deviceManagement singleton.
type AdvancedBitLockerState int

const (
    SUCCESS_ADVANCEDBITLOCKERSTATE AdvancedBitLockerState = iota
    NOUSERCONSENT_ADVANCEDBITLOCKERSTATE
    OSVOLUMEUNPROTECTED_ADVANCEDBITLOCKERSTATE
    OSVOLUMETPMREQUIRED_ADVANCEDBITLOCKERSTATE
    OSVOLUMETPMONLYREQUIRED_ADVANCEDBITLOCKERSTATE
    OSVOLUMETPMPINREQUIRED_ADVANCEDBITLOCKERSTATE
    OSVOLUMETPMSTARTUPKEYREQUIRED_ADVANCEDBITLOCKERSTATE
    OSVOLUMETPMPINSTARTUPKEYREQUIRED_ADVANCEDBITLOCKERSTATE
    OSVOLUMEENCRYPTIONMETHODMISMATCH_ADVANCEDBITLOCKERSTATE
    RECOVERYKEYBACKUPFAILED_ADVANCEDBITLOCKERSTATE
    FIXEDDRIVENOTENCRYPTED_ADVANCEDBITLOCKERSTATE
    FIXEDDRIVEENCRYPTIONMETHODMISMATCH_ADVANCEDBITLOCKERSTATE
    LOGGEDONUSERNONADMIN_ADVANCEDBITLOCKERSTATE
    WINDOWSRECOVERYENVIRONMENTNOTCONFIGURED_ADVANCEDBITLOCKERSTATE
    TPMNOTAVAILABLE_ADVANCEDBITLOCKERSTATE
    TPMNOTREADY_ADVANCEDBITLOCKERSTATE
    NETWORKERROR_ADVANCEDBITLOCKERSTATE
)

func (i AdvancedBitLockerState) String() string {
    return []string{"SUCCESS", "NOUSERCONSENT", "OSVOLUMEUNPROTECTED", "OSVOLUMETPMREQUIRED", "OSVOLUMETPMONLYREQUIRED", "OSVOLUMETPMPINREQUIRED", "OSVOLUMETPMSTARTUPKEYREQUIRED", "OSVOLUMETPMPINSTARTUPKEYREQUIRED", "OSVOLUMEENCRYPTIONMETHODMISMATCH", "RECOVERYKEYBACKUPFAILED", "FIXEDDRIVENOTENCRYPTED", "FIXEDDRIVEENCRYPTIONMETHODMISMATCH", "LOGGEDONUSERNONADMIN", "WINDOWSRECOVERYENVIRONMENTNOTCONFIGURED", "TPMNOTAVAILABLE", "TPMNOTREADY", "NETWORKERROR"}[i]
}
func ParseAdvancedBitLockerState(v string) (interface{}, error) {
    result := SUCCESS_ADVANCEDBITLOCKERSTATE
    switch strings.ToUpper(v) {
        case "SUCCESS":
            result = SUCCESS_ADVANCEDBITLOCKERSTATE
        case "NOUSERCONSENT":
            result = NOUSERCONSENT_ADVANCEDBITLOCKERSTATE
        case "OSVOLUMEUNPROTECTED":
            result = OSVOLUMEUNPROTECTED_ADVANCEDBITLOCKERSTATE
        case "OSVOLUMETPMREQUIRED":
            result = OSVOLUMETPMREQUIRED_ADVANCEDBITLOCKERSTATE
        case "OSVOLUMETPMONLYREQUIRED":
            result = OSVOLUMETPMONLYREQUIRED_ADVANCEDBITLOCKERSTATE
        case "OSVOLUMETPMPINREQUIRED":
            result = OSVOLUMETPMPINREQUIRED_ADVANCEDBITLOCKERSTATE
        case "OSVOLUMETPMSTARTUPKEYREQUIRED":
            result = OSVOLUMETPMSTARTUPKEYREQUIRED_ADVANCEDBITLOCKERSTATE
        case "OSVOLUMETPMPINSTARTUPKEYREQUIRED":
            result = OSVOLUMETPMPINSTARTUPKEYREQUIRED_ADVANCEDBITLOCKERSTATE
        case "OSVOLUMEENCRYPTIONMETHODMISMATCH":
            result = OSVOLUMEENCRYPTIONMETHODMISMATCH_ADVANCEDBITLOCKERSTATE
        case "RECOVERYKEYBACKUPFAILED":
            result = RECOVERYKEYBACKUPFAILED_ADVANCEDBITLOCKERSTATE
        case "FIXEDDRIVENOTENCRYPTED":
            result = FIXEDDRIVENOTENCRYPTED_ADVANCEDBITLOCKERSTATE
        case "FIXEDDRIVEENCRYPTIONMETHODMISMATCH":
            result = FIXEDDRIVEENCRYPTIONMETHODMISMATCH_ADVANCEDBITLOCKERSTATE
        case "LOGGEDONUSERNONADMIN":
            result = LOGGEDONUSERNONADMIN_ADVANCEDBITLOCKERSTATE
        case "WINDOWSRECOVERYENVIRONMENTNOTCONFIGURED":
            result = WINDOWSRECOVERYENVIRONMENTNOTCONFIGURED_ADVANCEDBITLOCKERSTATE
        case "TPMNOTAVAILABLE":
            result = TPMNOTAVAILABLE_ADVANCEDBITLOCKERSTATE
        case "TPMNOTREADY":
            result = TPMNOTREADY_ADVANCEDBITLOCKERSTATE
        case "NETWORKERROR":
            result = NETWORKERROR_ADVANCEDBITLOCKERSTATE
        default:
            return 0, errors.New("Unknown AdvancedBitLockerState value: " + v)
    }
    return &result, nil
}
func SerializeAdvancedBitLockerState(values []AdvancedBitLockerState) []string {
    result := make([]string, len(values))
    for i, v := range values {
        result[i] = v.String()
    }
    return result
}
