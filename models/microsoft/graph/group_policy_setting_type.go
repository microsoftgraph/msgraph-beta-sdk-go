package graph
import (
    "strings"
    "errors"
)
// Provides operations to manage the deviceManagement singleton.
type GroupPolicySettingType int

const (
    UNKNOWN_GROUPPOLICYSETTINGTYPE GroupPolicySettingType = iota
    POLICY_GROUPPOLICYSETTINGTYPE
    ACCOUNT_GROUPPOLICYSETTINGTYPE
    SECURITYOPTIONS_GROUPPOLICYSETTINGTYPE
    USERRIGHTSASSIGNMENT_GROUPPOLICYSETTINGTYPE
    AUDITSETTING_GROUPPOLICYSETTINGTYPE
    WINDOWSFIREWALLSETTINGS_GROUPPOLICYSETTINGTYPE
    APPLOCKERRULECOLLECTION_GROUPPOLICYSETTINGTYPE
    DATASOURCESSETTINGS_GROUPPOLICYSETTINGTYPE
    DEVICESSETTINGS_GROUPPOLICYSETTINGTYPE
    DRIVEMAPSETTINGS_GROUPPOLICYSETTINGTYPE
    ENVIRONMENTVARIABLES_GROUPPOLICYSETTINGTYPE
    FILESSETTINGS_GROUPPOLICYSETTINGTYPE
    FOLDEROPTIONS_GROUPPOLICYSETTINGTYPE
    FOLDERS_GROUPPOLICYSETTINGTYPE
    INIFILES_GROUPPOLICYSETTINGTYPE
    INTERNETOPTIONS_GROUPPOLICYSETTINGTYPE
    LOCALUSERSANDGROUPS_GROUPPOLICYSETTINGTYPE
    NETWORKOPTIONS_GROUPPOLICYSETTINGTYPE
    NETWORKSHARES_GROUPPOLICYSETTINGTYPE
    NTSERVICES_GROUPPOLICYSETTINGTYPE
    POWEROPTIONS_GROUPPOLICYSETTINGTYPE
    PRINTERS_GROUPPOLICYSETTINGTYPE
    REGIONALOPTIONSSETTINGS_GROUPPOLICYSETTINGTYPE
    REGISTRYSETTINGS_GROUPPOLICYSETTINGTYPE
    SCHEDULEDTASKS_GROUPPOLICYSETTINGTYPE
    SHORTCUTSETTINGS_GROUPPOLICYSETTINGTYPE
    STARTMENUSETTINGS_GROUPPOLICYSETTINGTYPE
)

func (i GroupPolicySettingType) String() string {
    return []string{"UNKNOWN", "POLICY", "ACCOUNT", "SECURITYOPTIONS", "USERRIGHTSASSIGNMENT", "AUDITSETTING", "WINDOWSFIREWALLSETTINGS", "APPLOCKERRULECOLLECTION", "DATASOURCESSETTINGS", "DEVICESSETTINGS", "DRIVEMAPSETTINGS", "ENVIRONMENTVARIABLES", "FILESSETTINGS", "FOLDEROPTIONS", "FOLDERS", "INIFILES", "INTERNETOPTIONS", "LOCALUSERSANDGROUPS", "NETWORKOPTIONS", "NETWORKSHARES", "NTSERVICES", "POWEROPTIONS", "PRINTERS", "REGIONALOPTIONSSETTINGS", "REGISTRYSETTINGS", "SCHEDULEDTASKS", "SHORTCUTSETTINGS", "STARTMENUSETTINGS"}[i]
}
func ParseGroupPolicySettingType(v string) (interface{}, error) {
    result := UNKNOWN_GROUPPOLICYSETTINGTYPE
    switch strings.ToUpper(v) {
        case "UNKNOWN":
            result = UNKNOWN_GROUPPOLICYSETTINGTYPE
        case "POLICY":
            result = POLICY_GROUPPOLICYSETTINGTYPE
        case "ACCOUNT":
            result = ACCOUNT_GROUPPOLICYSETTINGTYPE
        case "SECURITYOPTIONS":
            result = SECURITYOPTIONS_GROUPPOLICYSETTINGTYPE
        case "USERRIGHTSASSIGNMENT":
            result = USERRIGHTSASSIGNMENT_GROUPPOLICYSETTINGTYPE
        case "AUDITSETTING":
            result = AUDITSETTING_GROUPPOLICYSETTINGTYPE
        case "WINDOWSFIREWALLSETTINGS":
            result = WINDOWSFIREWALLSETTINGS_GROUPPOLICYSETTINGTYPE
        case "APPLOCKERRULECOLLECTION":
            result = APPLOCKERRULECOLLECTION_GROUPPOLICYSETTINGTYPE
        case "DATASOURCESSETTINGS":
            result = DATASOURCESSETTINGS_GROUPPOLICYSETTINGTYPE
        case "DEVICESSETTINGS":
            result = DEVICESSETTINGS_GROUPPOLICYSETTINGTYPE
        case "DRIVEMAPSETTINGS":
            result = DRIVEMAPSETTINGS_GROUPPOLICYSETTINGTYPE
        case "ENVIRONMENTVARIABLES":
            result = ENVIRONMENTVARIABLES_GROUPPOLICYSETTINGTYPE
        case "FILESSETTINGS":
            result = FILESSETTINGS_GROUPPOLICYSETTINGTYPE
        case "FOLDEROPTIONS":
            result = FOLDEROPTIONS_GROUPPOLICYSETTINGTYPE
        case "FOLDERS":
            result = FOLDERS_GROUPPOLICYSETTINGTYPE
        case "INIFILES":
            result = INIFILES_GROUPPOLICYSETTINGTYPE
        case "INTERNETOPTIONS":
            result = INTERNETOPTIONS_GROUPPOLICYSETTINGTYPE
        case "LOCALUSERSANDGROUPS":
            result = LOCALUSERSANDGROUPS_GROUPPOLICYSETTINGTYPE
        case "NETWORKOPTIONS":
            result = NETWORKOPTIONS_GROUPPOLICYSETTINGTYPE
        case "NETWORKSHARES":
            result = NETWORKSHARES_GROUPPOLICYSETTINGTYPE
        case "NTSERVICES":
            result = NTSERVICES_GROUPPOLICYSETTINGTYPE
        case "POWEROPTIONS":
            result = POWEROPTIONS_GROUPPOLICYSETTINGTYPE
        case "PRINTERS":
            result = PRINTERS_GROUPPOLICYSETTINGTYPE
        case "REGIONALOPTIONSSETTINGS":
            result = REGIONALOPTIONSSETTINGS_GROUPPOLICYSETTINGTYPE
        case "REGISTRYSETTINGS":
            result = REGISTRYSETTINGS_GROUPPOLICYSETTINGTYPE
        case "SCHEDULEDTASKS":
            result = SCHEDULEDTASKS_GROUPPOLICYSETTINGTYPE
        case "SHORTCUTSETTINGS":
            result = SHORTCUTSETTINGS_GROUPPOLICYSETTINGTYPE
        case "STARTMENUSETTINGS":
            result = STARTMENUSETTINGS_GROUPPOLICYSETTINGTYPE
        default:
            return 0, errors.New("Unknown GroupPolicySettingType value: " + v)
    }
    return &result, nil
}
func SerializeGroupPolicySettingType(values []GroupPolicySettingType) []string {
    result := make([]string, len(values))
    for i, v := range values {
        result[i] = v.String()
    }
    return result
}
