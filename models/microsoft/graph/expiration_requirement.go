package graph
import (
    "strings"
    "errors"
)
// Provides operations to manage the auditLogRoot singleton.
type ExpirationRequirement int

const (
    REMEMBERMULTIFACTORAUTHENTICATIONONTRUSTEDDEVICES_EXPIRATIONREQUIREMENT ExpirationRequirement = iota
    TENANTTOKENLIFETIMEPOLICY_EXPIRATIONREQUIREMENT
    AUDIENCETOKENLIFETIMEPOLICY_EXPIRATIONREQUIREMENT
    SIGNINFREQUENCYPERIODICREAUTHENTICATION_EXPIRATIONREQUIREMENT
    NGCMFA_EXPIRATIONREQUIREMENT
    SIGNINFREQUENCYEVERYTIME_EXPIRATIONREQUIREMENT
    UNKNOWNFUTUREVALUE_EXPIRATIONREQUIREMENT
)

func (i ExpirationRequirement) String() string {
    return []string{"REMEMBERMULTIFACTORAUTHENTICATIONONTRUSTEDDEVICES", "TENANTTOKENLIFETIMEPOLICY", "AUDIENCETOKENLIFETIMEPOLICY", "SIGNINFREQUENCYPERIODICREAUTHENTICATION", "NGCMFA", "SIGNINFREQUENCYEVERYTIME", "UNKNOWNFUTUREVALUE"}[i]
}
func ParseExpirationRequirement(v string) (interface{}, error) {
    result := REMEMBERMULTIFACTORAUTHENTICATIONONTRUSTEDDEVICES_EXPIRATIONREQUIREMENT
    switch strings.ToUpper(v) {
        case "REMEMBERMULTIFACTORAUTHENTICATIONONTRUSTEDDEVICES":
            result = REMEMBERMULTIFACTORAUTHENTICATIONONTRUSTEDDEVICES_EXPIRATIONREQUIREMENT
        case "TENANTTOKENLIFETIMEPOLICY":
            result = TENANTTOKENLIFETIMEPOLICY_EXPIRATIONREQUIREMENT
        case "AUDIENCETOKENLIFETIMEPOLICY":
            result = AUDIENCETOKENLIFETIMEPOLICY_EXPIRATIONREQUIREMENT
        case "SIGNINFREQUENCYPERIODICREAUTHENTICATION":
            result = SIGNINFREQUENCYPERIODICREAUTHENTICATION_EXPIRATIONREQUIREMENT
        case "NGCMFA":
            result = NGCMFA_EXPIRATIONREQUIREMENT
        case "SIGNINFREQUENCYEVERYTIME":
            result = SIGNINFREQUENCYEVERYTIME_EXPIRATIONREQUIREMENT
        case "UNKNOWNFUTUREVALUE":
            result = UNKNOWNFUTUREVALUE_EXPIRATIONREQUIREMENT
        default:
            return 0, errors.New("Unknown ExpirationRequirement value: " + v)
    }
    return &result, nil
}
func SerializeExpirationRequirement(values []ExpirationRequirement) []string {
    result := make([]string, len(values))
    for i, v := range values {
        result[i] = v.String()
    }
    return result
}
