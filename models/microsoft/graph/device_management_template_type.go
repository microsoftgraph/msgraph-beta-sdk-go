package graph
import (
    "strings"
    "errors"
)
// Provides operations to manage the deviceManagement singleton.
type DeviceManagementTemplateType int

const (
    SECURITYBASELINE_DEVICEMANAGEMENTTEMPLATETYPE DeviceManagementTemplateType = iota
    SPECIALIZEDDEVICES_DEVICEMANAGEMENTTEMPLATETYPE
    ADVANCEDTHREATPROTECTIONSECURITYBASELINE_DEVICEMANAGEMENTTEMPLATETYPE
    DEVICECONFIGURATION_DEVICEMANAGEMENTTEMPLATETYPE
    CUSTOM_DEVICEMANAGEMENTTEMPLATETYPE
    SECURITYTEMPLATE_DEVICEMANAGEMENTTEMPLATETYPE
    MICROSOFTEDGESECURITYBASELINE_DEVICEMANAGEMENTTEMPLATETYPE
    MICROSOFTOFFICE365PROPLUSSECURITYBASELINE_DEVICEMANAGEMENTTEMPLATETYPE
    DEVICECOMPLIANCE_DEVICEMANAGEMENTTEMPLATETYPE
    DEVICECONFIGURATIONFOROFFICE365_DEVICEMANAGEMENTTEMPLATETYPE
    CLOUDPC_DEVICEMANAGEMENTTEMPLATETYPE
    FIREWALLSHAREDSETTINGS_DEVICEMANAGEMENTTEMPLATETYPE
)

func (i DeviceManagementTemplateType) String() string {
    return []string{"SECURITYBASELINE", "SPECIALIZEDDEVICES", "ADVANCEDTHREATPROTECTIONSECURITYBASELINE", "DEVICECONFIGURATION", "CUSTOM", "SECURITYTEMPLATE", "MICROSOFTEDGESECURITYBASELINE", "MICROSOFTOFFICE365PROPLUSSECURITYBASELINE", "DEVICECOMPLIANCE", "DEVICECONFIGURATIONFOROFFICE365", "CLOUDPC", "FIREWALLSHAREDSETTINGS"}[i]
}
func ParseDeviceManagementTemplateType(v string) (interface{}, error) {
    result := SECURITYBASELINE_DEVICEMANAGEMENTTEMPLATETYPE
    switch strings.ToUpper(v) {
        case "SECURITYBASELINE":
            result = SECURITYBASELINE_DEVICEMANAGEMENTTEMPLATETYPE
        case "SPECIALIZEDDEVICES":
            result = SPECIALIZEDDEVICES_DEVICEMANAGEMENTTEMPLATETYPE
        case "ADVANCEDTHREATPROTECTIONSECURITYBASELINE":
            result = ADVANCEDTHREATPROTECTIONSECURITYBASELINE_DEVICEMANAGEMENTTEMPLATETYPE
        case "DEVICECONFIGURATION":
            result = DEVICECONFIGURATION_DEVICEMANAGEMENTTEMPLATETYPE
        case "CUSTOM":
            result = CUSTOM_DEVICEMANAGEMENTTEMPLATETYPE
        case "SECURITYTEMPLATE":
            result = SECURITYTEMPLATE_DEVICEMANAGEMENTTEMPLATETYPE
        case "MICROSOFTEDGESECURITYBASELINE":
            result = MICROSOFTEDGESECURITYBASELINE_DEVICEMANAGEMENTTEMPLATETYPE
        case "MICROSOFTOFFICE365PROPLUSSECURITYBASELINE":
            result = MICROSOFTOFFICE365PROPLUSSECURITYBASELINE_DEVICEMANAGEMENTTEMPLATETYPE
        case "DEVICECOMPLIANCE":
            result = DEVICECOMPLIANCE_DEVICEMANAGEMENTTEMPLATETYPE
        case "DEVICECONFIGURATIONFOROFFICE365":
            result = DEVICECONFIGURATIONFOROFFICE365_DEVICEMANAGEMENTTEMPLATETYPE
        case "CLOUDPC":
            result = CLOUDPC_DEVICEMANAGEMENTTEMPLATETYPE
        case "FIREWALLSHAREDSETTINGS":
            result = FIREWALLSHAREDSETTINGS_DEVICEMANAGEMENTTEMPLATETYPE
        default:
            return 0, errors.New("Unknown DeviceManagementTemplateType value: " + v)
    }
    return &result, nil
}
func SerializeDeviceManagementTemplateType(values []DeviceManagementTemplateType) []string {
    result := make([]string, len(values))
    for i, v := range values {
        result[i] = v.String()
    }
    return result
}
