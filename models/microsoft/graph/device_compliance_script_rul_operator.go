package graph
import (
    "strings"
    "errors"
)
// Provides operations to call the validateComplianceScript method.
type DeviceComplianceScriptRulOperator int

const (
    NONE_DEVICECOMPLIANCESCRIPTRULOPERATOR DeviceComplianceScriptRulOperator = iota
    AND_DEVICECOMPLIANCESCRIPTRULOPERATOR
    OR_DEVICECOMPLIANCESCRIPTRULOPERATOR
    ISEQUALS_DEVICECOMPLIANCESCRIPTRULOPERATOR
    NOTEQUALS_DEVICECOMPLIANCESCRIPTRULOPERATOR
    GREATERTHAN_DEVICECOMPLIANCESCRIPTRULOPERATOR
    LESSTHAN_DEVICECOMPLIANCESCRIPTRULOPERATOR
    BETWEEN_DEVICECOMPLIANCESCRIPTRULOPERATOR
    NOTBETWEEN_DEVICECOMPLIANCESCRIPTRULOPERATOR
    GREATEREQUALS_DEVICECOMPLIANCESCRIPTRULOPERATOR
    LESSEQUALS_DEVICECOMPLIANCESCRIPTRULOPERATOR
    DAYTIMEBETWEEN_DEVICECOMPLIANCESCRIPTRULOPERATOR
    BEGINSWITH_DEVICECOMPLIANCESCRIPTRULOPERATOR
    NOTBEGINSWITH_DEVICECOMPLIANCESCRIPTRULOPERATOR
    ENDSWITH_DEVICECOMPLIANCESCRIPTRULOPERATOR
    NOTENDSWITH_DEVICECOMPLIANCESCRIPTRULOPERATOR
    CONTAINS_DEVICECOMPLIANCESCRIPTRULOPERATOR
    NOTCONTAINS_DEVICECOMPLIANCESCRIPTRULOPERATOR
    ALLOF_DEVICECOMPLIANCESCRIPTRULOPERATOR
    ONEOF_DEVICECOMPLIANCESCRIPTRULOPERATOR
    NONEOF_DEVICECOMPLIANCESCRIPTRULOPERATOR
    SETEQUALS_DEVICECOMPLIANCESCRIPTRULOPERATOR
    ORDEREDSETEQUALS_DEVICECOMPLIANCESCRIPTRULOPERATOR
    SUBSETOF_DEVICECOMPLIANCESCRIPTRULOPERATOR
    EXCLUDESALL_DEVICECOMPLIANCESCRIPTRULOPERATOR
)

func (i DeviceComplianceScriptRulOperator) String() string {
    return []string{"NONE", "AND", "OR", "ISEQUALS", "NOTEQUALS", "GREATERTHAN", "LESSTHAN", "BETWEEN", "NOTBETWEEN", "GREATEREQUALS", "LESSEQUALS", "DAYTIMEBETWEEN", "BEGINSWITH", "NOTBEGINSWITH", "ENDSWITH", "NOTENDSWITH", "CONTAINS", "NOTCONTAINS", "ALLOF", "ONEOF", "NONEOF", "SETEQUALS", "ORDEREDSETEQUALS", "SUBSETOF", "EXCLUDESALL"}[i]
}
func ParseDeviceComplianceScriptRulOperator(v string) (interface{}, error) {
    result := NONE_DEVICECOMPLIANCESCRIPTRULOPERATOR
    switch strings.ToUpper(v) {
        case "NONE":
            result = NONE_DEVICECOMPLIANCESCRIPTRULOPERATOR
        case "AND":
            result = AND_DEVICECOMPLIANCESCRIPTRULOPERATOR
        case "OR":
            result = OR_DEVICECOMPLIANCESCRIPTRULOPERATOR
        case "ISEQUALS":
            result = ISEQUALS_DEVICECOMPLIANCESCRIPTRULOPERATOR
        case "NOTEQUALS":
            result = NOTEQUALS_DEVICECOMPLIANCESCRIPTRULOPERATOR
        case "GREATERTHAN":
            result = GREATERTHAN_DEVICECOMPLIANCESCRIPTRULOPERATOR
        case "LESSTHAN":
            result = LESSTHAN_DEVICECOMPLIANCESCRIPTRULOPERATOR
        case "BETWEEN":
            result = BETWEEN_DEVICECOMPLIANCESCRIPTRULOPERATOR
        case "NOTBETWEEN":
            result = NOTBETWEEN_DEVICECOMPLIANCESCRIPTRULOPERATOR
        case "GREATEREQUALS":
            result = GREATEREQUALS_DEVICECOMPLIANCESCRIPTRULOPERATOR
        case "LESSEQUALS":
            result = LESSEQUALS_DEVICECOMPLIANCESCRIPTRULOPERATOR
        case "DAYTIMEBETWEEN":
            result = DAYTIMEBETWEEN_DEVICECOMPLIANCESCRIPTRULOPERATOR
        case "BEGINSWITH":
            result = BEGINSWITH_DEVICECOMPLIANCESCRIPTRULOPERATOR
        case "NOTBEGINSWITH":
            result = NOTBEGINSWITH_DEVICECOMPLIANCESCRIPTRULOPERATOR
        case "ENDSWITH":
            result = ENDSWITH_DEVICECOMPLIANCESCRIPTRULOPERATOR
        case "NOTENDSWITH":
            result = NOTENDSWITH_DEVICECOMPLIANCESCRIPTRULOPERATOR
        case "CONTAINS":
            result = CONTAINS_DEVICECOMPLIANCESCRIPTRULOPERATOR
        case "NOTCONTAINS":
            result = NOTCONTAINS_DEVICECOMPLIANCESCRIPTRULOPERATOR
        case "ALLOF":
            result = ALLOF_DEVICECOMPLIANCESCRIPTRULOPERATOR
        case "ONEOF":
            result = ONEOF_DEVICECOMPLIANCESCRIPTRULOPERATOR
        case "NONEOF":
            result = NONEOF_DEVICECOMPLIANCESCRIPTRULOPERATOR
        case "SETEQUALS":
            result = SETEQUALS_DEVICECOMPLIANCESCRIPTRULOPERATOR
        case "ORDEREDSETEQUALS":
            result = ORDEREDSETEQUALS_DEVICECOMPLIANCESCRIPTRULOPERATOR
        case "SUBSETOF":
            result = SUBSETOF_DEVICECOMPLIANCESCRIPTRULOPERATOR
        case "EXCLUDESALL":
            result = EXCLUDESALL_DEVICECOMPLIANCESCRIPTRULOPERATOR
        default:
            return 0, errors.New("Unknown DeviceComplianceScriptRulOperator value: " + v)
    }
    return &result, nil
}
func SerializeDeviceComplianceScriptRulOperator(values []DeviceComplianceScriptRulOperator) []string {
    result := make([]string, len(values))
    for i, v := range values {
        result[i] = v.String()
    }
    return result
}
