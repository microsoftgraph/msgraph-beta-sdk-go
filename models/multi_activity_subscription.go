// Code generated by Microsoft Kiota - DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package models

import (
    i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91 "github.com/microsoft/kiota-abstractions-go/serialization"
)

type MultiActivitySubscription struct {
    Entity
}
// NewMultiActivitySubscription instantiates a new MultiActivitySubscription and sets the default values.
func NewMultiActivitySubscription()(*MultiActivitySubscription) {
    m := &MultiActivitySubscription{
        Entity: *NewEntity(),
    }
    return m
}
// CreateMultiActivitySubscriptionFromDiscriminatorValue creates a new instance of the appropriate class based on discriminator value
// returns a Parsable when successful
func CreateMultiActivitySubscriptionFromDiscriminatorValue(parseNode i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode)(i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.Parsable, error) {
    return NewMultiActivitySubscription(), nil
}
// GetActivities gets the activities property value. The activities property
// returns a SubscriptionActivitiesable when successful
func (m *MultiActivitySubscription) GetActivities()(SubscriptionActivitiesable) {
    val, err := m.GetBackingStore().Get("activities")
    if err != nil {
        panic(err)
    }
    if val != nil {
        return val.(SubscriptionActivitiesable)
    }
    return nil
}
// GetCallbackUrl gets the callbackUrl property value. The callbackUrl property
// returns a *string when successful
func (m *MultiActivitySubscription) GetCallbackUrl()(*string) {
    val, err := m.GetBackingStore().Get("callbackUrl")
    if err != nil {
        panic(err)
    }
    if val != nil {
        return val.(*string)
    }
    return nil
}
// GetChatInfo gets the chatInfo property value. The chatInfo property
// returns a ChatInfoable when successful
func (m *MultiActivitySubscription) GetChatInfo()(ChatInfoable) {
    val, err := m.GetBackingStore().Get("chatInfo")
    if err != nil {
        panic(err)
    }
    if val != nil {
        return val.(ChatInfoable)
    }
    return nil
}
// GetFieldDeserializers the deserialization information for the current model
// returns a map[string]func(i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode)(error) when successful
func (m *MultiActivitySubscription) GetFieldDeserializers()(map[string]func(i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode)(error)) {
    res := m.Entity.GetFieldDeserializers()
    res["activities"] = func (n i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode) error {
        val, err := n.GetObjectValue(CreateSubscriptionActivitiesFromDiscriminatorValue)
        if err != nil {
            return err
        }
        if val != nil {
            m.SetActivities(val.(SubscriptionActivitiesable))
        }
        return nil
    }
    res["callbackUrl"] = func (n i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode) error {
        val, err := n.GetStringValue()
        if err != nil {
            return err
        }
        if val != nil {
            m.SetCallbackUrl(val)
        }
        return nil
    }
    res["chatInfo"] = func (n i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode) error {
        val, err := n.GetObjectValue(CreateChatInfoFromDiscriminatorValue)
        if err != nil {
            return err
        }
        if val != nil {
            m.SetChatInfo(val.(ChatInfoable))
        }
        return nil
    }
    res["meetingInfo"] = func (n i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode) error {
        val, err := n.GetObjectValue(CreateMeetingInfoFromDiscriminatorValue)
        if err != nil {
            return err
        }
        if val != nil {
            m.SetMeetingInfo(val.(MeetingInfoable))
        }
        return nil
    }
    res["userId"] = func (n i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode) error {
        val, err := n.GetStringValue()
        if err != nil {
            return err
        }
        if val != nil {
            m.SetUserId(val)
        }
        return nil
    }
    return res
}
// GetMeetingInfo gets the meetingInfo property value. The meetingInfo property
// returns a MeetingInfoable when successful
func (m *MultiActivitySubscription) GetMeetingInfo()(MeetingInfoable) {
    val, err := m.GetBackingStore().Get("meetingInfo")
    if err != nil {
        panic(err)
    }
    if val != nil {
        return val.(MeetingInfoable)
    }
    return nil
}
// GetUserId gets the userId property value. The userId property
// returns a *string when successful
func (m *MultiActivitySubscription) GetUserId()(*string) {
    val, err := m.GetBackingStore().Get("userId")
    if err != nil {
        panic(err)
    }
    if val != nil {
        return val.(*string)
    }
    return nil
}
// Serialize serializes information the current object
func (m *MultiActivitySubscription) Serialize(writer i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.SerializationWriter)(error) {
    err := m.Entity.Serialize(writer)
    if err != nil {
        return err
    }
    {
        err = writer.WriteObjectValue("activities", m.GetActivities())
        if err != nil {
            return err
        }
    }
    {
        err = writer.WriteStringValue("callbackUrl", m.GetCallbackUrl())
        if err != nil {
            return err
        }
    }
    {
        err = writer.WriteObjectValue("chatInfo", m.GetChatInfo())
        if err != nil {
            return err
        }
    }
    {
        err = writer.WriteObjectValue("meetingInfo", m.GetMeetingInfo())
        if err != nil {
            return err
        }
    }
    {
        err = writer.WriteStringValue("userId", m.GetUserId())
        if err != nil {
            return err
        }
    }
    return nil
}
// SetActivities sets the activities property value. The activities property
func (m *MultiActivitySubscription) SetActivities(value SubscriptionActivitiesable)() {
    err := m.GetBackingStore().Set("activities", value)
    if err != nil {
        panic(err)
    }
}
// SetCallbackUrl sets the callbackUrl property value. The callbackUrl property
func (m *MultiActivitySubscription) SetCallbackUrl(value *string)() {
    err := m.GetBackingStore().Set("callbackUrl", value)
    if err != nil {
        panic(err)
    }
}
// SetChatInfo sets the chatInfo property value. The chatInfo property
func (m *MultiActivitySubscription) SetChatInfo(value ChatInfoable)() {
    err := m.GetBackingStore().Set("chatInfo", value)
    if err != nil {
        panic(err)
    }
}
// SetMeetingInfo sets the meetingInfo property value. The meetingInfo property
func (m *MultiActivitySubscription) SetMeetingInfo(value MeetingInfoable)() {
    err := m.GetBackingStore().Set("meetingInfo", value)
    if err != nil {
        panic(err)
    }
}
// SetUserId sets the userId property value. The userId property
func (m *MultiActivitySubscription) SetUserId(value *string)() {
    err := m.GetBackingStore().Set("userId", value)
    if err != nil {
        panic(err)
    }
}
type MultiActivitySubscriptionable interface {
    Entityable
    i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.Parsable
    GetActivities()(SubscriptionActivitiesable)
    GetCallbackUrl()(*string)
    GetChatInfo()(ChatInfoable)
    GetMeetingInfo()(MeetingInfoable)
    GetUserId()(*string)
    SetActivities(value SubscriptionActivitiesable)()
    SetCallbackUrl(value *string)()
    SetChatInfo(value ChatInfoable)()
    SetMeetingInfo(value MeetingInfoable)()
    SetUserId(value *string)()
}
