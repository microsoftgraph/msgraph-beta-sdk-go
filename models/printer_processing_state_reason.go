package models
import (
    "strings"
    "errors"
)
// Provides operations to manage the deviceManagement singleton.
type PrinterProcessingStateReason int

const (
    PAUSED_PRINTERPROCESSINGSTATEREASON PrinterProcessingStateReason = iota
    MEDIAJAM_PRINTERPROCESSINGSTATEREASON
    MEDIANEEDED_PRINTERPROCESSINGSTATEREASON
    MEDIALOW_PRINTERPROCESSINGSTATEREASON
    MEDIAEMPTY_PRINTERPROCESSINGSTATEREASON
    COVEROPEN_PRINTERPROCESSINGSTATEREASON
    INTERLOCKOPEN_PRINTERPROCESSINGSTATEREASON
    OUTPUTTRAYMISSING_PRINTERPROCESSINGSTATEREASON
    OUTPUTAREAFULL_PRINTERPROCESSINGSTATEREASON
    MARKERSUPPLYLOW_PRINTERPROCESSINGSTATEREASON
    MARKERSUPPLYEMPTY_PRINTERPROCESSINGSTATEREASON
    INPUTTRAYMISSING_PRINTERPROCESSINGSTATEREASON
    OUTPUTAREAALMOSTFULL_PRINTERPROCESSINGSTATEREASON
    MARKERWASTEALMOSTFULL_PRINTERPROCESSINGSTATEREASON
    MARKERWASTEFULL_PRINTERPROCESSINGSTATEREASON
    FUSEROVERTEMP_PRINTERPROCESSINGSTATEREASON
    FUSERUNDERTEMP_PRINTERPROCESSINGSTATEREASON
    OTHER_PRINTERPROCESSINGSTATEREASON
    NONE_PRINTERPROCESSINGSTATEREASON
    MOVINGTOPAUSED_PRINTERPROCESSINGSTATEREASON
    SHUTDOWN_PRINTERPROCESSINGSTATEREASON
    CONNECTINGTODEVICE_PRINTERPROCESSINGSTATEREASON
    TIMEDOUT_PRINTERPROCESSINGSTATEREASON
    STOPPING_PRINTERPROCESSINGSTATEREASON
    STOPPEDPARTIALLY_PRINTERPROCESSINGSTATEREASON
    TONERLOW_PRINTERPROCESSINGSTATEREASON
    TONEREMPTY_PRINTERPROCESSINGSTATEREASON
    SPOOLAREAFULL_PRINTERPROCESSINGSTATEREASON
    DOOROPEN_PRINTERPROCESSINGSTATEREASON
    OPTICALPHOTOCONDUCTORNEARENDOFLIFE_PRINTERPROCESSINGSTATEREASON
    OPTICALPHOTOCONDUCTORLIFEOVER_PRINTERPROCESSINGSTATEREASON
    DEVELOPERLOW_PRINTERPROCESSINGSTATEREASON
    DEVELOPEREMPTY_PRINTERPROCESSINGSTATEREASON
    INTERPRETERRESOURCEUNAVAILABLE_PRINTERPROCESSINGSTATEREASON
    UNKNOWNFUTUREVALUE_PRINTERPROCESSINGSTATEREASON
)

func (i PrinterProcessingStateReason) String() string {
    return []string{"PAUSED", "MEDIAJAM", "MEDIANEEDED", "MEDIALOW", "MEDIAEMPTY", "COVEROPEN", "INTERLOCKOPEN", "OUTPUTTRAYMISSING", "OUTPUTAREAFULL", "MARKERSUPPLYLOW", "MARKERSUPPLYEMPTY", "INPUTTRAYMISSING", "OUTPUTAREAALMOSTFULL", "MARKERWASTEALMOSTFULL", "MARKERWASTEFULL", "FUSEROVERTEMP", "FUSERUNDERTEMP", "OTHER", "NONE", "MOVINGTOPAUSED", "SHUTDOWN", "CONNECTINGTODEVICE", "TIMEDOUT", "STOPPING", "STOPPEDPARTIALLY", "TONERLOW", "TONEREMPTY", "SPOOLAREAFULL", "DOOROPEN", "OPTICALPHOTOCONDUCTORNEARENDOFLIFE", "OPTICALPHOTOCONDUCTORLIFEOVER", "DEVELOPERLOW", "DEVELOPEREMPTY", "INTERPRETERRESOURCEUNAVAILABLE", "UNKNOWNFUTUREVALUE"}[i]
}
func ParsePrinterProcessingStateReason(v string) (interface{}, error) {
    result := PAUSED_PRINTERPROCESSINGSTATEREASON
    switch strings.ToUpper(v) {
        case "PAUSED":
            result = PAUSED_PRINTERPROCESSINGSTATEREASON
        case "MEDIAJAM":
            result = MEDIAJAM_PRINTERPROCESSINGSTATEREASON
        case "MEDIANEEDED":
            result = MEDIANEEDED_PRINTERPROCESSINGSTATEREASON
        case "MEDIALOW":
            result = MEDIALOW_PRINTERPROCESSINGSTATEREASON
        case "MEDIAEMPTY":
            result = MEDIAEMPTY_PRINTERPROCESSINGSTATEREASON
        case "COVEROPEN":
            result = COVEROPEN_PRINTERPROCESSINGSTATEREASON
        case "INTERLOCKOPEN":
            result = INTERLOCKOPEN_PRINTERPROCESSINGSTATEREASON
        case "OUTPUTTRAYMISSING":
            result = OUTPUTTRAYMISSING_PRINTERPROCESSINGSTATEREASON
        case "OUTPUTAREAFULL":
            result = OUTPUTAREAFULL_PRINTERPROCESSINGSTATEREASON
        case "MARKERSUPPLYLOW":
            result = MARKERSUPPLYLOW_PRINTERPROCESSINGSTATEREASON
        case "MARKERSUPPLYEMPTY":
            result = MARKERSUPPLYEMPTY_PRINTERPROCESSINGSTATEREASON
        case "INPUTTRAYMISSING":
            result = INPUTTRAYMISSING_PRINTERPROCESSINGSTATEREASON
        case "OUTPUTAREAALMOSTFULL":
            result = OUTPUTAREAALMOSTFULL_PRINTERPROCESSINGSTATEREASON
        case "MARKERWASTEALMOSTFULL":
            result = MARKERWASTEALMOSTFULL_PRINTERPROCESSINGSTATEREASON
        case "MARKERWASTEFULL":
            result = MARKERWASTEFULL_PRINTERPROCESSINGSTATEREASON
        case "FUSEROVERTEMP":
            result = FUSEROVERTEMP_PRINTERPROCESSINGSTATEREASON
        case "FUSERUNDERTEMP":
            result = FUSERUNDERTEMP_PRINTERPROCESSINGSTATEREASON
        case "OTHER":
            result = OTHER_PRINTERPROCESSINGSTATEREASON
        case "NONE":
            result = NONE_PRINTERPROCESSINGSTATEREASON
        case "MOVINGTOPAUSED":
            result = MOVINGTOPAUSED_PRINTERPROCESSINGSTATEREASON
        case "SHUTDOWN":
            result = SHUTDOWN_PRINTERPROCESSINGSTATEREASON
        case "CONNECTINGTODEVICE":
            result = CONNECTINGTODEVICE_PRINTERPROCESSINGSTATEREASON
        case "TIMEDOUT":
            result = TIMEDOUT_PRINTERPROCESSINGSTATEREASON
        case "STOPPING":
            result = STOPPING_PRINTERPROCESSINGSTATEREASON
        case "STOPPEDPARTIALLY":
            result = STOPPEDPARTIALLY_PRINTERPROCESSINGSTATEREASON
        case "TONERLOW":
            result = TONERLOW_PRINTERPROCESSINGSTATEREASON
        case "TONEREMPTY":
            result = TONEREMPTY_PRINTERPROCESSINGSTATEREASON
        case "SPOOLAREAFULL":
            result = SPOOLAREAFULL_PRINTERPROCESSINGSTATEREASON
        case "DOOROPEN":
            result = DOOROPEN_PRINTERPROCESSINGSTATEREASON
        case "OPTICALPHOTOCONDUCTORNEARENDOFLIFE":
            result = OPTICALPHOTOCONDUCTORNEARENDOFLIFE_PRINTERPROCESSINGSTATEREASON
        case "OPTICALPHOTOCONDUCTORLIFEOVER":
            result = OPTICALPHOTOCONDUCTORLIFEOVER_PRINTERPROCESSINGSTATEREASON
        case "DEVELOPERLOW":
            result = DEVELOPERLOW_PRINTERPROCESSINGSTATEREASON
        case "DEVELOPEREMPTY":
            result = DEVELOPEREMPTY_PRINTERPROCESSINGSTATEREASON
        case "INTERPRETERRESOURCEUNAVAILABLE":
            result = INTERPRETERRESOURCEUNAVAILABLE_PRINTERPROCESSINGSTATEREASON
        case "UNKNOWNFUTUREVALUE":
            result = UNKNOWNFUTUREVALUE_PRINTERPROCESSINGSTATEREASON
        default:
            return 0, errors.New("Unknown PrinterProcessingStateReason value: " + v)
    }
    return &result, nil
}
func SerializePrinterProcessingStateReason(values []PrinterProcessingStateReason) []string {
    result := make([]string, len(values))
    for i, v := range values {
        result[i] = v.String()
    }
    return result
}
