// Code generated by Microsoft Kiota - DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package models

import (
    i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91 "github.com/microsoft/kiota-abstractions-go/serialization"
)

type AssignedPlaceMode struct {
    PlaceMode
}
// NewAssignedPlaceMode instantiates a new AssignedPlaceMode and sets the default values.
func NewAssignedPlaceMode()(*AssignedPlaceMode) {
    m := &AssignedPlaceMode{
        PlaceMode: *NewPlaceMode(),
    }
    odataTypeValue := "#microsoft.graph.assignedPlaceMode"
    m.SetOdataType(&odataTypeValue)
    return m
}
// CreateAssignedPlaceModeFromDiscriminatorValue creates a new instance of the appropriate class based on discriminator value
// returns a Parsable when successful
func CreateAssignedPlaceModeFromDiscriminatorValue(parseNode i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode)(i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.Parsable, error) {
    return NewAssignedPlaceMode(), nil
}
// GetAssignedUserEmailAddress gets the assignedUserEmailAddress property value. The email address of the user to whom the desk is assigned.
// returns a *string when successful
func (m *AssignedPlaceMode) GetAssignedUserEmailAddress()(*string) {
    val, err := m.GetBackingStore().Get("assignedUserEmailAddress")
    if err != nil {
        panic(err)
    }
    if val != nil {
        return val.(*string)
    }
    return nil
}
// GetAssignedUserId gets the assignedUserId property value. The user ID of the user to whom the desk is assigned.
// returns a *string when successful
func (m *AssignedPlaceMode) GetAssignedUserId()(*string) {
    val, err := m.GetBackingStore().Get("assignedUserId")
    if err != nil {
        panic(err)
    }
    if val != nil {
        return val.(*string)
    }
    return nil
}
// GetFieldDeserializers the deserialization information for the current model
// returns a map[string]func(i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode)(error) when successful
func (m *AssignedPlaceMode) GetFieldDeserializers()(map[string]func(i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode)(error)) {
    res := m.PlaceMode.GetFieldDeserializers()
    res["assignedUserEmailAddress"] = func (n i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode) error {
        val, err := n.GetStringValue()
        if err != nil {
            return err
        }
        if val != nil {
            m.SetAssignedUserEmailAddress(val)
        }
        return nil
    }
    res["assignedUserId"] = func (n i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode) error {
        val, err := n.GetStringValue()
        if err != nil {
            return err
        }
        if val != nil {
            m.SetAssignedUserId(val)
        }
        return nil
    }
    return res
}
// Serialize serializes information the current object
func (m *AssignedPlaceMode) Serialize(writer i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.SerializationWriter)(error) {
    err := m.PlaceMode.Serialize(writer)
    if err != nil {
        return err
    }
    {
        err = writer.WriteStringValue("assignedUserEmailAddress", m.GetAssignedUserEmailAddress())
        if err != nil {
            return err
        }
    }
    {
        err = writer.WriteStringValue("assignedUserId", m.GetAssignedUserId())
        if err != nil {
            return err
        }
    }
    return nil
}
// SetAssignedUserEmailAddress sets the assignedUserEmailAddress property value. The email address of the user to whom the desk is assigned.
func (m *AssignedPlaceMode) SetAssignedUserEmailAddress(value *string)() {
    err := m.GetBackingStore().Set("assignedUserEmailAddress", value)
    if err != nil {
        panic(err)
    }
}
// SetAssignedUserId sets the assignedUserId property value. The user ID of the user to whom the desk is assigned.
func (m *AssignedPlaceMode) SetAssignedUserId(value *string)() {
    err := m.GetBackingStore().Set("assignedUserId", value)
    if err != nil {
        panic(err)
    }
}
type AssignedPlaceModeable interface {
    i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.Parsable
    PlaceModeable
    GetAssignedUserEmailAddress()(*string)
    GetAssignedUserId()(*string)
    SetAssignedUserEmailAddress(value *string)()
    SetAssignedUserId(value *string)()
}
