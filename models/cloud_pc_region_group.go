// Code generated by Microsoft Kiota - DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package models
type CloudPcRegionGroup int

const (
    DEFAULT_CLOUDPCREGIONGROUP CloudPcRegionGroup = iota
    AUSTRALIA_CLOUDPCREGIONGROUP
    CANADA_CLOUDPCREGIONGROUP
    USCENTRAL_CLOUDPCREGIONGROUP
    USEAST_CLOUDPCREGIONGROUP
    USWEST_CLOUDPCREGIONGROUP
    FRANCE_CLOUDPCREGIONGROUP
    GERMANY_CLOUDPCREGIONGROUP
    EUROPEUNION_CLOUDPCREGIONGROUP
    UNITEDKINGDOM_CLOUDPCREGIONGROUP
    JAPAN_CLOUDPCREGIONGROUP
    ASIA_CLOUDPCREGIONGROUP
    INDIA_CLOUDPCREGIONGROUP
    SOUTHAMERICA_CLOUDPCREGIONGROUP
    EUAP_CLOUDPCREGIONGROUP
    USGOVERNMENT_CLOUDPCREGIONGROUP
    USGOVERNMENTDOD_CLOUDPCREGIONGROUP
    UNKNOWNFUTUREVALUE_CLOUDPCREGIONGROUP
    NORWAY_CLOUDPCREGIONGROUP
    SWITZERLAND_CLOUDPCREGIONGROUP
    SOUTHKOREA_CLOUDPCREGIONGROUP
    MIDDLEEAST_CLOUDPCREGIONGROUP
    MEXICO_CLOUDPCREGIONGROUP
    AUSTRALASIA_CLOUDPCREGIONGROUP
    EUROPE_CLOUDPCREGIONGROUP
    SINGAPORE_CLOUDPCREGIONGROUP
    HONGKONG_CLOUDPCREGIONGROUP
    IRELAND_CLOUDPCREGIONGROUP
    SWEDEN_CLOUDPCREGIONGROUP
    POLAND_CLOUDPCREGIONGROUP
    ITALY_CLOUDPCREGIONGROUP
    SPAIN_CLOUDPCREGIONGROUP
    NETHERLANDS_CLOUDPCREGIONGROUP
    BRAZIL_CLOUDPCREGIONGROUP
    ISRAEL_CLOUDPCREGIONGROUP
    AUTOMATIC_CLOUDPCREGIONGROUP
    INDONESIA_CLOUDPCREGIONGROUP
    TAIWAN_CLOUDPCREGIONGROUP
    MALAYSIA_CLOUDPCREGIONGROUP
    NEWZEALAND_CLOUDPCREGIONGROUP
    AUSTRIA_CLOUDPCREGIONGROUP
    DENMARK_CLOUDPCREGIONGROUP
    BELGIUM_CLOUDPCREGIONGROUP
    KENYA_CLOUDPCREGIONGROUP
)

func (i CloudPcRegionGroup) String() string {
    return []string{"default", "australia", "canada", "usCentral", "usEast", "usWest", "france", "germany", "europeUnion", "unitedKingdom", "japan", "asia", "india", "southAmerica", "euap", "usGovernment", "usGovernmentDOD", "unknownFutureValue", "norway", "switzerland", "southKorea", "middleEast", "mexico", "australasia", "europe", "singapore", "hongKong", "ireland", "sweden", "poland", "italy", "spain", "netherlands", "brazil", "israel", "automatic", "indonesia", "taiwan", "malaysia", "newZealand", "austria", "denmark", "belgium", "kenya"}[i]
}
func ParseCloudPcRegionGroup(v string) (any, error) {
    result := DEFAULT_CLOUDPCREGIONGROUP
    switch v {
        case "default":
            result = DEFAULT_CLOUDPCREGIONGROUP
        case "australia":
            result = AUSTRALIA_CLOUDPCREGIONGROUP
        case "canada":
            result = CANADA_CLOUDPCREGIONGROUP
        case "usCentral":
            result = USCENTRAL_CLOUDPCREGIONGROUP
        case "usEast":
            result = USEAST_CLOUDPCREGIONGROUP
        case "usWest":
            result = USWEST_CLOUDPCREGIONGROUP
        case "france":
            result = FRANCE_CLOUDPCREGIONGROUP
        case "germany":
            result = GERMANY_CLOUDPCREGIONGROUP
        case "europeUnion":
            result = EUROPEUNION_CLOUDPCREGIONGROUP
        case "unitedKingdom":
            result = UNITEDKINGDOM_CLOUDPCREGIONGROUP
        case "japan":
            result = JAPAN_CLOUDPCREGIONGROUP
        case "asia":
            result = ASIA_CLOUDPCREGIONGROUP
        case "india":
            result = INDIA_CLOUDPCREGIONGROUP
        case "southAmerica":
            result = SOUTHAMERICA_CLOUDPCREGIONGROUP
        case "euap":
            result = EUAP_CLOUDPCREGIONGROUP
        case "usGovernment":
            result = USGOVERNMENT_CLOUDPCREGIONGROUP
        case "usGovernmentDOD":
            result = USGOVERNMENTDOD_CLOUDPCREGIONGROUP
        case "unknownFutureValue":
            result = UNKNOWNFUTUREVALUE_CLOUDPCREGIONGROUP
        case "norway":
            result = NORWAY_CLOUDPCREGIONGROUP
        case "switzerland":
            result = SWITZERLAND_CLOUDPCREGIONGROUP
        case "southKorea":
            result = SOUTHKOREA_CLOUDPCREGIONGROUP
        case "middleEast":
            result = MIDDLEEAST_CLOUDPCREGIONGROUP
        case "mexico":
            result = MEXICO_CLOUDPCREGIONGROUP
        case "australasia":
            result = AUSTRALASIA_CLOUDPCREGIONGROUP
        case "europe":
            result = EUROPE_CLOUDPCREGIONGROUP
        case "singapore":
            result = SINGAPORE_CLOUDPCREGIONGROUP
        case "hongKong":
            result = HONGKONG_CLOUDPCREGIONGROUP
        case "ireland":
            result = IRELAND_CLOUDPCREGIONGROUP
        case "sweden":
            result = SWEDEN_CLOUDPCREGIONGROUP
        case "poland":
            result = POLAND_CLOUDPCREGIONGROUP
        case "italy":
            result = ITALY_CLOUDPCREGIONGROUP
        case "spain":
            result = SPAIN_CLOUDPCREGIONGROUP
        case "netherlands":
            result = NETHERLANDS_CLOUDPCREGIONGROUP
        case "brazil":
            result = BRAZIL_CLOUDPCREGIONGROUP
        case "israel":
            result = ISRAEL_CLOUDPCREGIONGROUP
        case "automatic":
            result = AUTOMATIC_CLOUDPCREGIONGROUP
        case "indonesia":
            result = INDONESIA_CLOUDPCREGIONGROUP
        case "taiwan":
            result = TAIWAN_CLOUDPCREGIONGROUP
        case "malaysia":
            result = MALAYSIA_CLOUDPCREGIONGROUP
        case "newZealand":
            result = NEWZEALAND_CLOUDPCREGIONGROUP
        case "austria":
            result = AUSTRIA_CLOUDPCREGIONGROUP
        case "denmark":
            result = DENMARK_CLOUDPCREGIONGROUP
        case "belgium":
            result = BELGIUM_CLOUDPCREGIONGROUP
        case "kenya":
            result = KENYA_CLOUDPCREGIONGROUP
        default:
            return nil, nil
    }
    return &result, nil
}
func SerializeCloudPcRegionGroup(values []CloudPcRegionGroup) []string {
    result := make([]string, len(values))
    for i, v := range values {
        result[i] = v.String()
    }
    return result
}
func (i CloudPcRegionGroup) isMultiValue() bool {
    return false
}
