package models

import (
    i336074805fc853987abe6f7fe3ad97a6a6f3077a16391fec744f671a015fbd7e "time"
    i2ae4187f7daee263371cb1c977df639813ab50ffa529013b7437480d1ec0158f "github.com/microsoft/kiota-abstractions-go"
    i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91 "github.com/microsoft/kiota-abstractions-go/serialization"
)

// WindowsMalwareInformation malware information entity.
type WindowsMalwareInformation struct {
    Entity
    // Information URL to learn more about the malware
    additionalInformationUrl *string
    // Category of the malware. Possible values are: invalid, adware, spyware, passwordStealer, trojanDownloader, worm, backdoor, remoteAccessTrojan, trojan, emailFlooder, keylogger, dialer, monitoringSoftware, browserModifier, cookie, browserPlugin, aolExploit, nuker, securityDisabler, jokeProgram, hostileActiveXControl, softwareBundler, stealthNotifier, settingsModifier, toolBar, remoteControlSoftware, trojanFtp, potentialUnwantedSoftware, icqExploit, trojanTelnet, exploit, filesharingProgram, malwareCreationTool, remote_Control_Software, tool, trojanDenialOfService, trojanDropper, trojanMassMailer, trojanMonitoringSoftware, trojanProxyServer, virus, known, unknown, spp, behavior, vulnerability, policy, enterpriseUnwantedSoftware, ransom, hipsRule.
    category *WindowsMalwareCategory
    // List of devices affected by current malware with the malware state on each device
    deviceMalwareStates []MalwareStateForWindowsDeviceable
    // Malware name
    displayName *string
    // The last time the malware is detected
    lastDetectionDateTime *i336074805fc853987abe6f7fe3ad97a6a6f3077a16391fec744f671a015fbd7e.Time
    // Severity of the malware. Possible values are: unknown, low, moderate, high, severe.
    severity *WindowsMalwareSeverity
}
// NewWindowsMalwareInformation instantiates a new windowsMalwareInformation and sets the default values.
func NewWindowsMalwareInformation()(*WindowsMalwareInformation) {
    m := &WindowsMalwareInformation{
        Entity: *NewEntity(),
    }
    odataTypeValue := "#microsoft.graph.windowsMalwareInformation";
    m.SetOdataType(&odataTypeValue);
    return m
}
// CreateWindowsMalwareInformationFromDiscriminatorValue creates a new instance of the appropriate class based on discriminator value
func CreateWindowsMalwareInformationFromDiscriminatorValue(parseNode i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode)(i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.Parsable, error) {
    return NewWindowsMalwareInformation(), nil
}
// GetAdditionalInformationUrl gets the additionalInformationUrl property value. Information URL to learn more about the malware
func (m *WindowsMalwareInformation) GetAdditionalInformationUrl()(*string) {
    return m.additionalInformationUrl
}
// GetCategory gets the category property value. Category of the malware. Possible values are: invalid, adware, spyware, passwordStealer, trojanDownloader, worm, backdoor, remoteAccessTrojan, trojan, emailFlooder, keylogger, dialer, monitoringSoftware, browserModifier, cookie, browserPlugin, aolExploit, nuker, securityDisabler, jokeProgram, hostileActiveXControl, softwareBundler, stealthNotifier, settingsModifier, toolBar, remoteControlSoftware, trojanFtp, potentialUnwantedSoftware, icqExploit, trojanTelnet, exploit, filesharingProgram, malwareCreationTool, remote_Control_Software, tool, trojanDenialOfService, trojanDropper, trojanMassMailer, trojanMonitoringSoftware, trojanProxyServer, virus, known, unknown, spp, behavior, vulnerability, policy, enterpriseUnwantedSoftware, ransom, hipsRule.
func (m *WindowsMalwareInformation) GetCategory()(*WindowsMalwareCategory) {
    return m.category
}
// GetDeviceMalwareStates gets the deviceMalwareStates property value. List of devices affected by current malware with the malware state on each device
func (m *WindowsMalwareInformation) GetDeviceMalwareStates()([]MalwareStateForWindowsDeviceable) {
    return m.deviceMalwareStates
}
// GetDisplayName gets the displayName property value. Malware name
func (m *WindowsMalwareInformation) GetDisplayName()(*string) {
    return m.displayName
}
// GetFieldDeserializers the deserialization information for the current model
func (m *WindowsMalwareInformation) GetFieldDeserializers()(map[string]func(i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode)(error)) {
    res := m.Entity.GetFieldDeserializers()
    res["additionalInformationUrl"] = i2ae4187f7daee263371cb1c977df639813ab50ffa529013b7437480d1ec0158f.SetStringValue(m.SetAdditionalInformationUrl)
    res["category"] = i2ae4187f7daee263371cb1c977df639813ab50ffa529013b7437480d1ec0158f.SetEnumValue(ParseWindowsMalwareCategory , m.SetCategory)
    res["deviceMalwareStates"] = i2ae4187f7daee263371cb1c977df639813ab50ffa529013b7437480d1ec0158f.SetCollectionOfObjectValues(CreateMalwareStateForWindowsDeviceFromDiscriminatorValue , m.SetDeviceMalwareStates)
    res["displayName"] = i2ae4187f7daee263371cb1c977df639813ab50ffa529013b7437480d1ec0158f.SetStringValue(m.SetDisplayName)
    res["lastDetectionDateTime"] = i2ae4187f7daee263371cb1c977df639813ab50ffa529013b7437480d1ec0158f.SetTimeValue(m.SetLastDetectionDateTime)
    res["severity"] = i2ae4187f7daee263371cb1c977df639813ab50ffa529013b7437480d1ec0158f.SetEnumValue(ParseWindowsMalwareSeverity , m.SetSeverity)
    return res
}
// GetLastDetectionDateTime gets the lastDetectionDateTime property value. The last time the malware is detected
func (m *WindowsMalwareInformation) GetLastDetectionDateTime()(*i336074805fc853987abe6f7fe3ad97a6a6f3077a16391fec744f671a015fbd7e.Time) {
    return m.lastDetectionDateTime
}
// GetSeverity gets the severity property value. Severity of the malware. Possible values are: unknown, low, moderate, high, severe.
func (m *WindowsMalwareInformation) GetSeverity()(*WindowsMalwareSeverity) {
    return m.severity
}
// Serialize serializes information the current object
func (m *WindowsMalwareInformation) Serialize(writer i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.SerializationWriter)(error) {
    err := m.Entity.Serialize(writer)
    if err != nil {
        return err
    }
    {
        err = writer.WriteStringValue("additionalInformationUrl", m.GetAdditionalInformationUrl())
        if err != nil {
            return err
        }
    }
    if m.GetCategory() != nil {
        cast := (*m.GetCategory()).String()
        err = writer.WriteStringValue("category", &cast)
        if err != nil {
            return err
        }
    }
    if m.GetDeviceMalwareStates() != nil {
        cast := i2ae4187f7daee263371cb1c977df639813ab50ffa529013b7437480d1ec0158f.CollectionCast[i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.Parsable](m.GetDeviceMalwareStates())
        err = writer.WriteCollectionOfObjectValues("deviceMalwareStates", cast)
        if err != nil {
            return err
        }
    }
    {
        err = writer.WriteStringValue("displayName", m.GetDisplayName())
        if err != nil {
            return err
        }
    }
    {
        err = writer.WriteTimeValue("lastDetectionDateTime", m.GetLastDetectionDateTime())
        if err != nil {
            return err
        }
    }
    if m.GetSeverity() != nil {
        cast := (*m.GetSeverity()).String()
        err = writer.WriteStringValue("severity", &cast)
        if err != nil {
            return err
        }
    }
    return nil
}
// SetAdditionalInformationUrl sets the additionalInformationUrl property value. Information URL to learn more about the malware
func (m *WindowsMalwareInformation) SetAdditionalInformationUrl(value *string)() {
    m.additionalInformationUrl = value
}
// SetCategory sets the category property value. Category of the malware. Possible values are: invalid, adware, spyware, passwordStealer, trojanDownloader, worm, backdoor, remoteAccessTrojan, trojan, emailFlooder, keylogger, dialer, monitoringSoftware, browserModifier, cookie, browserPlugin, aolExploit, nuker, securityDisabler, jokeProgram, hostileActiveXControl, softwareBundler, stealthNotifier, settingsModifier, toolBar, remoteControlSoftware, trojanFtp, potentialUnwantedSoftware, icqExploit, trojanTelnet, exploit, filesharingProgram, malwareCreationTool, remote_Control_Software, tool, trojanDenialOfService, trojanDropper, trojanMassMailer, trojanMonitoringSoftware, trojanProxyServer, virus, known, unknown, spp, behavior, vulnerability, policy, enterpriseUnwantedSoftware, ransom, hipsRule.
func (m *WindowsMalwareInformation) SetCategory(value *WindowsMalwareCategory)() {
    m.category = value
}
// SetDeviceMalwareStates sets the deviceMalwareStates property value. List of devices affected by current malware with the malware state on each device
func (m *WindowsMalwareInformation) SetDeviceMalwareStates(value []MalwareStateForWindowsDeviceable)() {
    m.deviceMalwareStates = value
}
// SetDisplayName sets the displayName property value. Malware name
func (m *WindowsMalwareInformation) SetDisplayName(value *string)() {
    m.displayName = value
}
// SetLastDetectionDateTime sets the lastDetectionDateTime property value. The last time the malware is detected
func (m *WindowsMalwareInformation) SetLastDetectionDateTime(value *i336074805fc853987abe6f7fe3ad97a6a6f3077a16391fec744f671a015fbd7e.Time)() {
    m.lastDetectionDateTime = value
}
// SetSeverity sets the severity property value. Severity of the malware. Possible values are: unknown, low, moderate, high, severe.
func (m *WindowsMalwareInformation) SetSeverity(value *WindowsMalwareSeverity)() {
    m.severity = value
}
