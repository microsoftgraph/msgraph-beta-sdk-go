// Code generated by Microsoft Kiota - DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package models

import (
    i336074805fc853987abe6f7fe3ad97a6a6f3077a16391fec744f671a015fbd7e "time"
    i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91 "github.com/microsoft/kiota-abstractions-go/serialization"
)

type UserPasswordResetsAndChangesSummary struct {
    Entity
}
// NewUserPasswordResetsAndChangesSummary instantiates a new UserPasswordResetsAndChangesSummary and sets the default values.
func NewUserPasswordResetsAndChangesSummary()(*UserPasswordResetsAndChangesSummary) {
    m := &UserPasswordResetsAndChangesSummary{
        Entity: *NewEntity(),
    }
    return m
}
// CreateUserPasswordResetsAndChangesSummaryFromDiscriminatorValue creates a new instance of the appropriate class based on discriminator value
// returns a Parsable when successful
func CreateUserPasswordResetsAndChangesSummaryFromDiscriminatorValue(parseNode i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode)(i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.Parsable, error) {
    return NewUserPasswordResetsAndChangesSummary(), nil
}
// GetAggregatedDateTime gets the aggregatedDateTime property value. The aggregated day for which the summary applies to. This property will always represent the entire day. The DateTimeOffset type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
// returns a *Time when successful
func (m *UserPasswordResetsAndChangesSummary) GetAggregatedDateTime()(*i336074805fc853987abe6f7fe3ad97a6a6f3077a16391fec744f671a015fbd7e.Time) {
    val, err := m.GetBackingStore().Get("aggregatedDateTime")
    if err != nil {
        panic(err)
    }
    if val != nil {
        return val.(*i336074805fc853987abe6f7fe3ad97a6a6f3077a16391fec744f671a015fbd7e.Time)
    }
    return nil
}
// GetChangePasswordSelfServiceCount gets the changePasswordSelfServiceCount property value. The number of self-service password changes that occurred during this window.
// returns a *int64 when successful
func (m *UserPasswordResetsAndChangesSummary) GetChangePasswordSelfServiceCount()(*int64) {
    val, err := m.GetBackingStore().Get("changePasswordSelfServiceCount")
    if err != nil {
        panic(err)
    }
    if val != nil {
        return val.(*int64)
    }
    return nil
}
// GetFieldDeserializers the deserialization information for the current model
// returns a map[string]func(i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode)(error) when successful
func (m *UserPasswordResetsAndChangesSummary) GetFieldDeserializers()(map[string]func(i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode)(error)) {
    res := m.Entity.GetFieldDeserializers()
    res["aggregatedDateTime"] = func (n i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode) error {
        val, err := n.GetTimeValue()
        if err != nil {
            return err
        }
        if val != nil {
            m.SetAggregatedDateTime(val)
        }
        return nil
    }
    res["changePasswordSelfServiceCount"] = func (n i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode) error {
        val, err := n.GetInt64Value()
        if err != nil {
            return err
        }
        if val != nil {
            m.SetChangePasswordSelfServiceCount(val)
        }
        return nil
    }
    res["passwordResetsByAdminCount"] = func (n i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode) error {
        val, err := n.GetInt64Value()
        if err != nil {
            return err
        }
        if val != nil {
            m.SetPasswordResetsByAdminCount(val)
        }
        return nil
    }
    res["passwordResetsSelfServiceCount"] = func (n i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode) error {
        val, err := n.GetInt64Value()
        if err != nil {
            return err
        }
        if val != nil {
            m.SetPasswordResetsSelfServiceCount(val)
        }
        return nil
    }
    return res
}
// GetPasswordResetsByAdminCount gets the passwordResetsByAdminCount property value. The number of admin-triggered password resets that occurred during this window.
// returns a *int64 when successful
func (m *UserPasswordResetsAndChangesSummary) GetPasswordResetsByAdminCount()(*int64) {
    val, err := m.GetBackingStore().Get("passwordResetsByAdminCount")
    if err != nil {
        panic(err)
    }
    if val != nil {
        return val.(*int64)
    }
    return nil
}
// GetPasswordResetsSelfServiceCount gets the passwordResetsSelfServiceCount property value. The number of self-service password resets that occurred during this window.
// returns a *int64 when successful
func (m *UserPasswordResetsAndChangesSummary) GetPasswordResetsSelfServiceCount()(*int64) {
    val, err := m.GetBackingStore().Get("passwordResetsSelfServiceCount")
    if err != nil {
        panic(err)
    }
    if val != nil {
        return val.(*int64)
    }
    return nil
}
// Serialize serializes information the current object
func (m *UserPasswordResetsAndChangesSummary) Serialize(writer i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.SerializationWriter)(error) {
    err := m.Entity.Serialize(writer)
    if err != nil {
        return err
    }
    {
        err = writer.WriteTimeValue("aggregatedDateTime", m.GetAggregatedDateTime())
        if err != nil {
            return err
        }
    }
    {
        err = writer.WriteInt64Value("changePasswordSelfServiceCount", m.GetChangePasswordSelfServiceCount())
        if err != nil {
            return err
        }
    }
    {
        err = writer.WriteInt64Value("passwordResetsByAdminCount", m.GetPasswordResetsByAdminCount())
        if err != nil {
            return err
        }
    }
    {
        err = writer.WriteInt64Value("passwordResetsSelfServiceCount", m.GetPasswordResetsSelfServiceCount())
        if err != nil {
            return err
        }
    }
    return nil
}
// SetAggregatedDateTime sets the aggregatedDateTime property value. The aggregated day for which the summary applies to. This property will always represent the entire day. The DateTimeOffset type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
func (m *UserPasswordResetsAndChangesSummary) SetAggregatedDateTime(value *i336074805fc853987abe6f7fe3ad97a6a6f3077a16391fec744f671a015fbd7e.Time)() {
    err := m.GetBackingStore().Set("aggregatedDateTime", value)
    if err != nil {
        panic(err)
    }
}
// SetChangePasswordSelfServiceCount sets the changePasswordSelfServiceCount property value. The number of self-service password changes that occurred during this window.
func (m *UserPasswordResetsAndChangesSummary) SetChangePasswordSelfServiceCount(value *int64)() {
    err := m.GetBackingStore().Set("changePasswordSelfServiceCount", value)
    if err != nil {
        panic(err)
    }
}
// SetPasswordResetsByAdminCount sets the passwordResetsByAdminCount property value. The number of admin-triggered password resets that occurred during this window.
func (m *UserPasswordResetsAndChangesSummary) SetPasswordResetsByAdminCount(value *int64)() {
    err := m.GetBackingStore().Set("passwordResetsByAdminCount", value)
    if err != nil {
        panic(err)
    }
}
// SetPasswordResetsSelfServiceCount sets the passwordResetsSelfServiceCount property value. The number of self-service password resets that occurred during this window.
func (m *UserPasswordResetsAndChangesSummary) SetPasswordResetsSelfServiceCount(value *int64)() {
    err := m.GetBackingStore().Set("passwordResetsSelfServiceCount", value)
    if err != nil {
        panic(err)
    }
}
type UserPasswordResetsAndChangesSummaryable interface {
    Entityable
    i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.Parsable
    GetAggregatedDateTime()(*i336074805fc853987abe6f7fe3ad97a6a6f3077a16391fec744f671a015fbd7e.Time)
    GetChangePasswordSelfServiceCount()(*int64)
    GetPasswordResetsByAdminCount()(*int64)
    GetPasswordResetsSelfServiceCount()(*int64)
    SetAggregatedDateTime(value *i336074805fc853987abe6f7fe3ad97a6a6f3077a16391fec744f671a015fbd7e.Time)()
    SetChangePasswordSelfServiceCount(value *int64)()
    SetPasswordResetsByAdminCount(value *int64)()
    SetPasswordResetsSelfServiceCount(value *int64)()
}
