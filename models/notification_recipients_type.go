// Code generated by Microsoft Kiota - DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package models
import (
    "math"
    "strings"
)
type NotificationRecipientsType int

const (
    NONE_NOTIFICATIONRECIPIENTSTYPE = 1
    GLOBALADMINS_NOTIFICATIONRECIPIENTSTYPE = 2
    BACKUPADMINS_NOTIFICATIONRECIPIENTSTYPE = 4
    CUSTOM_NOTIFICATIONRECIPIENTSTYPE = 8
    ALLADMINS_NOTIFICATIONRECIPIENTSTYPE = 16
    UNKNOWNFUTUREVALUE_NOTIFICATIONRECIPIENTSTYPE = 32
)

func (i NotificationRecipientsType) String() string {
    var values []string
    options := []string{"none", "globalAdmins", "backupAdmins", "custom", "allAdmins", "unknownFutureValue"}
    for p := 0; p < 6; p++ {
        mantis := NotificationRecipientsType(int(math.Pow(2, float64(p))))
        if i&mantis == mantis {
            values = append(values, options[p])
        }
    }
    return strings.Join(values, ",")
}
func ParseNotificationRecipientsType(v string) (any, error) {
    var result NotificationRecipientsType
    values := strings.Split(v, ",")
    for _, str := range values {
        switch str {
            case "none":
                result |= NONE_NOTIFICATIONRECIPIENTSTYPE
            case "globalAdmins":
                result |= GLOBALADMINS_NOTIFICATIONRECIPIENTSTYPE
            case "backupAdmins":
                result |= BACKUPADMINS_NOTIFICATIONRECIPIENTSTYPE
            case "custom":
                result |= CUSTOM_NOTIFICATIONRECIPIENTSTYPE
            case "allAdmins":
                result |= ALLADMINS_NOTIFICATIONRECIPIENTSTYPE
            case "unknownFutureValue":
                result |= UNKNOWNFUTUREVALUE_NOTIFICATIONRECIPIENTSTYPE
            default:
                return nil, nil
        }
    }
    return &result, nil
}
func SerializeNotificationRecipientsType(values []NotificationRecipientsType) []string {
    result := make([]string, len(values))
    for i, v := range values {
        result[i] = v.String()
    }
    return result
}
func (i NotificationRecipientsType) isMultiValue() bool {
    return true
}
