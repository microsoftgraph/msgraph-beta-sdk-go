package models

import (
    i336074805fc853987abe6f7fe3ad97a6a6f3077a16391fec744f671a015fbd7e "time"
    i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91 "github.com/microsoft/kiota-abstractions-go/serialization"
)

// WindowsDeviceMalwareState malware detection entity.
type WindowsDeviceMalwareState struct {
    Entity
    // Information URL to learn more about the malware
    additionalInformationUrl *string
    // Category of the malware. Possible values are: invalid, adware, spyware, passwordStealer, trojanDownloader, worm, backdoor, remoteAccessTrojan, trojan, emailFlooder, keylogger, dialer, monitoringSoftware, browserModifier, cookie, browserPlugin, aolExploit, nuker, securityDisabler, jokeProgram, hostileActiveXControl, softwareBundler, stealthNotifier, settingsModifier, toolBar, remoteControlSoftware, trojanFtp, potentialUnwantedSoftware, icqExploit, trojanTelnet, exploit, filesharingProgram, malwareCreationTool, remote_Control_Software, tool, trojanDenialOfService, trojanDropper, trojanMassMailer, trojanMonitoringSoftware, trojanProxyServer, virus, known, unknown, spp, behavior, vulnerability, policy, enterpriseUnwantedSoftware, ransom, hipsRule.
    category *WindowsMalwareCategory
    // Number of times the malware is detected
    detectionCount *int32
    // Malware name
    displayName *string
    // Execution status of the malware like blocked/executing etc. Possible values are: unknown, blocked, allowed, running, notRunning.
    executionState *WindowsMalwareExecutionState
    // Initial detection datetime of the malware
    initialDetectionDateTime *i336074805fc853987abe6f7fe3ad97a6a6f3077a16391fec744f671a015fbd7e.Time
    // The last time this particular threat was changed
    lastStateChangeDateTime *i336074805fc853987abe6f7fe3ad97a6a6f3077a16391fec744f671a015fbd7e.Time
    // Severity of the malware. Possible values are: unknown, low, moderate, high, severe.
    severity *WindowsMalwareSeverity
    // Current status of the malware like cleaned/quarantined/allowed etc. Possible values are: unknown, detected, cleaned, quarantined, removed, allowed, blocked, cleanFailed, quarantineFailed, removeFailed, allowFailed, abandoned, blockFailed.
    state *WindowsMalwareState
    // Current status of the malware like cleaned/quarantined/allowed etc. Possible values are: active, actionFailed, manualStepsRequired, fullScanRequired, rebootRequired, remediatedWithNonCriticalFailures, quarantined, removed, cleaned, allowed, noStatusCleared.
    threatState *WindowsMalwareThreatState
}
// NewWindowsDeviceMalwareState instantiates a new windowsDeviceMalwareState and sets the default values.
func NewWindowsDeviceMalwareState()(*WindowsDeviceMalwareState) {
    m := &WindowsDeviceMalwareState{
        Entity: *NewEntity(),
    }
    return m
}
// CreateWindowsDeviceMalwareStateFromDiscriminatorValue creates a new instance of the appropriate class based on discriminator value
func CreateWindowsDeviceMalwareStateFromDiscriminatorValue(parseNode i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode)(i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.Parsable, error) {
    return NewWindowsDeviceMalwareState(), nil
}
// GetAdditionalInformationUrl gets the additionalInformationUrl property value. Information URL to learn more about the malware
func (m *WindowsDeviceMalwareState) GetAdditionalInformationUrl()(*string) {
    if m == nil {
        return nil
    } else {
        return m.additionalInformationUrl
    }
}
// GetCategory gets the category property value. Category of the malware. Possible values are: invalid, adware, spyware, passwordStealer, trojanDownloader, worm, backdoor, remoteAccessTrojan, trojan, emailFlooder, keylogger, dialer, monitoringSoftware, browserModifier, cookie, browserPlugin, aolExploit, nuker, securityDisabler, jokeProgram, hostileActiveXControl, softwareBundler, stealthNotifier, settingsModifier, toolBar, remoteControlSoftware, trojanFtp, potentialUnwantedSoftware, icqExploit, trojanTelnet, exploit, filesharingProgram, malwareCreationTool, remote_Control_Software, tool, trojanDenialOfService, trojanDropper, trojanMassMailer, trojanMonitoringSoftware, trojanProxyServer, virus, known, unknown, spp, behavior, vulnerability, policy, enterpriseUnwantedSoftware, ransom, hipsRule.
func (m *WindowsDeviceMalwareState) GetCategory()(*WindowsMalwareCategory) {
    if m == nil {
        return nil
    } else {
        return m.category
    }
}
// GetDetectionCount gets the detectionCount property value. Number of times the malware is detected
func (m *WindowsDeviceMalwareState) GetDetectionCount()(*int32) {
    if m == nil {
        return nil
    } else {
        return m.detectionCount
    }
}
// GetDisplayName gets the displayName property value. Malware name
func (m *WindowsDeviceMalwareState) GetDisplayName()(*string) {
    if m == nil {
        return nil
    } else {
        return m.displayName
    }
}
// GetExecutionState gets the executionState property value. Execution status of the malware like blocked/executing etc. Possible values are: unknown, blocked, allowed, running, notRunning.
func (m *WindowsDeviceMalwareState) GetExecutionState()(*WindowsMalwareExecutionState) {
    if m == nil {
        return nil
    } else {
        return m.executionState
    }
}
// GetFieldDeserializers the deserialization information for the current model
func (m *WindowsDeviceMalwareState) GetFieldDeserializers()(map[string]func(i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode)(error)) {
    res := m.Entity.GetFieldDeserializers()
    res["additionalInformationUrl"] = func (n i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode) error {
        val, err := n.GetStringValue()
        if err != nil {
            return err
        }
        if val != nil {
            m.SetAdditionalInformationUrl(val)
        }
        return nil
    }
    res["category"] = func (n i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode) error {
        val, err := n.GetEnumValue(ParseWindowsMalwareCategory)
        if err != nil {
            return err
        }
        if val != nil {
            m.SetCategory(val.(*WindowsMalwareCategory))
        }
        return nil
    }
    res["detectionCount"] = func (n i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode) error {
        val, err := n.GetInt32Value()
        if err != nil {
            return err
        }
        if val != nil {
            m.SetDetectionCount(val)
        }
        return nil
    }
    res["displayName"] = func (n i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode) error {
        val, err := n.GetStringValue()
        if err != nil {
            return err
        }
        if val != nil {
            m.SetDisplayName(val)
        }
        return nil
    }
    res["executionState"] = func (n i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode) error {
        val, err := n.GetEnumValue(ParseWindowsMalwareExecutionState)
        if err != nil {
            return err
        }
        if val != nil {
            m.SetExecutionState(val.(*WindowsMalwareExecutionState))
        }
        return nil
    }
    res["initialDetectionDateTime"] = func (n i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode) error {
        val, err := n.GetTimeValue()
        if err != nil {
            return err
        }
        if val != nil {
            m.SetInitialDetectionDateTime(val)
        }
        return nil
    }
    res["lastStateChangeDateTime"] = func (n i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode) error {
        val, err := n.GetTimeValue()
        if err != nil {
            return err
        }
        if val != nil {
            m.SetLastStateChangeDateTime(val)
        }
        return nil
    }
    res["severity"] = func (n i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode) error {
        val, err := n.GetEnumValue(ParseWindowsMalwareSeverity)
        if err != nil {
            return err
        }
        if val != nil {
            m.SetSeverity(val.(*WindowsMalwareSeverity))
        }
        return nil
    }
    res["state"] = func (n i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode) error {
        val, err := n.GetEnumValue(ParseWindowsMalwareState)
        if err != nil {
            return err
        }
        if val != nil {
            m.SetState(val.(*WindowsMalwareState))
        }
        return nil
    }
    res["threatState"] = func (n i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode) error {
        val, err := n.GetEnumValue(ParseWindowsMalwareThreatState)
        if err != nil {
            return err
        }
        if val != nil {
            m.SetThreatState(val.(*WindowsMalwareThreatState))
        }
        return nil
    }
    return res
}
// GetInitialDetectionDateTime gets the initialDetectionDateTime property value. Initial detection datetime of the malware
func (m *WindowsDeviceMalwareState) GetInitialDetectionDateTime()(*i336074805fc853987abe6f7fe3ad97a6a6f3077a16391fec744f671a015fbd7e.Time) {
    if m == nil {
        return nil
    } else {
        return m.initialDetectionDateTime
    }
}
// GetLastStateChangeDateTime gets the lastStateChangeDateTime property value. The last time this particular threat was changed
func (m *WindowsDeviceMalwareState) GetLastStateChangeDateTime()(*i336074805fc853987abe6f7fe3ad97a6a6f3077a16391fec744f671a015fbd7e.Time) {
    if m == nil {
        return nil
    } else {
        return m.lastStateChangeDateTime
    }
}
// GetSeverity gets the severity property value. Severity of the malware. Possible values are: unknown, low, moderate, high, severe.
func (m *WindowsDeviceMalwareState) GetSeverity()(*WindowsMalwareSeverity) {
    if m == nil {
        return nil
    } else {
        return m.severity
    }
}
// GetState gets the state property value. Current status of the malware like cleaned/quarantined/allowed etc. Possible values are: unknown, detected, cleaned, quarantined, removed, allowed, blocked, cleanFailed, quarantineFailed, removeFailed, allowFailed, abandoned, blockFailed.
func (m *WindowsDeviceMalwareState) GetState()(*WindowsMalwareState) {
    if m == nil {
        return nil
    } else {
        return m.state
    }
}
// GetThreatState gets the threatState property value. Current status of the malware like cleaned/quarantined/allowed etc. Possible values are: active, actionFailed, manualStepsRequired, fullScanRequired, rebootRequired, remediatedWithNonCriticalFailures, quarantined, removed, cleaned, allowed, noStatusCleared.
func (m *WindowsDeviceMalwareState) GetThreatState()(*WindowsMalwareThreatState) {
    if m == nil {
        return nil
    } else {
        return m.threatState
    }
}
// Serialize serializes information the current object
func (m *WindowsDeviceMalwareState) Serialize(writer i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.SerializationWriter)(error) {
    err := m.Entity.Serialize(writer)
    if err != nil {
        return err
    }
    {
        err = writer.WriteStringValue("additionalInformationUrl", m.GetAdditionalInformationUrl())
        if err != nil {
            return err
        }
    }
    if m.GetCategory() != nil {
        cast := (*m.GetCategory()).String()
        err = writer.WriteStringValue("category", &cast)
        if err != nil {
            return err
        }
    }
    {
        err = writer.WriteInt32Value("detectionCount", m.GetDetectionCount())
        if err != nil {
            return err
        }
    }
    {
        err = writer.WriteStringValue("displayName", m.GetDisplayName())
        if err != nil {
            return err
        }
    }
    if m.GetExecutionState() != nil {
        cast := (*m.GetExecutionState()).String()
        err = writer.WriteStringValue("executionState", &cast)
        if err != nil {
            return err
        }
    }
    {
        err = writer.WriteTimeValue("initialDetectionDateTime", m.GetInitialDetectionDateTime())
        if err != nil {
            return err
        }
    }
    {
        err = writer.WriteTimeValue("lastStateChangeDateTime", m.GetLastStateChangeDateTime())
        if err != nil {
            return err
        }
    }
    if m.GetSeverity() != nil {
        cast := (*m.GetSeverity()).String()
        err = writer.WriteStringValue("severity", &cast)
        if err != nil {
            return err
        }
    }
    if m.GetState() != nil {
        cast := (*m.GetState()).String()
        err = writer.WriteStringValue("state", &cast)
        if err != nil {
            return err
        }
    }
    if m.GetThreatState() != nil {
        cast := (*m.GetThreatState()).String()
        err = writer.WriteStringValue("threatState", &cast)
        if err != nil {
            return err
        }
    }
    return nil
}
// SetAdditionalInformationUrl sets the additionalInformationUrl property value. Information URL to learn more about the malware
func (m *WindowsDeviceMalwareState) SetAdditionalInformationUrl(value *string)() {
    if m != nil {
        m.additionalInformationUrl = value
    }
}
// SetCategory sets the category property value. Category of the malware. Possible values are: invalid, adware, spyware, passwordStealer, trojanDownloader, worm, backdoor, remoteAccessTrojan, trojan, emailFlooder, keylogger, dialer, monitoringSoftware, browserModifier, cookie, browserPlugin, aolExploit, nuker, securityDisabler, jokeProgram, hostileActiveXControl, softwareBundler, stealthNotifier, settingsModifier, toolBar, remoteControlSoftware, trojanFtp, potentialUnwantedSoftware, icqExploit, trojanTelnet, exploit, filesharingProgram, malwareCreationTool, remote_Control_Software, tool, trojanDenialOfService, trojanDropper, trojanMassMailer, trojanMonitoringSoftware, trojanProxyServer, virus, known, unknown, spp, behavior, vulnerability, policy, enterpriseUnwantedSoftware, ransom, hipsRule.
func (m *WindowsDeviceMalwareState) SetCategory(value *WindowsMalwareCategory)() {
    if m != nil {
        m.category = value
    }
}
// SetDetectionCount sets the detectionCount property value. Number of times the malware is detected
func (m *WindowsDeviceMalwareState) SetDetectionCount(value *int32)() {
    if m != nil {
        m.detectionCount = value
    }
}
// SetDisplayName sets the displayName property value. Malware name
func (m *WindowsDeviceMalwareState) SetDisplayName(value *string)() {
    if m != nil {
        m.displayName = value
    }
}
// SetExecutionState sets the executionState property value. Execution status of the malware like blocked/executing etc. Possible values are: unknown, blocked, allowed, running, notRunning.
func (m *WindowsDeviceMalwareState) SetExecutionState(value *WindowsMalwareExecutionState)() {
    if m != nil {
        m.executionState = value
    }
}
// SetInitialDetectionDateTime sets the initialDetectionDateTime property value. Initial detection datetime of the malware
func (m *WindowsDeviceMalwareState) SetInitialDetectionDateTime(value *i336074805fc853987abe6f7fe3ad97a6a6f3077a16391fec744f671a015fbd7e.Time)() {
    if m != nil {
        m.initialDetectionDateTime = value
    }
}
// SetLastStateChangeDateTime sets the lastStateChangeDateTime property value. The last time this particular threat was changed
func (m *WindowsDeviceMalwareState) SetLastStateChangeDateTime(value *i336074805fc853987abe6f7fe3ad97a6a6f3077a16391fec744f671a015fbd7e.Time)() {
    if m != nil {
        m.lastStateChangeDateTime = value
    }
}
// SetSeverity sets the severity property value. Severity of the malware. Possible values are: unknown, low, moderate, high, severe.
func (m *WindowsDeviceMalwareState) SetSeverity(value *WindowsMalwareSeverity)() {
    if m != nil {
        m.severity = value
    }
}
// SetState sets the state property value. Current status of the malware like cleaned/quarantined/allowed etc. Possible values are: unknown, detected, cleaned, quarantined, removed, allowed, blocked, cleanFailed, quarantineFailed, removeFailed, allowFailed, abandoned, blockFailed.
func (m *WindowsDeviceMalwareState) SetState(value *WindowsMalwareState)() {
    if m != nil {
        m.state = value
    }
}
// SetThreatState sets the threatState property value. Current status of the malware like cleaned/quarantined/allowed etc. Possible values are: active, actionFailed, manualStepsRequired, fullScanRequired, rebootRequired, remediatedWithNonCriticalFailures, quarantined, removed, cleaned, allowed, noStatusCleared.
func (m *WindowsDeviceMalwareState) SetThreatState(value *WindowsMalwareThreatState)() {
    if m != nil {
        m.threatState = value
    }
}
