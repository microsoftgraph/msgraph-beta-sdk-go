// Code generated by Microsoft Kiota - DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package identitygovernance

import (
    i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91 "github.com/microsoft/kiota-abstractions-go/serialization"
)

type ActivateRunScope struct {
    ActivationScope
}
// NewActivateRunScope instantiates a new ActivateRunScope and sets the default values.
func NewActivateRunScope()(*ActivateRunScope) {
    m := &ActivateRunScope{
        ActivationScope: *NewActivationScope(),
    }
    odataTypeValue := "#microsoft.graph.identityGovernance.activateRunScope"
    m.SetOdataType(&odataTypeValue)
    return m
}
// CreateActivateRunScopeFromDiscriminatorValue creates a new instance of the appropriate class based on discriminator value
// returns a Parsable when successful
func CreateActivateRunScopeFromDiscriminatorValue(parseNode i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode)(i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.Parsable, error) {
    return NewActivateRunScope(), nil
}
// GetFieldDeserializers the deserialization information for the current model
// returns a map[string]func(i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode)(error) when successful
func (m *ActivateRunScope) GetFieldDeserializers()(map[string]func(i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode)(error)) {
    res := m.ActivationScope.GetFieldDeserializers()
    res["run"] = func (n i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode) error {
        val, err := n.GetObjectValue(CreateRunFromDiscriminatorValue)
        if err != nil {
            return err
        }
        if val != nil {
            m.SetRun(val.(Runable))
        }
        return nil
    }
    res["taskScope"] = func (n i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode) error {
        val, err := n.GetEnumValue(ParseActivationTaskScopeType)
        if err != nil {
            return err
        }
        if val != nil {
            m.SetTaskScope(val.(*ActivationTaskScopeType))
        }
        return nil
    }
    res["userScope"] = func (n i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode) error {
        val, err := n.GetEnumValue(ParseActivationUserScopeType)
        if err != nil {
            return err
        }
        if val != nil {
            m.SetUserScope(val.(*ActivationUserScopeType))
        }
        return nil
    }
    return res
}
// GetRun gets the run property value. The run property
// returns a Runable when successful
func (m *ActivateRunScope) GetRun()(Runable) {
    val, err := m.GetBackingStore().Get("run")
    if err != nil {
        panic(err)
    }
    if val != nil {
        return val.(Runable)
    }
    return nil
}
// GetTaskScope gets the taskScope property value. The taskScope property
// returns a *ActivationTaskScopeType when successful
func (m *ActivateRunScope) GetTaskScope()(*ActivationTaskScopeType) {
    val, err := m.GetBackingStore().Get("taskScope")
    if err != nil {
        panic(err)
    }
    if val != nil {
        return val.(*ActivationTaskScopeType)
    }
    return nil
}
// GetUserScope gets the userScope property value. The userScope property
// returns a *ActivationUserScopeType when successful
func (m *ActivateRunScope) GetUserScope()(*ActivationUserScopeType) {
    val, err := m.GetBackingStore().Get("userScope")
    if err != nil {
        panic(err)
    }
    if val != nil {
        return val.(*ActivationUserScopeType)
    }
    return nil
}
// Serialize serializes information the current object
func (m *ActivateRunScope) Serialize(writer i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.SerializationWriter)(error) {
    err := m.ActivationScope.Serialize(writer)
    if err != nil {
        return err
    }
    {
        err = writer.WriteObjectValue("run", m.GetRun())
        if err != nil {
            return err
        }
    }
    if m.GetTaskScope() != nil {
        cast := (*m.GetTaskScope()).String()
        err = writer.WriteStringValue("taskScope", &cast)
        if err != nil {
            return err
        }
    }
    if m.GetUserScope() != nil {
        cast := (*m.GetUserScope()).String()
        err = writer.WriteStringValue("userScope", &cast)
        if err != nil {
            return err
        }
    }
    return nil
}
// SetRun sets the run property value. The run property
func (m *ActivateRunScope) SetRun(value Runable)() {
    err := m.GetBackingStore().Set("run", value)
    if err != nil {
        panic(err)
    }
}
// SetTaskScope sets the taskScope property value. The taskScope property
func (m *ActivateRunScope) SetTaskScope(value *ActivationTaskScopeType)() {
    err := m.GetBackingStore().Set("taskScope", value)
    if err != nil {
        panic(err)
    }
}
// SetUserScope sets the userScope property value. The userScope property
func (m *ActivateRunScope) SetUserScope(value *ActivationUserScopeType)() {
    err := m.GetBackingStore().Set("userScope", value)
    if err != nil {
        panic(err)
    }
}
type ActivateRunScopeable interface {
    ActivationScopeable
    i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.Parsable
    GetRun()(Runable)
    GetTaskScope()(*ActivationTaskScopeType)
    GetUserScope()(*ActivationUserScopeType)
    SetRun(value Runable)()
    SetTaskScope(value *ActivationTaskScopeType)()
    SetUserScope(value *ActivationUserScopeType)()
}
