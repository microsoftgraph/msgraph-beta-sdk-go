// Code generated by Microsoft Kiota - DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package models

import (
    i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91 "github.com/microsoft/kiota-abstractions-go/serialization"
)

type PolicyDeletableRoot struct {
    Entity
}
// NewPolicyDeletableRoot instantiates a new PolicyDeletableRoot and sets the default values.
func NewPolicyDeletableRoot()(*PolicyDeletableRoot) {
    m := &PolicyDeletableRoot{
        Entity: *NewEntity(),
    }
    return m
}
// CreatePolicyDeletableRootFromDiscriminatorValue creates a new instance of the appropriate class based on discriminator value
// returns a Parsable when successful
func CreatePolicyDeletableRootFromDiscriminatorValue(parseNode i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode)(i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.Parsable, error) {
    return NewPolicyDeletableRoot(), nil
}
// GetCrossTenantPartners gets the crossTenantPartners property value. Represents the partner-specific configuration for cross-tenant access and tenant restrictions. Cross-tenant access settings include inbound and outbound settings of Microsoft Entra B2B collaboration and B2B direct connect.
// returns a []CrossTenantAccessPolicyConfigurationPartnerable when successful
func (m *PolicyDeletableRoot) GetCrossTenantPartners()([]CrossTenantAccessPolicyConfigurationPartnerable) {
    val, err := m.GetBackingStore().Get("crossTenantPartners")
    if err != nil {
        panic(err)
    }
    if val != nil {
        return val.([]CrossTenantAccessPolicyConfigurationPartnerable)
    }
    return nil
}
// GetCrossTenantSyncPolicyPartners gets the crossTenantSyncPolicyPartners property value. Defines the cross-tenant policy for synchronization of users from a partner tenant. Use this user synchronization policy to streamline collaboration between users in a multi-tenant organization by automating the creation, update, and deletion of users from one tenant to another.
// returns a []CrossTenantIdentitySyncPolicyPartnerable when successful
func (m *PolicyDeletableRoot) GetCrossTenantSyncPolicyPartners()([]CrossTenantIdentitySyncPolicyPartnerable) {
    val, err := m.GetBackingStore().Get("crossTenantSyncPolicyPartners")
    if err != nil {
        panic(err)
    }
    if val != nil {
        return val.([]CrossTenantIdentitySyncPolicyPartnerable)
    }
    return nil
}
// GetFieldDeserializers the deserialization information for the current model
// returns a map[string]func(i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode)(error) when successful
func (m *PolicyDeletableRoot) GetFieldDeserializers()(map[string]func(i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode)(error)) {
    res := m.Entity.GetFieldDeserializers()
    res["crossTenantPartners"] = func (n i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode) error {
        val, err := n.GetCollectionOfObjectValues(CreateCrossTenantAccessPolicyConfigurationPartnerFromDiscriminatorValue)
        if err != nil {
            return err
        }
        if val != nil {
            res := make([]CrossTenantAccessPolicyConfigurationPartnerable, len(val))
            for i, v := range val {
                if v != nil {
                    res[i] = v.(CrossTenantAccessPolicyConfigurationPartnerable)
                }
            }
            m.SetCrossTenantPartners(res)
        }
        return nil
    }
    res["crossTenantSyncPolicyPartners"] = func (n i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode) error {
        val, err := n.GetCollectionOfObjectValues(CreateCrossTenantIdentitySyncPolicyPartnerFromDiscriminatorValue)
        if err != nil {
            return err
        }
        if val != nil {
            res := make([]CrossTenantIdentitySyncPolicyPartnerable, len(val))
            for i, v := range val {
                if v != nil {
                    res[i] = v.(CrossTenantIdentitySyncPolicyPartnerable)
                }
            }
            m.SetCrossTenantSyncPolicyPartners(res)
        }
        return nil
    }
    return res
}
// Serialize serializes information the current object
func (m *PolicyDeletableRoot) Serialize(writer i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.SerializationWriter)(error) {
    err := m.Entity.Serialize(writer)
    if err != nil {
        return err
    }
    if m.GetCrossTenantPartners() != nil {
        cast := make([]i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.Parsable, len(m.GetCrossTenantPartners()))
        for i, v := range m.GetCrossTenantPartners() {
            if v != nil {
                cast[i] = v.(i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.Parsable)
            }
        }
        err = writer.WriteCollectionOfObjectValues("crossTenantPartners", cast)
        if err != nil {
            return err
        }
    }
    if m.GetCrossTenantSyncPolicyPartners() != nil {
        cast := make([]i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.Parsable, len(m.GetCrossTenantSyncPolicyPartners()))
        for i, v := range m.GetCrossTenantSyncPolicyPartners() {
            if v != nil {
                cast[i] = v.(i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.Parsable)
            }
        }
        err = writer.WriteCollectionOfObjectValues("crossTenantSyncPolicyPartners", cast)
        if err != nil {
            return err
        }
    }
    return nil
}
// SetCrossTenantPartners sets the crossTenantPartners property value. Represents the partner-specific configuration for cross-tenant access and tenant restrictions. Cross-tenant access settings include inbound and outbound settings of Microsoft Entra B2B collaboration and B2B direct connect.
func (m *PolicyDeletableRoot) SetCrossTenantPartners(value []CrossTenantAccessPolicyConfigurationPartnerable)() {
    err := m.GetBackingStore().Set("crossTenantPartners", value)
    if err != nil {
        panic(err)
    }
}
// SetCrossTenantSyncPolicyPartners sets the crossTenantSyncPolicyPartners property value. Defines the cross-tenant policy for synchronization of users from a partner tenant. Use this user synchronization policy to streamline collaboration between users in a multi-tenant organization by automating the creation, update, and deletion of users from one tenant to another.
func (m *PolicyDeletableRoot) SetCrossTenantSyncPolicyPartners(value []CrossTenantIdentitySyncPolicyPartnerable)() {
    err := m.GetBackingStore().Set("crossTenantSyncPolicyPartners", value)
    if err != nil {
        panic(err)
    }
}
type PolicyDeletableRootable interface {
    Entityable
    i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.Parsable
    GetCrossTenantPartners()([]CrossTenantAccessPolicyConfigurationPartnerable)
    GetCrossTenantSyncPolicyPartners()([]CrossTenantIdentitySyncPolicyPartnerable)
    SetCrossTenantPartners(value []CrossTenantAccessPolicyConfigurationPartnerable)()
    SetCrossTenantSyncPolicyPartners(value []CrossTenantIdentitySyncPolicyPartnerable)()
}
