// Code generated by Microsoft Kiota - DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package security
type Action int

const (
    DISABLE_ACTION Action = iota
    ENABLE_ACTION
    FORCEPASSWORDRESET_ACTION
    REVOKEALLSESSIONS_ACTION
    REQUIREUSERTOSIGNINAGAIN_ACTION
    MARKUSERASCOMPROMISED_ACTION
    UNKNOWNFUTUREVALUE_ACTION
)

func (i Action) String() string {
    return []string{"disable", "enable", "forcePasswordReset", "revokeAllSessions", "requireUserToSignInAgain", "markUserAsCompromised", "unknownFutureValue"}[i]
}
func ParseAction(v string) (any, error) {
    result := DISABLE_ACTION
    switch v {
        case "disable":
            result = DISABLE_ACTION
        case "enable":
            result = ENABLE_ACTION
        case "forcePasswordReset":
            result = FORCEPASSWORDRESET_ACTION
        case "revokeAllSessions":
            result = REVOKEALLSESSIONS_ACTION
        case "requireUserToSignInAgain":
            result = REQUIREUSERTOSIGNINAGAIN_ACTION
        case "markUserAsCompromised":
            result = MARKUSERASCOMPROMISED_ACTION
        case "unknownFutureValue":
            result = UNKNOWNFUTUREVALUE_ACTION
        default:
            return nil, nil
    }
    return &result, nil
}
func SerializeAction(values []Action) []string {
    result := make([]string, len(values))
    for i, v := range values {
        result[i] = v.String()
    }
    return result
}
func (i Action) isMultiValue() bool {
    return false
}
