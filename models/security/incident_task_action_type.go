// Code generated by Microsoft Kiota - DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package security
type IncidentTaskActionType int

const (
    TEXT_INCIDENTTASKACTIONTYPE IncidentTaskActionType = iota
    ISOLATEDEVICE_INCIDENTTASKACTIONTYPE
    STOPANDQUARANTINEFILE_INCIDENTTASKACTIONTYPE
    RUNANTIVIRUSSCAN_INCIDENTTASKACTIONTYPE
    COLLECTINVESTIGATIONPACKAGE_INCIDENTTASKACTIONTYPE
    RESTRICTAPPEXECUTION_INCIDENTTASKACTIONTYPE
    SUBMITIOCRULE_INCIDENTTASKACTIONTYPE
    FORCEUSERPASSWORDRESET_INCIDENTTASKACTIONTYPE
    DISABLEUSER_INCIDENTTASKACTIONTYPE
    MARKUSERASCOMPROMISED_INCIDENTTASKACTIONTYPE
    REQUIRESIGNIN_INCIDENTTASKACTIONTYPE
    HARDDELETEEMAIL_INCIDENTTASKACTIONTYPE
    SOFTDELETEEMAIL_INCIDENTTASKACTIONTYPE
    UNISOLATEDEVICE_INCIDENTTASKACTIONTYPE
    UNRESTRICTAPPEXECUTION_INCIDENTTASKACTIONTYPE
    ENABLEUSER_INCIDENTTASKACTIONTYPE
    UNKNOWNFUTUREVALUE_INCIDENTTASKACTIONTYPE
)

func (i IncidentTaskActionType) String() string {
    return []string{"text", "isolateDevice", "stopAndQuarantineFile", "runAntiVirusScan", "collectInvestigationPackage", "restrictAppExecution", "submitIocRule", "forceUserPasswordReset", "disableUser", "markUserAsCompromised", "requireSignIn", "hardDeleteEmail", "softDeleteEmail", "unIsolateDevice", "unRestrictAppExecution", "enableUser", "unknownFutureValue"}[i]
}
func ParseIncidentTaskActionType(v string) (any, error) {
    result := TEXT_INCIDENTTASKACTIONTYPE
    switch v {
        case "text":
            result = TEXT_INCIDENTTASKACTIONTYPE
        case "isolateDevice":
            result = ISOLATEDEVICE_INCIDENTTASKACTIONTYPE
        case "stopAndQuarantineFile":
            result = STOPANDQUARANTINEFILE_INCIDENTTASKACTIONTYPE
        case "runAntiVirusScan":
            result = RUNANTIVIRUSSCAN_INCIDENTTASKACTIONTYPE
        case "collectInvestigationPackage":
            result = COLLECTINVESTIGATIONPACKAGE_INCIDENTTASKACTIONTYPE
        case "restrictAppExecution":
            result = RESTRICTAPPEXECUTION_INCIDENTTASKACTIONTYPE
        case "submitIocRule":
            result = SUBMITIOCRULE_INCIDENTTASKACTIONTYPE
        case "forceUserPasswordReset":
            result = FORCEUSERPASSWORDRESET_INCIDENTTASKACTIONTYPE
        case "disableUser":
            result = DISABLEUSER_INCIDENTTASKACTIONTYPE
        case "markUserAsCompromised":
            result = MARKUSERASCOMPROMISED_INCIDENTTASKACTIONTYPE
        case "requireSignIn":
            result = REQUIRESIGNIN_INCIDENTTASKACTIONTYPE
        case "hardDeleteEmail":
            result = HARDDELETEEMAIL_INCIDENTTASKACTIONTYPE
        case "softDeleteEmail":
            result = SOFTDELETEEMAIL_INCIDENTTASKACTIONTYPE
        case "unIsolateDevice":
            result = UNISOLATEDEVICE_INCIDENTTASKACTIONTYPE
        case "unRestrictAppExecution":
            result = UNRESTRICTAPPEXECUTION_INCIDENTTASKACTIONTYPE
        case "enableUser":
            result = ENABLEUSER_INCIDENTTASKACTIONTYPE
        case "unknownFutureValue":
            result = UNKNOWNFUTUREVALUE_INCIDENTTASKACTIONTYPE
        default:
            return nil, nil
    }
    return &result, nil
}
func SerializeIncidentTaskActionType(values []IncidentTaskActionType) []string {
    result := make([]string, len(values))
    for i, v := range values {
        result[i] = v.String()
    }
    return result
}
func (i IncidentTaskActionType) isMultiValue() bool {
    return false
}
