package models
import (
    "strings"
    "errors"
)
// Provides operations to manage the deviceManagement singleton.
type WindowsMalwareThreatState int

const (
    ACTIVE_WINDOWSMALWARETHREATSTATE WindowsMalwareThreatState = iota
    ACTIONFAILED_WINDOWSMALWARETHREATSTATE
    MANUALSTEPSREQUIRED_WINDOWSMALWARETHREATSTATE
    FULLSCANREQUIRED_WINDOWSMALWARETHREATSTATE
    REBOOTREQUIRED_WINDOWSMALWARETHREATSTATE
    REMEDIATEDWITHNONCRITICALFAILURES_WINDOWSMALWARETHREATSTATE
    QUARANTINED_WINDOWSMALWARETHREATSTATE
    REMOVED_WINDOWSMALWARETHREATSTATE
    CLEANED_WINDOWSMALWARETHREATSTATE
    ALLOWED_WINDOWSMALWARETHREATSTATE
    NOSTATUSCLEARED_WINDOWSMALWARETHREATSTATE
)

func (i WindowsMalwareThreatState) String() string {
    return []string{"ACTIVE", "ACTIONFAILED", "MANUALSTEPSREQUIRED", "FULLSCANREQUIRED", "REBOOTREQUIRED", "REMEDIATEDWITHNONCRITICALFAILURES", "QUARANTINED", "REMOVED", "CLEANED", "ALLOWED", "NOSTATUSCLEARED"}[i]
}
func ParseWindowsMalwareThreatState(v string) (interface{}, error) {
    result := ACTIVE_WINDOWSMALWARETHREATSTATE
    switch strings.ToUpper(v) {
        case "ACTIVE":
            result = ACTIVE_WINDOWSMALWARETHREATSTATE
        case "ACTIONFAILED":
            result = ACTIONFAILED_WINDOWSMALWARETHREATSTATE
        case "MANUALSTEPSREQUIRED":
            result = MANUALSTEPSREQUIRED_WINDOWSMALWARETHREATSTATE
        case "FULLSCANREQUIRED":
            result = FULLSCANREQUIRED_WINDOWSMALWARETHREATSTATE
        case "REBOOTREQUIRED":
            result = REBOOTREQUIRED_WINDOWSMALWARETHREATSTATE
        case "REMEDIATEDWITHNONCRITICALFAILURES":
            result = REMEDIATEDWITHNONCRITICALFAILURES_WINDOWSMALWARETHREATSTATE
        case "QUARANTINED":
            result = QUARANTINED_WINDOWSMALWARETHREATSTATE
        case "REMOVED":
            result = REMOVED_WINDOWSMALWARETHREATSTATE
        case "CLEANED":
            result = CLEANED_WINDOWSMALWARETHREATSTATE
        case "ALLOWED":
            result = ALLOWED_WINDOWSMALWARETHREATSTATE
        case "NOSTATUSCLEARED":
            result = NOSTATUSCLEARED_WINDOWSMALWARETHREATSTATE
        default:
            return 0, errors.New("Unknown WindowsMalwareThreatState value: " + v)
    }
    return &result, nil
}
func SerializeWindowsMalwareThreatState(values []WindowsMalwareThreatState) []string {
    result := make([]string, len(values))
    for i, v := range values {
        result[i] = v.String()
    }
    return result
}
