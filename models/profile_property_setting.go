// Code generated by Microsoft Kiota - DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package models

import (
    i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91 "github.com/microsoft/kiota-abstractions-go/serialization"
)

type ProfilePropertySetting struct {
    Entity
}
// NewProfilePropertySetting instantiates a new ProfilePropertySetting and sets the default values.
func NewProfilePropertySetting()(*ProfilePropertySetting) {
    m := &ProfilePropertySetting{
        Entity: *NewEntity(),
    }
    return m
}
// CreateProfilePropertySettingFromDiscriminatorValue creates a new instance of the appropriate class based on discriminator value
// returns a Parsable when successful
func CreateProfilePropertySettingFromDiscriminatorValue(parseNode i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode)(i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.Parsable, error) {
    return NewProfilePropertySetting(), nil
}
// GetAllowedAudiences gets the allowedAudiences property value. A privacy setting that reflects the allowed audience for the configured property. The possible values are: me, organization, federatedOrganizations, everyone, unknownFutureValue.
// returns a *OrganizationAllowedAudiences when successful
func (m *ProfilePropertySetting) GetAllowedAudiences()(*OrganizationAllowedAudiences) {
    val, err := m.GetBackingStore().Get("allowedAudiences")
    if err != nil {
        panic(err)
    }
    if val != nil {
        return val.(*OrganizationAllowedAudiences)
    }
    return nil
}
// GetFieldDeserializers the deserialization information for the current model
// returns a map[string]func(i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode)(error) when successful
func (m *ProfilePropertySetting) GetFieldDeserializers()(map[string]func(i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode)(error)) {
    res := m.Entity.GetFieldDeserializers()
    res["allowedAudiences"] = func (n i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode) error {
        val, err := n.GetEnumValue(ParseOrganizationAllowedAudiences)
        if err != nil {
            return err
        }
        if val != nil {
            m.SetAllowedAudiences(val.(*OrganizationAllowedAudiences))
        }
        return nil
    }
    res["isUserOverrideForAudienceEnabled"] = func (n i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode) error {
        val, err := n.GetBoolValue()
        if err != nil {
            return err
        }
        if val != nil {
            m.SetIsUserOverrideForAudienceEnabled(val)
        }
        return nil
    }
    res["name"] = func (n i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode) error {
        val, err := n.GetStringValue()
        if err != nil {
            return err
        }
        if val != nil {
            m.SetName(val)
        }
        return nil
    }
    res["prioritizedSourceUrls"] = func (n i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode) error {
        val, err := n.GetCollectionOfPrimitiveValues("string")
        if err != nil {
            return err
        }
        if val != nil {
            res := make([]string, len(val))
            for i, v := range val {
                if v != nil {
                    res[i] = *(v.(*string))
                }
            }
            m.SetPrioritizedSourceUrls(res)
        }
        return nil
    }
    return res
}
// GetIsUserOverrideForAudienceEnabled gets the isUserOverrideForAudienceEnabled property value. Defines whether a user is allowed to override the tenant admin privacy setting.
// returns a *bool when successful
func (m *ProfilePropertySetting) GetIsUserOverrideForAudienceEnabled()(*bool) {
    val, err := m.GetBackingStore().Get("isUserOverrideForAudienceEnabled")
    if err != nil {
        panic(err)
    }
    if val != nil {
        return val.(*bool)
    }
    return nil
}
// GetName gets the name property value. Name of the property-level setting.
// returns a *string when successful
func (m *ProfilePropertySetting) GetName()(*string) {
    val, err := m.GetBackingStore().Get("name")
    if err != nil {
        panic(err)
    }
    if val != nil {
        return val.(*string)
    }
    return nil
}
// GetPrioritizedSourceUrls gets the prioritizedSourceUrls property value. A collection of prioritized profile source URLs ordered by data precedence within an organization.
// returns a []string when successful
func (m *ProfilePropertySetting) GetPrioritizedSourceUrls()([]string) {
    val, err := m.GetBackingStore().Get("prioritizedSourceUrls")
    if err != nil {
        panic(err)
    }
    if val != nil {
        return val.([]string)
    }
    return nil
}
// Serialize serializes information the current object
func (m *ProfilePropertySetting) Serialize(writer i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.SerializationWriter)(error) {
    err := m.Entity.Serialize(writer)
    if err != nil {
        return err
    }
    if m.GetAllowedAudiences() != nil {
        cast := (*m.GetAllowedAudiences()).String()
        err = writer.WriteStringValue("allowedAudiences", &cast)
        if err != nil {
            return err
        }
    }
    {
        err = writer.WriteBoolValue("isUserOverrideForAudienceEnabled", m.GetIsUserOverrideForAudienceEnabled())
        if err != nil {
            return err
        }
    }
    {
        err = writer.WriteStringValue("name", m.GetName())
        if err != nil {
            return err
        }
    }
    if m.GetPrioritizedSourceUrls() != nil {
        err = writer.WriteCollectionOfStringValues("prioritizedSourceUrls", m.GetPrioritizedSourceUrls())
        if err != nil {
            return err
        }
    }
    return nil
}
// SetAllowedAudiences sets the allowedAudiences property value. A privacy setting that reflects the allowed audience for the configured property. The possible values are: me, organization, federatedOrganizations, everyone, unknownFutureValue.
func (m *ProfilePropertySetting) SetAllowedAudiences(value *OrganizationAllowedAudiences)() {
    err := m.GetBackingStore().Set("allowedAudiences", value)
    if err != nil {
        panic(err)
    }
}
// SetIsUserOverrideForAudienceEnabled sets the isUserOverrideForAudienceEnabled property value. Defines whether a user is allowed to override the tenant admin privacy setting.
func (m *ProfilePropertySetting) SetIsUserOverrideForAudienceEnabled(value *bool)() {
    err := m.GetBackingStore().Set("isUserOverrideForAudienceEnabled", value)
    if err != nil {
        panic(err)
    }
}
// SetName sets the name property value. Name of the property-level setting.
func (m *ProfilePropertySetting) SetName(value *string)() {
    err := m.GetBackingStore().Set("name", value)
    if err != nil {
        panic(err)
    }
}
// SetPrioritizedSourceUrls sets the prioritizedSourceUrls property value. A collection of prioritized profile source URLs ordered by data precedence within an organization.
func (m *ProfilePropertySetting) SetPrioritizedSourceUrls(value []string)() {
    err := m.GetBackingStore().Set("prioritizedSourceUrls", value)
    if err != nil {
        panic(err)
    }
}
type ProfilePropertySettingable interface {
    Entityable
    i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.Parsable
    GetAllowedAudiences()(*OrganizationAllowedAudiences)
    GetIsUserOverrideForAudienceEnabled()(*bool)
    GetName()(*string)
    GetPrioritizedSourceUrls()([]string)
    SetAllowedAudiences(value *OrganizationAllowedAudiences)()
    SetIsUserOverrideForAudienceEnabled(value *bool)()
    SetName(value *string)()
    SetPrioritizedSourceUrls(value []string)()
}
