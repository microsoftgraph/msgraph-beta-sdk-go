// Code generated by Microsoft Kiota - DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package models
import (
    "math"
    "strings"
)
// Indicates the supported device type for an apple setting.
type DeviceManagementConfigurationAppleApplicabilityDeviceType int

const (
    // No applicability
    NONE_DEVICEMANAGEMENTCONFIGURATIONAPPLEAPPLICABILITYDEVICETYPE = 1
    // Applies to iOS devices
    IOS_DEVICEMANAGEMENTCONFIGURATIONAPPLEAPPLICABILITYDEVICETYPE = 2
    // Applies to Shared iPad devices.
    SHAREDIPAD_DEVICEMANAGEMENTCONFIGURATIONAPPLEAPPLICABILITYDEVICETYPE = 4
    // Applies to macOS devices
    MACOS_DEVICEMANAGEMENTCONFIGURATIONAPPLEAPPLICABILITYDEVICETYPE = 8
    // Evolvable enumeration sentinel value. Do not use.
    UNKNOWNFUTUREVALUE_DEVICEMANAGEMENTCONFIGURATIONAPPLEAPPLICABILITYDEVICETYPE = 16
)

func (i DeviceManagementConfigurationAppleApplicabilityDeviceType) String() string {
    var values []string
    options := []string{"none", "ios", "sharediPad", "macOS", "unknownFutureValue"}
    for p := 0; p < 5; p++ {
        mantis := DeviceManagementConfigurationAppleApplicabilityDeviceType(int(math.Pow(2, float64(p))))
        if i&mantis == mantis {
            values = append(values, options[p])
        }
    }
    return strings.Join(values, ",")
}
func ParseDeviceManagementConfigurationAppleApplicabilityDeviceType(v string) (any, error) {
    var result DeviceManagementConfigurationAppleApplicabilityDeviceType
    values := strings.Split(v, ",")
    for _, str := range values {
        switch str {
            case "none":
                result |= NONE_DEVICEMANAGEMENTCONFIGURATIONAPPLEAPPLICABILITYDEVICETYPE
            case "ios":
                result |= IOS_DEVICEMANAGEMENTCONFIGURATIONAPPLEAPPLICABILITYDEVICETYPE
            case "sharediPad":
                result |= SHAREDIPAD_DEVICEMANAGEMENTCONFIGURATIONAPPLEAPPLICABILITYDEVICETYPE
            case "macOS":
                result |= MACOS_DEVICEMANAGEMENTCONFIGURATIONAPPLEAPPLICABILITYDEVICETYPE
            case "unknownFutureValue":
                result |= UNKNOWNFUTUREVALUE_DEVICEMANAGEMENTCONFIGURATIONAPPLEAPPLICABILITYDEVICETYPE
            default:
                return nil, nil
        }
    }
    return &result, nil
}
func SerializeDeviceManagementConfigurationAppleApplicabilityDeviceType(values []DeviceManagementConfigurationAppleApplicabilityDeviceType) []string {
    result := make([]string, len(values))
    for i, v := range values {
        result[i] = v.String()
    }
    return result
}
func (i DeviceManagementConfigurationAppleApplicabilityDeviceType) isMultiValue() bool {
    return true
}
