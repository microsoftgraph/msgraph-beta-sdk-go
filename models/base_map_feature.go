// Code generated by Microsoft Kiota - DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package models

import (
    i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91 "github.com/microsoft/kiota-abstractions-go/serialization"
)

type BaseMapFeature struct {
    Entity
}
// NewBaseMapFeature instantiates a new BaseMapFeature and sets the default values.
func NewBaseMapFeature()(*BaseMapFeature) {
    m := &BaseMapFeature{
        Entity: *NewEntity(),
    }
    return m
}
// CreateBaseMapFeatureFromDiscriminatorValue creates a new instance of the appropriate class based on discriminator value
// returns a Parsable when successful
func CreateBaseMapFeatureFromDiscriminatorValue(parseNode i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode)(i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.Parsable, error) {
    if parseNode != nil {
        mappingValueNode, err := parseNode.GetChildNode("@odata.type")
        if err != nil {
            return nil, err
        }
        if mappingValueNode != nil {
            mappingValue, err := mappingValueNode.GetStringValue()
            if err != nil {
                return nil, err
            }
            if mappingValue != nil {
                switch *mappingValue {
                    case "#microsoft.graph.buildingMap":
                        return NewBuildingMap(), nil
                    case "#microsoft.graph.fixtureMap":
                        return NewFixtureMap(), nil
                    case "#microsoft.graph.footprintMap":
                        return NewFootprintMap(), nil
                    case "#microsoft.graph.levelMap":
                        return NewLevelMap(), nil
                    case "#microsoft.graph.sectionMap":
                        return NewSectionMap(), nil
                    case "#microsoft.graph.unitMap":
                        return NewUnitMap(), nil
                }
            }
        }
    }
    return NewBaseMapFeature(), nil
}
// GetFieldDeserializers the deserialization information for the current model
// returns a map[string]func(i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode)(error) when successful
func (m *BaseMapFeature) GetFieldDeserializers()(map[string]func(i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode)(error)) {
    res := m.Entity.GetFieldDeserializers()
    res["properties"] = func (n i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode) error {
        val, err := n.GetStringValue()
        if err != nil {
            return err
        }
        if val != nil {
            m.SetProperties(val)
        }
        return nil
    }
    return res
}
// GetProperties gets the properties property value. Concatenated key-value pair of all properties of a GeoJSON file for this baseMapFeature.
// returns a *string when successful
func (m *BaseMapFeature) GetProperties()(*string) {
    val, err := m.GetBackingStore().Get("properties")
    if err != nil {
        panic(err)
    }
    if val != nil {
        return val.(*string)
    }
    return nil
}
// Serialize serializes information the current object
func (m *BaseMapFeature) Serialize(writer i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.SerializationWriter)(error) {
    err := m.Entity.Serialize(writer)
    if err != nil {
        return err
    }
    {
        err = writer.WriteStringValue("properties", m.GetProperties())
        if err != nil {
            return err
        }
    }
    return nil
}
// SetProperties sets the properties property value. Concatenated key-value pair of all properties of a GeoJSON file for this baseMapFeature.
func (m *BaseMapFeature) SetProperties(value *string)() {
    err := m.GetBackingStore().Set("properties", value)
    if err != nil {
        panic(err)
    }
}
type BaseMapFeatureable interface {
    Entityable
    i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.Parsable
    GetProperties()(*string)
    SetProperties(value *string)()
}
