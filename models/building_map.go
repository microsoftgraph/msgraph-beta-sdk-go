// Code generated by Microsoft Kiota - DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package models

import (
    i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91 "github.com/microsoft/kiota-abstractions-go/serialization"
)

type BuildingMap struct {
    BaseMapFeature
}
// NewBuildingMap instantiates a new BuildingMap and sets the default values.
func NewBuildingMap()(*BuildingMap) {
    m := &BuildingMap{
        BaseMapFeature: *NewBaseMapFeature(),
    }
    odataTypeValue := "#microsoft.graph.buildingMap"
    m.SetOdataType(&odataTypeValue)
    return m
}
// CreateBuildingMapFromDiscriminatorValue creates a new instance of the appropriate class based on discriminator value
// returns a Parsable when successful
func CreateBuildingMapFromDiscriminatorValue(parseNode i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode)(i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.Parsable, error) {
    return NewBuildingMap(), nil
}
// GetFieldDeserializers the deserialization information for the current model
// returns a map[string]func(i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode)(error) when successful
func (m *BuildingMap) GetFieldDeserializers()(map[string]func(i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode)(error)) {
    res := m.BaseMapFeature.GetFieldDeserializers()
    res["footprints"] = func (n i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode) error {
        val, err := n.GetCollectionOfObjectValues(CreateFootprintMapFromDiscriminatorValue)
        if err != nil {
            return err
        }
        if val != nil {
            res := make([]FootprintMapable, len(val))
            for i, v := range val {
                if v != nil {
                    res[i] = v.(FootprintMapable)
                }
            }
            m.SetFootprints(res)
        }
        return nil
    }
    res["levels"] = func (n i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode) error {
        val, err := n.GetCollectionOfObjectValues(CreateLevelMapFromDiscriminatorValue)
        if err != nil {
            return err
        }
        if val != nil {
            res := make([]LevelMapable, len(val))
            for i, v := range val {
                if v != nil {
                    res[i] = v.(LevelMapable)
                }
            }
            m.SetLevels(res)
        }
        return nil
    }
    res["placeId"] = func (n i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode) error {
        val, err := n.GetStringValue()
        if err != nil {
            return err
        }
        if val != nil {
            m.SetPlaceId(val)
        }
        return nil
    }
    return res
}
// GetFootprints gets the footprints property value. Represents the approximate physical extent of a referenced building. It corresponds to footprint.geojson in IMDF format.
// returns a []FootprintMapable when successful
func (m *BuildingMap) GetFootprints()([]FootprintMapable) {
    val, err := m.GetBackingStore().Get("footprints")
    if err != nil {
        panic(err)
    }
    if val != nil {
        return val.([]FootprintMapable)
    }
    return nil
}
// GetLevels gets the levels property value. Represents a physical floor structure within a building. It corresponds to level.geojson in IMDF format.
// returns a []LevelMapable when successful
func (m *BuildingMap) GetLevels()([]LevelMapable) {
    val, err := m.GetBackingStore().Get("levels")
    if err != nil {
        panic(err)
    }
    if val != nil {
        return val.([]LevelMapable)
    }
    return nil
}
// GetPlaceId gets the placeId property value. Identifier for the building to which this buildingMap belongs.
// returns a *string when successful
func (m *BuildingMap) GetPlaceId()(*string) {
    val, err := m.GetBackingStore().Get("placeId")
    if err != nil {
        panic(err)
    }
    if val != nil {
        return val.(*string)
    }
    return nil
}
// Serialize serializes information the current object
func (m *BuildingMap) Serialize(writer i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.SerializationWriter)(error) {
    err := m.BaseMapFeature.Serialize(writer)
    if err != nil {
        return err
    }
    if m.GetFootprints() != nil {
        cast := make([]i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.Parsable, len(m.GetFootprints()))
        for i, v := range m.GetFootprints() {
            if v != nil {
                cast[i] = v.(i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.Parsable)
            }
        }
        err = writer.WriteCollectionOfObjectValues("footprints", cast)
        if err != nil {
            return err
        }
    }
    if m.GetLevels() != nil {
        cast := make([]i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.Parsable, len(m.GetLevels()))
        for i, v := range m.GetLevels() {
            if v != nil {
                cast[i] = v.(i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.Parsable)
            }
        }
        err = writer.WriteCollectionOfObjectValues("levels", cast)
        if err != nil {
            return err
        }
    }
    {
        err = writer.WriteStringValue("placeId", m.GetPlaceId())
        if err != nil {
            return err
        }
    }
    return nil
}
// SetFootprints sets the footprints property value. Represents the approximate physical extent of a referenced building. It corresponds to footprint.geojson in IMDF format.
func (m *BuildingMap) SetFootprints(value []FootprintMapable)() {
    err := m.GetBackingStore().Set("footprints", value)
    if err != nil {
        panic(err)
    }
}
// SetLevels sets the levels property value. Represents a physical floor structure within a building. It corresponds to level.geojson in IMDF format.
func (m *BuildingMap) SetLevels(value []LevelMapable)() {
    err := m.GetBackingStore().Set("levels", value)
    if err != nil {
        panic(err)
    }
}
// SetPlaceId sets the placeId property value. Identifier for the building to which this buildingMap belongs.
func (m *BuildingMap) SetPlaceId(value *string)() {
    err := m.GetBackingStore().Set("placeId", value)
    if err != nil {
        panic(err)
    }
}
type BuildingMapable interface {
    BaseMapFeatureable
    i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.Parsable
    GetFootprints()([]FootprintMapable)
    GetLevels()([]LevelMapable)
    GetPlaceId()(*string)
    SetFootprints(value []FootprintMapable)()
    SetLevels(value []LevelMapable)()
    SetPlaceId(value *string)()
}
