// Code generated by Microsoft Kiota - DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package models

import (
    i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91 "github.com/microsoft/kiota-abstractions-go/serialization"
)

type EmailNotificationsSetting struct {
    Entity
}
// NewEmailNotificationsSetting instantiates a new EmailNotificationsSetting and sets the default values.
func NewEmailNotificationsSetting()(*EmailNotificationsSetting) {
    m := &EmailNotificationsSetting{
        Entity: *NewEntity(),
    }
    return m
}
// CreateEmailNotificationsSettingFromDiscriminatorValue creates a new instance of the appropriate class based on discriminator value
// returns a Parsable when successful
func CreateEmailNotificationsSettingFromDiscriminatorValue(parseNode i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode)(i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.Parsable, error) {
    return NewEmailNotificationsSetting(), nil
}
// GetAdditionalEvents gets the additionalEvents property value. The additionalEvents property
// returns a *NotificationEventsType when successful
func (m *EmailNotificationsSetting) GetAdditionalEvents()(*NotificationEventsType) {
    val, err := m.GetBackingStore().Get("additionalEvents")
    if err != nil {
        panic(err)
    }
    if val != nil {
        return val.(*NotificationEventsType)
    }
    return nil
}
// GetFieldDeserializers the deserialization information for the current model
// returns a map[string]func(i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode)(error) when successful
func (m *EmailNotificationsSetting) GetFieldDeserializers()(map[string]func(i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode)(error)) {
    res := m.Entity.GetFieldDeserializers()
    res["additionalEvents"] = func (n i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode) error {
        val, err := n.GetEnumValue(ParseNotificationEventsType)
        if err != nil {
            return err
        }
        if val != nil {
            m.SetAdditionalEvents(val.(*NotificationEventsType))
        }
        return nil
    }
    res["isEnabled"] = func (n i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode) error {
        val, err := n.GetBoolValue()
        if err != nil {
            return err
        }
        if val != nil {
            m.SetIsEnabled(val)
        }
        return nil
    }
    res["recipients"] = func (n i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode) error {
        val, err := n.GetObjectValue(CreateNotificationRecipientsFromDiscriminatorValue)
        if err != nil {
            return err
        }
        if val != nil {
            m.SetRecipients(val.(NotificationRecipientsable))
        }
        return nil
    }
    return res
}
// GetIsEnabled gets the isEnabled property value. Indicates whether notifications are enabled.
// returns a *bool when successful
func (m *EmailNotificationsSetting) GetIsEnabled()(*bool) {
    val, err := m.GetBackingStore().Get("isEnabled")
    if err != nil {
        panic(err)
    }
    if val != nil {
        return val.(*bool)
    }
    return nil
}
// GetRecipients gets the recipients property value. The recipients property
// returns a NotificationRecipientsable when successful
func (m *EmailNotificationsSetting) GetRecipients()(NotificationRecipientsable) {
    val, err := m.GetBackingStore().Get("recipients")
    if err != nil {
        panic(err)
    }
    if val != nil {
        return val.(NotificationRecipientsable)
    }
    return nil
}
// Serialize serializes information the current object
func (m *EmailNotificationsSetting) Serialize(writer i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.SerializationWriter)(error) {
    err := m.Entity.Serialize(writer)
    if err != nil {
        return err
    }
    if m.GetAdditionalEvents() != nil {
        cast := (*m.GetAdditionalEvents()).String()
        err = writer.WriteStringValue("additionalEvents", &cast)
        if err != nil {
            return err
        }
    }
    {
        err = writer.WriteBoolValue("isEnabled", m.GetIsEnabled())
        if err != nil {
            return err
        }
    }
    {
        err = writer.WriteObjectValue("recipients", m.GetRecipients())
        if err != nil {
            return err
        }
    }
    return nil
}
// SetAdditionalEvents sets the additionalEvents property value. The additionalEvents property
func (m *EmailNotificationsSetting) SetAdditionalEvents(value *NotificationEventsType)() {
    err := m.GetBackingStore().Set("additionalEvents", value)
    if err != nil {
        panic(err)
    }
}
// SetIsEnabled sets the isEnabled property value. Indicates whether notifications are enabled.
func (m *EmailNotificationsSetting) SetIsEnabled(value *bool)() {
    err := m.GetBackingStore().Set("isEnabled", value)
    if err != nil {
        panic(err)
    }
}
// SetRecipients sets the recipients property value. The recipients property
func (m *EmailNotificationsSetting) SetRecipients(value NotificationRecipientsable)() {
    err := m.GetBackingStore().Set("recipients", value)
    if err != nil {
        panic(err)
    }
}
type EmailNotificationsSettingable interface {
    Entityable
    i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.Parsable
    GetAdditionalEvents()(*NotificationEventsType)
    GetIsEnabled()(*bool)
    GetRecipients()(NotificationRecipientsable)
    SetAdditionalEvents(value *NotificationEventsType)()
    SetIsEnabled(value *bool)()
    SetRecipients(value NotificationRecipientsable)()
}
