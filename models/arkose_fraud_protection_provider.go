// Code generated by Microsoft Kiota - DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package models

import (
    i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91 "github.com/microsoft/kiota-abstractions-go/serialization"
)

type ArkoseFraudProtectionProvider struct {
    FraudProtectionProvider
}
// NewArkoseFraudProtectionProvider instantiates a new ArkoseFraudProtectionProvider and sets the default values.
func NewArkoseFraudProtectionProvider()(*ArkoseFraudProtectionProvider) {
    m := &ArkoseFraudProtectionProvider{
        FraudProtectionProvider: *NewFraudProtectionProvider(),
    }
    odataTypeValue := "#microsoft.graph.arkoseFraudProtectionProvider"
    m.SetOdataType(&odataTypeValue)
    return m
}
// CreateArkoseFraudProtectionProviderFromDiscriminatorValue creates a new instance of the appropriate class based on discriminator value
// returns a Parsable when successful
func CreateArkoseFraudProtectionProviderFromDiscriminatorValue(parseNode i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode)(i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.Parsable, error) {
    return NewArkoseFraudProtectionProvider(), nil
}
// GetClientSubDomain gets the clientSubDomain property value. The clientSubDomain property
// returns a *string when successful
func (m *ArkoseFraudProtectionProvider) GetClientSubDomain()(*string) {
    val, err := m.GetBackingStore().Get("clientSubDomain")
    if err != nil {
        panic(err)
    }
    if val != nil {
        return val.(*string)
    }
    return nil
}
// GetFieldDeserializers the deserialization information for the current model
// returns a map[string]func(i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode)(error) when successful
func (m *ArkoseFraudProtectionProvider) GetFieldDeserializers()(map[string]func(i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode)(error)) {
    res := m.FraudProtectionProvider.GetFieldDeserializers()
    res["clientSubDomain"] = func (n i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode) error {
        val, err := n.GetStringValue()
        if err != nil {
            return err
        }
        if val != nil {
            m.SetClientSubDomain(val)
        }
        return nil
    }
    res["privateKey"] = func (n i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode) error {
        val, err := n.GetStringValue()
        if err != nil {
            return err
        }
        if val != nil {
            m.SetPrivateKey(val)
        }
        return nil
    }
    res["publicKey"] = func (n i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode) error {
        val, err := n.GetStringValue()
        if err != nil {
            return err
        }
        if val != nil {
            m.SetPublicKey(val)
        }
        return nil
    }
    res["verifySubDomain"] = func (n i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode) error {
        val, err := n.GetStringValue()
        if err != nil {
            return err
        }
        if val != nil {
            m.SetVerifySubDomain(val)
        }
        return nil
    }
    return res
}
// GetPrivateKey gets the privateKey property value. The privateKey property
// returns a *string when successful
func (m *ArkoseFraudProtectionProvider) GetPrivateKey()(*string) {
    val, err := m.GetBackingStore().Get("privateKey")
    if err != nil {
        panic(err)
    }
    if val != nil {
        return val.(*string)
    }
    return nil
}
// GetPublicKey gets the publicKey property value. The publicKey property
// returns a *string when successful
func (m *ArkoseFraudProtectionProvider) GetPublicKey()(*string) {
    val, err := m.GetBackingStore().Get("publicKey")
    if err != nil {
        panic(err)
    }
    if val != nil {
        return val.(*string)
    }
    return nil
}
// GetVerifySubDomain gets the verifySubDomain property value. The verifySubDomain property
// returns a *string when successful
func (m *ArkoseFraudProtectionProvider) GetVerifySubDomain()(*string) {
    val, err := m.GetBackingStore().Get("verifySubDomain")
    if err != nil {
        panic(err)
    }
    if val != nil {
        return val.(*string)
    }
    return nil
}
// Serialize serializes information the current object
func (m *ArkoseFraudProtectionProvider) Serialize(writer i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.SerializationWriter)(error) {
    err := m.FraudProtectionProvider.Serialize(writer)
    if err != nil {
        return err
    }
    {
        err = writer.WriteStringValue("clientSubDomain", m.GetClientSubDomain())
        if err != nil {
            return err
        }
    }
    {
        err = writer.WriteStringValue("privateKey", m.GetPrivateKey())
        if err != nil {
            return err
        }
    }
    {
        err = writer.WriteStringValue("publicKey", m.GetPublicKey())
        if err != nil {
            return err
        }
    }
    {
        err = writer.WriteStringValue("verifySubDomain", m.GetVerifySubDomain())
        if err != nil {
            return err
        }
    }
    return nil
}
// SetClientSubDomain sets the clientSubDomain property value. The clientSubDomain property
func (m *ArkoseFraudProtectionProvider) SetClientSubDomain(value *string)() {
    err := m.GetBackingStore().Set("clientSubDomain", value)
    if err != nil {
        panic(err)
    }
}
// SetPrivateKey sets the privateKey property value. The privateKey property
func (m *ArkoseFraudProtectionProvider) SetPrivateKey(value *string)() {
    err := m.GetBackingStore().Set("privateKey", value)
    if err != nil {
        panic(err)
    }
}
// SetPublicKey sets the publicKey property value. The publicKey property
func (m *ArkoseFraudProtectionProvider) SetPublicKey(value *string)() {
    err := m.GetBackingStore().Set("publicKey", value)
    if err != nil {
        panic(err)
    }
}
// SetVerifySubDomain sets the verifySubDomain property value. The verifySubDomain property
func (m *ArkoseFraudProtectionProvider) SetVerifySubDomain(value *string)() {
    err := m.GetBackingStore().Set("verifySubDomain", value)
    if err != nil {
        panic(err)
    }
}
type ArkoseFraudProtectionProviderable interface {
    FraudProtectionProviderable
    i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.Parsable
    GetClientSubDomain()(*string)
    GetPrivateKey()(*string)
    GetPublicKey()(*string)
    GetVerifySubDomain()(*string)
    SetClientSubDomain(value *string)()
    SetPrivateKey(value *string)()
    SetPublicKey(value *string)()
    SetVerifySubDomain(value *string)()
}
