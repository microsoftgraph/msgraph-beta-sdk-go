// Code generated by Microsoft Kiota - DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package networkaccess

import (
    "context"
    i2ae4187f7daee263371cb1c977df639813ab50ffa529013b7437480d1ec0158f "github.com/microsoft/kiota-abstractions-go"
    i20a3050780ee0b0cde0a884a4f35429a20d60067e3bcda382ec5400079147459 "github.com/microsoftgraph/msgraph-beta-sdk-go/models/odataerrors"
    i43e723cc778f0f3f3a05d36b9df74faa56771e9360d8ed793c50bdaacec8d5d2 "github.com/microsoftgraph/msgraph-beta-sdk-go/models/networkaccess"
)

// ConnectivityMicrosoftGraphNetworkaccessGetWebCategoryByUrlWithUrlRequestBuilder provides operations to call the getWebCategoryByUrl method.
type ConnectivityMicrosoftGraphNetworkaccessGetWebCategoryByUrlWithUrlRequestBuilder struct {
    i2ae4187f7daee263371cb1c977df639813ab50ffa529013b7437480d1ec0158f.BaseRequestBuilder
}
// ConnectivityMicrosoftGraphNetworkaccessGetWebCategoryByUrlWithUrlRequestBuilderGetRequestConfiguration configuration for the request such as headers, query parameters, and middleware options.
type ConnectivityMicrosoftGraphNetworkaccessGetWebCategoryByUrlWithUrlRequestBuilderGetRequestConfiguration struct {
    // Request headers
    Headers *i2ae4187f7daee263371cb1c977df639813ab50ffa529013b7437480d1ec0158f.RequestHeaders
    // Request options
    Options []i2ae4187f7daee263371cb1c977df639813ab50ffa529013b7437480d1ec0158f.RequestOption
}
// NewConnectivityMicrosoftGraphNetworkaccessGetWebCategoryByUrlWithUrlRequestBuilderInternal instantiates a new ConnectivityMicrosoftGraphNetworkaccessGetWebCategoryByUrlWithUrlRequestBuilder and sets the default values.
func NewConnectivityMicrosoftGraphNetworkaccessGetWebCategoryByUrlWithUrlRequestBuilderInternal(pathParameters map[string]string, requestAdapter i2ae4187f7daee263371cb1c977df639813ab50ffa529013b7437480d1ec0158f.RequestAdapter, url *string)(*ConnectivityMicrosoftGraphNetworkaccessGetWebCategoryByUrlWithUrlRequestBuilder) {
    m := &ConnectivityMicrosoftGraphNetworkaccessGetWebCategoryByUrlWithUrlRequestBuilder{
        BaseRequestBuilder: *i2ae4187f7daee263371cb1c977df639813ab50ffa529013b7437480d1ec0158f.NewBaseRequestBuilder(requestAdapter, "{+baseurl}/networkAccess/connectivity/microsoft.graph.networkaccess.getWebCategoryByUrl(url='{url}')", pathParameters),
    }
    if url != nil {
        m.BaseRequestBuilder.PathParameters["url"] = *url
    }
    return m
}
// NewConnectivityMicrosoftGraphNetworkaccessGetWebCategoryByUrlWithUrlRequestBuilder instantiates a new ConnectivityMicrosoftGraphNetworkaccessGetWebCategoryByUrlWithUrlRequestBuilder and sets the default values.
func NewConnectivityMicrosoftGraphNetworkaccessGetWebCategoryByUrlWithUrlRequestBuilder(rawUrl string, requestAdapter i2ae4187f7daee263371cb1c977df639813ab50ffa529013b7437480d1ec0158f.RequestAdapter)(*ConnectivityMicrosoftGraphNetworkaccessGetWebCategoryByUrlWithUrlRequestBuilder) {
    urlParams := make(map[string]string)
    urlParams["request-raw-url"] = rawUrl
    return NewConnectivityMicrosoftGraphNetworkaccessGetWebCategoryByUrlWithUrlRequestBuilderInternal(urlParams, requestAdapter, nil)
}
// Get invoke function getWebCategoryByUrl
// returns a WebCategoryable when successful
// returns a ODataError error when the service returns a 4XX or 5XX status code
func (m *ConnectivityMicrosoftGraphNetworkaccessGetWebCategoryByUrlWithUrlRequestBuilder) Get(ctx context.Context, requestConfiguration *ConnectivityMicrosoftGraphNetworkaccessGetWebCategoryByUrlWithUrlRequestBuilderGetRequestConfiguration)(i43e723cc778f0f3f3a05d36b9df74faa56771e9360d8ed793c50bdaacec8d5d2.WebCategoryable, error) {
    requestInfo, err := m.ToGetRequestInformation(ctx, requestConfiguration);
    if err != nil {
        return nil, err
    }
    errorMapping := i2ae4187f7daee263371cb1c977df639813ab50ffa529013b7437480d1ec0158f.ErrorMappings {
        "XXX": i20a3050780ee0b0cde0a884a4f35429a20d60067e3bcda382ec5400079147459.CreateODataErrorFromDiscriminatorValue,
    }
    res, err := m.BaseRequestBuilder.RequestAdapter.Send(ctx, requestInfo, i43e723cc778f0f3f3a05d36b9df74faa56771e9360d8ed793c50bdaacec8d5d2.CreateWebCategoryFromDiscriminatorValue, errorMapping)
    if err != nil {
        return nil, err
    }
    if res == nil {
        return nil, nil
    }
    return res.(i43e723cc778f0f3f3a05d36b9df74faa56771e9360d8ed793c50bdaacec8d5d2.WebCategoryable), nil
}
// ToGetRequestInformation invoke function getWebCategoryByUrl
// returns a *RequestInformation when successful
func (m *ConnectivityMicrosoftGraphNetworkaccessGetWebCategoryByUrlWithUrlRequestBuilder) ToGetRequestInformation(ctx context.Context, requestConfiguration *ConnectivityMicrosoftGraphNetworkaccessGetWebCategoryByUrlWithUrlRequestBuilderGetRequestConfiguration)(*i2ae4187f7daee263371cb1c977df639813ab50ffa529013b7437480d1ec0158f.RequestInformation, error) {
    requestInfo := i2ae4187f7daee263371cb1c977df639813ab50ffa529013b7437480d1ec0158f.NewRequestInformationWithMethodAndUrlTemplateAndPathParameters(i2ae4187f7daee263371cb1c977df639813ab50ffa529013b7437480d1ec0158f.GET, m.BaseRequestBuilder.UrlTemplate, m.BaseRequestBuilder.PathParameters)
    if requestConfiguration != nil {
        requestInfo.Headers.AddAll(requestConfiguration.Headers)
        requestInfo.AddRequestOptions(requestConfiguration.Options)
    }
    requestInfo.Headers.TryAdd("Accept", "application/json")
    return requestInfo, nil
}
// WithUrl returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
// returns a *ConnectivityMicrosoftGraphNetworkaccessGetWebCategoryByUrlWithUrlRequestBuilder when successful
func (m *ConnectivityMicrosoftGraphNetworkaccessGetWebCategoryByUrlWithUrlRequestBuilder) WithUrl(rawUrl string)(*ConnectivityMicrosoftGraphNetworkaccessGetWebCategoryByUrlWithUrlRequestBuilder) {
    return NewConnectivityMicrosoftGraphNetworkaccessGetWebCategoryByUrlWithUrlRequestBuilder(rawUrl, m.BaseRequestBuilder.RequestAdapter);
}
