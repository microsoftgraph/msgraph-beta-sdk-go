// Code generated by Microsoft Kiota - DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package teamwork

import (
    "context"
    i2ae4187f7daee263371cb1c977df639813ab50ffa529013b7437480d1ec0158f "github.com/microsoft/kiota-abstractions-go"
    i20a3050780ee0b0cde0a884a4f35429a20d60067e3bcda382ec5400079147459 "github.com/microsoftgraph/msgraph-beta-sdk-go/models/odataerrors"
)

// DetermineIfInteractionIsAllowedRequestBuilder provides operations to call the determineIfInteractionIsAllowed method.
type DetermineIfInteractionIsAllowedRequestBuilder struct {
    i2ae4187f7daee263371cb1c977df639813ab50ffa529013b7437480d1ec0158f.BaseRequestBuilder
}
// DetermineIfInteractionIsAllowedRequestBuilderPostRequestConfiguration configuration for the request such as headers, query parameters, and middleware options.
type DetermineIfInteractionIsAllowedRequestBuilderPostRequestConfiguration struct {
    // Request headers
    Headers *i2ae4187f7daee263371cb1c977df639813ab50ffa529013b7437480d1ec0158f.RequestHeaders
    // Request options
    Options []i2ae4187f7daee263371cb1c977df639813ab50ffa529013b7437480d1ec0158f.RequestOption
}
// NewDetermineIfInteractionIsAllowedRequestBuilderInternal instantiates a new DetermineIfInteractionIsAllowedRequestBuilder and sets the default values.
func NewDetermineIfInteractionIsAllowedRequestBuilderInternal(pathParameters map[string]string, requestAdapter i2ae4187f7daee263371cb1c977df639813ab50ffa529013b7437480d1ec0158f.RequestAdapter)(*DetermineIfInteractionIsAllowedRequestBuilder) {
    m := &DetermineIfInteractionIsAllowedRequestBuilder{
        BaseRequestBuilder: *i2ae4187f7daee263371cb1c977df639813ab50ffa529013b7437480d1ec0158f.NewBaseRequestBuilder(requestAdapter, "{+baseurl}/teamwork/determineIfInteractionIsAllowed", pathParameters),
    }
    return m
}
// NewDetermineIfInteractionIsAllowedRequestBuilder instantiates a new DetermineIfInteractionIsAllowedRequestBuilder and sets the default values.
func NewDetermineIfInteractionIsAllowedRequestBuilder(rawUrl string, requestAdapter i2ae4187f7daee263371cb1c977df639813ab50ffa529013b7437480d1ec0158f.RequestAdapter)(*DetermineIfInteractionIsAllowedRequestBuilder) {
    urlParams := make(map[string]string)
    urlParams["request-raw-url"] = rawUrl
    return NewDetermineIfInteractionIsAllowedRequestBuilderInternal(urlParams, requestAdapter)
}
// Post determine if a specified Microsoft Teams interaction is allowed between the signed-in user and specified users.
// Deprecated: This method is obsolete. Use PostAsDetermineIfInteractionIsAllowedPostResponse instead.
// returns a DetermineIfInteractionIsAllowedResponseable when successful
// returns a ODataError error when the service returns a 4XX or 5XX status code
// [Find more info here]
// 
// [Find more info here]: https://learn.microsoft.com/graph/api/teamwork-determineifinteractionisallowed?view=graph-rest-beta
func (m *DetermineIfInteractionIsAllowedRequestBuilder) Post(ctx context.Context, body DetermineIfInteractionIsAllowedPostRequestBodyable, requestConfiguration *DetermineIfInteractionIsAllowedRequestBuilderPostRequestConfiguration)(DetermineIfInteractionIsAllowedResponseable, error) {
    requestInfo, err := m.ToPostRequestInformation(ctx, body, requestConfiguration);
    if err != nil {
        return nil, err
    }
    errorMapping := i2ae4187f7daee263371cb1c977df639813ab50ffa529013b7437480d1ec0158f.ErrorMappings {
        "XXX": i20a3050780ee0b0cde0a884a4f35429a20d60067e3bcda382ec5400079147459.CreateODataErrorFromDiscriminatorValue,
    }
    res, err := m.BaseRequestBuilder.RequestAdapter.Send(ctx, requestInfo, CreateDetermineIfInteractionIsAllowedResponseFromDiscriminatorValue, errorMapping)
    if err != nil {
        return nil, err
    }
    if res == nil {
        return nil, nil
    }
    return res.(DetermineIfInteractionIsAllowedResponseable), nil
}
// PostAsDetermineIfInteractionIsAllowedPostResponse determine if a specified Microsoft Teams interaction is allowed between the signed-in user and specified users.
// returns a DetermineIfInteractionIsAllowedPostResponseable when successful
// returns a ODataError error when the service returns a 4XX or 5XX status code
// [Find more info here]
// 
// [Find more info here]: https://learn.microsoft.com/graph/api/teamwork-determineifinteractionisallowed?view=graph-rest-beta
func (m *DetermineIfInteractionIsAllowedRequestBuilder) PostAsDetermineIfInteractionIsAllowedPostResponse(ctx context.Context, body DetermineIfInteractionIsAllowedPostRequestBodyable, requestConfiguration *DetermineIfInteractionIsAllowedRequestBuilderPostRequestConfiguration)(DetermineIfInteractionIsAllowedPostResponseable, error) {
    requestInfo, err := m.ToPostRequestInformation(ctx, body, requestConfiguration);
    if err != nil {
        return nil, err
    }
    errorMapping := i2ae4187f7daee263371cb1c977df639813ab50ffa529013b7437480d1ec0158f.ErrorMappings {
        "XXX": i20a3050780ee0b0cde0a884a4f35429a20d60067e3bcda382ec5400079147459.CreateODataErrorFromDiscriminatorValue,
    }
    res, err := m.BaseRequestBuilder.RequestAdapter.Send(ctx, requestInfo, CreateDetermineIfInteractionIsAllowedPostResponseFromDiscriminatorValue, errorMapping)
    if err != nil {
        return nil, err
    }
    if res == nil {
        return nil, nil
    }
    return res.(DetermineIfInteractionIsAllowedPostResponseable), nil
}
// ToPostRequestInformation determine if a specified Microsoft Teams interaction is allowed between the signed-in user and specified users.
// returns a *RequestInformation when successful
func (m *DetermineIfInteractionIsAllowedRequestBuilder) ToPostRequestInformation(ctx context.Context, body DetermineIfInteractionIsAllowedPostRequestBodyable, requestConfiguration *DetermineIfInteractionIsAllowedRequestBuilderPostRequestConfiguration)(*i2ae4187f7daee263371cb1c977df639813ab50ffa529013b7437480d1ec0158f.RequestInformation, error) {
    requestInfo := i2ae4187f7daee263371cb1c977df639813ab50ffa529013b7437480d1ec0158f.NewRequestInformationWithMethodAndUrlTemplateAndPathParameters(i2ae4187f7daee263371cb1c977df639813ab50ffa529013b7437480d1ec0158f.POST, m.BaseRequestBuilder.UrlTemplate, m.BaseRequestBuilder.PathParameters)
    if requestConfiguration != nil {
        requestInfo.Headers.AddAll(requestConfiguration.Headers)
        requestInfo.AddRequestOptions(requestConfiguration.Options)
    }
    requestInfo.Headers.TryAdd("Accept", "application/json")
    err := requestInfo.SetContentFromParsable(ctx, m.BaseRequestBuilder.RequestAdapter, "application/json", body)
    if err != nil {
        return nil, err
    }
    return requestInfo, nil
}
// WithUrl returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
// returns a *DetermineIfInteractionIsAllowedRequestBuilder when successful
func (m *DetermineIfInteractionIsAllowedRequestBuilder) WithUrl(rawUrl string)(*DetermineIfInteractionIsAllowedRequestBuilder) {
    return NewDetermineIfInteractionIsAllowedRequestBuilder(rawUrl, m.BaseRequestBuilder.RequestAdapter);
}
